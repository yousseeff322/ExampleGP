
SENSOR_NODE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003430  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800358c  0800358c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800358c  0800358c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800358c  0800358c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c8  20000008  0800359c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021d0  0800359c  000221d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071f7  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001672  00000000  00000000  00027228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  000288a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00028ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bf0  00000000  00000000  00029688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073ba  00000000  00000000  0002c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00012748  00000000  00000000  00033632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00045d7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ccc  00000000  00000000  00045dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08003548 	.word	0x08003548

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08003548 	.word	0x08003548

08000170 <CAN_voidInit>:




void CAN_voidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    /**  Enable the CAN interface clock **/
	MRCC_VidEnablePeripheralClock(RCC_APB1, CAN_RCC);
 8000174:	2119      	movs	r1, #25
 8000176:	2001      	movs	r0, #1
 8000178:	f000 fa60 	bl	800063c <MRCC_VidEnablePeripheralClock>
                        CAN_TX mapped to PB9    */
  //  RCC_voidEnableClock(RCC_APB2, AFIO_RCC);
  // AFIO_voidRemapPeripheralPins (CAN_REMAP);
    /* Enable the clock for the CAN GPIOs */
  //  RCC_voidEnableClock(RCC_APB2, APB2_GPIOB_EN);
    MGPIO_VidSetPinDirection(GPIOA, PIN11, INPUT_PULL_UP_DOWN); //RX
 800017c:	2208      	movs	r2, #8
 800017e:	210b      	movs	r1, #11
 8000180:	2000      	movs	r0, #0
 8000182:	f000 f917 	bl	80003b4 <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, PIN12, OUT_SPEED_50MHZ_AFPP); //TX
 8000186:	220b      	movs	r2, #11
 8000188:	210c      	movs	r1, #12
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f912 	bl	80003b4 <MGPIO_VidSetPinDirection>
    /**  exit CAN sleep mode **/
    /* CLEAR SLEEP bit (SLEEP) */
    CLR_BIT(CAN->MCR,1);
 8000190:	4b27      	ldr	r3, [pc, #156]	; (8000230 <CAN_voidInit+0xc0>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a26      	ldr	r2, [pc, #152]	; (8000230 <CAN_voidInit+0xc0>)
 8000196:	f023 0302 	bic.w	r3, r3, #2
 800019a:	6013      	str	r3, [r2, #0]
    /* wait to exit sleep mode */
    while ((GET_BIT(CAN->MSR,1)));
 800019c:	bf00      	nop
 800019e:	4b24      	ldr	r3, [pc, #144]	; (8000230 <CAN_voidInit+0xc0>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	085b      	lsrs	r3, r3, #1
 80001a4:	f003 0301 	and.w	r3, r3, #1
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d1f8      	bne.n	800019e <CAN_voidInit+0x2e>
     /**  Set CAN Initialization mode **/
    /* SET Initialization request BIT (INRQ) */
    SET_BIT(CAN->MCR,0);
 80001ac:	4b20      	ldr	r3, [pc, #128]	; (8000230 <CAN_voidInit+0xc0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a1f      	ldr	r2, [pc, #124]	; (8000230 <CAN_voidInit+0xc0>)
 80001b2:	f043 0301 	orr.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
    /* wait to enter in Initialization mode */
    while(!(GET_BIT(CAN->MSR,0)));
 80001b8:	bf00      	nop
 80001ba:	4b1d      	ldr	r3, [pc, #116]	; (8000230 <CAN_voidInit+0xc0>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	f003 0301 	and.w	r3, r3, #1
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d0f9      	beq.n	80001ba <CAN_voidInit+0x4a>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
     /* by the identifier of the message */
        CLR_BIT(CAN->MCR,2); //TXFP
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <CAN_voidInit+0xc0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a19      	ldr	r2, [pc, #100]	; (8000230 <CAN_voidInit+0xc0>)
 80001cc:	f023 0304 	bic.w	r3, r3, #4
 80001d0:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
     /* Receive FIFO not locked on overrun.
         Once a receive FIFO is full the next incoming message will overwrite the previous one. */
        CLR_BIT(CAN->MCR,3); //RFLM
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <CAN_voidInit+0xc0>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a16      	ldr	r2, [pc, #88]	; (8000230 <CAN_voidInit+0xc0>)
 80001d8:	f023 0308 	bic.w	r3, r3, #8
 80001dc:	6013      	str	r3, [r2, #0]
#endif
    /** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
        CLR_BIT(CAN->MCR,4); //NART
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <CAN_voidInit+0xc0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <CAN_voidInit+0xc0>)
 80001e4:	f023 0310 	bic.w	r3, r3, #16
 80001e8:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

    /** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,5); //AWUM
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <CAN_voidInit+0xc0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a10      	ldr	r2, [pc, #64]	; (8000230 <CAN_voidInit+0xc0>)
 80001f0:	f043 0320 	orr.w	r3, r3, #32
 80001f4:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

    /** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,6); //ABOM
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <CAN_voidInit+0xc0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <CAN_voidInit+0xc0>)
 80001fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000200:	6013      	str	r3, [r2, #0]

    /** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
        CLR_BIT(CAN->MCR,7); //TTCM
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <CAN_voidInit+0xc0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <CAN_voidInit+0xc0>)
 8000208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800020c:	6013      	str	r3, [r2, #0]
#endif


     /** Set the bit timing register **/
  WRITE_REG(CAN->BTR, (u32) (MODE |
 800020e:	2301      	movs	r3, #1
 8000210:	3b01      	subs	r3, #1
 8000212:	051b      	lsls	r3, r3, #20
 8000214:	461a      	mov	r2, r3
 8000216:	230c      	movs	r3, #12
 8000218:	3b01      	subs	r3, #1
 800021a:	041b      	lsls	r3, r3, #16
 800021c:	4313      	orrs	r3, r2
 800021e:	2202      	movs	r2, #2
 8000220:	3a01      	subs	r2, #1
 8000222:	4611      	mov	r1, r2
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <CAN_voidInit+0xc0>)
 8000226:	430b      	orrs	r3, r1
 8000228:	61d3      	str	r3, [r2, #28]
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
		  ((CAN_bitRateConfig[BOUDRATE].TS1-1) << 16) |
		  (CAN_bitRateConfig[BOUDRATE].BRP-1)));
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40006400 	.word	0x40006400

08000234 <CAN_voidAddTxMsg>:


u8 CAN_voidAddTxMsg(CAN_TxHeaderTypeDef *pTxHeader, u8 Local_u8Data[]) {
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
    u32 local_u8TransmitMailbox;
    u32 local_u32TSR;
    local_u32TSR = READ_REG(CAN->TSR);
 800023e:	4b51      	ldr	r3, [pc, #324]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	60fb      	str	r3, [r7, #12]

    if ((GET_BIT(local_u32TSR, 26) != 0x0) ||
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0e9b      	lsrs	r3, r3, #26
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d10c      	bne.n	800026a <CAN_voidAddTxMsg+0x36>
        (GET_BIT(local_u32TSR, 27) != 0x0) ||
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	0edb      	lsrs	r3, r3, #27
 8000254:	f003 0301 	and.w	r3, r3, #1
    if ((GET_BIT(local_u32TSR, 26) != 0x0) ||
 8000258:	2b00      	cmp	r3, #0
 800025a:	d106      	bne.n	800026a <CAN_voidAddTxMsg+0x36>
        (GET_BIT(local_u32TSR, 28) != 0x0)) {
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	0f1b      	lsrs	r3, r3, #28
 8000260:	f003 0301 	and.w	r3, r3, #1
        (GET_BIT(local_u32TSR, 27) != 0x0) ||
 8000264:	2b00      	cmp	r3, #0
 8000266:	f000 8086 	beq.w	8000376 <CAN_voidAddTxMsg+0x142>

        local_u8TransmitMailbox = ((local_u32TSR >> 24) & 0x3);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	0e1b      	lsrs	r3, r3, #24
 800026e:	f003 0303 	and.w	r3, r3, #3
 8000272:	60bb      	str	r3, [r7, #8]

        if (local_u8TransmitMailbox <= 2) {
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d87d      	bhi.n	8000376 <CAN_voidAddTxMsg+0x142>
            if (pTxHeader->IDE == CAN_ID_STD) {
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10c      	bne.n	800029c <CAN_voidAddTxMsg+0x68>
                CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) | pTxHeader->RTR);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	055a      	lsls	r2, r3, #21
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	493d      	ldr	r1, [pc, #244]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 800028e:	431a      	orrs	r2, r3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	3318      	adds	r3, #24
 8000294:	011b      	lsls	r3, r3, #4
 8000296:	440b      	add	r3, r1
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	e00e      	b.n	80002ba <CAN_voidAddTxMsg+0x86>
            } else {
                CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) | pTxHeader->IDE | pTxHeader->RTR);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	00da      	lsls	r2, r3, #3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	431a      	orrs	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4935      	ldr	r1, [pc, #212]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 80002ae:	431a      	orrs	r2, r3
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	3318      	adds	r3, #24
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	440b      	add	r3, r1
 80002b8:	601a      	str	r2, [r3, #0]
            }

            CAN->TxMailBox[local_u8TransmitMailbox].TDTR = (pTxHeader->DLC);
 80002ba:	4932      	ldr	r1, [pc, #200]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691a      	ldr	r2, [r3, #16]
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	3318      	adds	r3, #24
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	440b      	add	r3, r1
 80002c8:	3304      	adds	r3, #4
 80002ca:	601a      	str	r2, [r3, #0]

            if (pTxHeader->TransmitGlobalTime == ENABLE) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7d1b      	ldrb	r3, [r3, #20]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d10f      	bne.n	80002f4 <CAN_voidAddTxMsg+0xc0>
                SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TDTR, 8);
 80002d4:	4a2b      	ldr	r2, [pc, #172]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	3318      	adds	r3, #24
 80002da:	011b      	lsls	r3, r3, #4
 80002dc:	4413      	add	r3, r2
 80002de:	3304      	adds	r3, #4
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4928      	ldr	r1, [pc, #160]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 80002e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3318      	adds	r3, #24
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	440b      	add	r3, r1
 80002f0:	3304      	adds	r3, #4
 80002f2:	601a      	str	r2, [r3, #0]
            }

            WRITE_REG(CAN->TxMailBox[local_u8TransmitMailbox].TDHR,
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	3307      	adds	r3, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	061a      	lsls	r2, r3, #24
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	3306      	adds	r3, #6
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	041b      	lsls	r3, r3, #16
 8000304:	431a      	orrs	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	3305      	adds	r3, #5
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	021b      	lsls	r3, r3, #8
 800030e:	4313      	orrs	r3, r2
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	3204      	adds	r2, #4
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	491b      	ldr	r1, [pc, #108]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 8000318:	431a      	orrs	r2, r3
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	011b      	lsls	r3, r3, #4
 800031e:	440b      	add	r3, r1
 8000320:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000324:	601a      	str	r2, [r3, #0]
                      ((u32)Local_u8Data[7] << 24) |
                      ((u32)Local_u8Data[6] << 16) |
                      ((u32)Local_u8Data[5] << 8 ) |
                      ((u32)Local_u8Data[4]));
            WRITE_REG(CAN->TxMailBox[local_u8TransmitMailbox].TDLR,
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	3303      	adds	r3, #3
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	061a      	lsls	r2, r3, #24
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	3302      	adds	r3, #2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	041b      	lsls	r3, r3, #16
 8000336:	431a      	orrs	r2, r3
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	4313      	orrs	r3, r2
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	490f      	ldr	r1, [pc, #60]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 8000348:	431a      	orrs	r2, r3
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	440b      	add	r3, r1
 8000350:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000354:	601a      	str	r2, [r3, #0]
                      ((u32)Local_u8Data[3] << 24) |
                      ((u32)Local_u8Data[2] << 16) |
                      ((u32)Local_u8Data[1] << 8 ) |
                      ((u32)Local_u8Data[0]));

            SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0);
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3318      	adds	r3, #24
 800035c:	011b      	lsls	r3, r3, #4
 800035e:	4413      	add	r3, r2
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4908      	ldr	r1, [pc, #32]	; (8000384 <CAN_voidAddTxMsg+0x150>)
 8000364:	f043 0201 	orr.w	r2, r3, #1
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3318      	adds	r3, #24
 800036c:	011b      	lsls	r3, r3, #4
 800036e:	440b      	add	r3, r1
 8000370:	601a      	str	r2, [r3, #0]

            return 0;  // ✅ Success
 8000372:	2300      	movs	r3, #0
 8000374:	e000      	b.n	8000378 <CAN_voidAddTxMsg+0x144>
        }
    }
    return 1; // ❌ Failure (No empty mailbox)
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40006400 	.word	0x40006400

08000388 <CAN_voidStart>:



void CAN_voidStart(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR,0);
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <CAN_voidStart+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <CAN_voidStart+0x28>)
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while(!(GET_BIT(CAN->MSR,0) == 0));
 8000398:	bf00      	nop
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <CAN_voidStart+0x28>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d1f9      	bne.n	800039a <CAN_voidStart+0x12>
}
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40006400 	.word	0x40006400

080003b4 <MGPIO_VidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"



void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	460b      	mov	r3, r1
 80003c0:	71bb      	strb	r3, [r7, #6]
 80003c2:	4613      	mov	r3, r2
 80003c4:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d07a      	beq.n	80004c2 <MGPIO_VidSetPinDirection+0x10e>
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	f300 80b1 	bgt.w	8000534 <MGPIO_VidSetPinDirection+0x180>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <MGPIO_VidSetPinDirection+0x28>
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d03a      	beq.n	8000450 <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 80003da:	e0ab      	b.n	8000534 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	2b07      	cmp	r3, #7
 80003e0:	d817      	bhi.n	8000412 <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 80003e2:	4b5a      	ldr	r3, [pc, #360]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	210f      	movs	r1, #15
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a55      	ldr	r2, [pc, #340]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80003fa:	4b54      	ldr	r3, [pc, #336]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	7979      	ldrb	r1, [r7, #5]
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	0092      	lsls	r2, r2, #2
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a50      	ldr	r2, [pc, #320]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6013      	str	r3, [r2, #0]
		break;
 8000410:	e092      	b.n	8000538 <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	2b0f      	cmp	r3, #15
 8000416:	f200 808f 	bhi.w	8000538 <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 800041a:	79bb      	ldrb	r3, [r7, #6]
 800041c:	3b08      	subs	r3, #8
 800041e:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000420:	4b4a      	ldr	r3, [pc, #296]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	79ba      	ldrb	r2, [r7, #6]
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	210f      	movs	r1, #15
 800042a:	fa01 f202 	lsl.w	r2, r1, r2
 800042e:	43d2      	mvns	r2, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a46      	ldr	r2, [pc, #280]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 8000434:	400b      	ands	r3, r1
 8000436:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	7979      	ldrb	r1, [r7, #5]
 800043e:	79ba      	ldrb	r2, [r7, #6]
 8000440:	0092      	lsls	r2, r2, #2
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a40      	ldr	r2, [pc, #256]	; (800054c <MGPIO_VidSetPinDirection+0x198>)
 800044a:	430b      	orrs	r3, r1
 800044c:	6053      	str	r3, [r2, #4]
		break;
 800044e:	e073      	b.n	8000538 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	2b07      	cmp	r3, #7
 8000454:	d817      	bhi.n	8000486 <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000456:	4b3e      	ldr	r3, [pc, #248]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	79ba      	ldrb	r2, [r7, #6]
 800045c:	0092      	lsls	r2, r2, #2
 800045e:	210f      	movs	r1, #15
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	43d2      	mvns	r2, r2
 8000466:	4611      	mov	r1, r2
 8000468:	4a39      	ldr	r2, [pc, #228]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 800046a:	400b      	ands	r3, r1
 800046c:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800046e:	4b38      	ldr	r3, [pc, #224]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	7979      	ldrb	r1, [r7, #5]
 8000474:	79ba      	ldrb	r2, [r7, #6]
 8000476:	0092      	lsls	r2, r2, #2
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a34      	ldr	r2, [pc, #208]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
		break;
 8000484:	e05a      	b.n	800053c <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	2b0f      	cmp	r3, #15
 800048a:	d857      	bhi.n	800053c <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	3b08      	subs	r3, #8
 8000490:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	210f      	movs	r1, #15
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	43d2      	mvns	r2, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 80004a6:	400b      	ands	r3, r1
 80004a8:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	7979      	ldrb	r1, [r7, #5]
 80004b0:	79ba      	ldrb	r2, [r7, #6]
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a25      	ldr	r2, [pc, #148]	; (8000550 <MGPIO_VidSetPinDirection+0x19c>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	6053      	str	r3, [r2, #4]
		break;
 80004c0:	e03c      	b.n	800053c <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 80004c2:	79bb      	ldrb	r3, [r7, #6]
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d817      	bhi.n	80004f8 <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80004c8:	4b22      	ldr	r3, [pc, #136]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	79ba      	ldrb	r2, [r7, #6]
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	210f      	movs	r1, #15
 80004d2:	fa01 f202 	lsl.w	r2, r1, r2
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 80004dc:	400b      	ands	r3, r1
 80004de:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	7979      	ldrb	r1, [r7, #5]
 80004e6:	79ba      	ldrb	r2, [r7, #6]
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6013      	str	r3, [r2, #0]
		break;
 80004f6:	e023      	b.n	8000540 <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d820      	bhi.n	8000540 <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	3b08      	subs	r3, #8
 8000502:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	79ba      	ldrb	r2, [r7, #6]
 800050a:	0092      	lsls	r2, r2, #2
 800050c:	210f      	movs	r1, #15
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	43d2      	mvns	r2, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 8000518:	400b      	ands	r3, r1
 800051a:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	7979      	ldrb	r1, [r7, #5]
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a09      	ldr	r2, [pc, #36]	; (8000554 <MGPIO_VidSetPinDirection+0x1a0>)
 800052e:	430b      	orrs	r3, r1
 8000530:	6053      	str	r3, [r2, #4]
		break;
 8000532:	e005      	b.n	8000540 <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 8000534:	bf00      	nop
 8000536:	e004      	b.n	8000542 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000538:	bf00      	nop
 800053a:	e002      	b.n	8000542 <MGPIO_VidSetPinDirection+0x18e>
		break;
 800053c:	bf00      	nop
 800053e:	e000      	b.n	8000542 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000540:	bf00      	nop
	}

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40010800 	.word	0x40010800
 8000550:	40010c00 	.word	0x40010c00
 8000554:	40011000 	.word	0x40011000

08000558 <MGPIO_VidTogglePin>:

	return LOC_u8Result;

}

void MGPIO_VidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
    switch(Copy_u8Port) {
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d01c      	beq.n	80005a8 <MGPIO_VidTogglePin+0x50>
 800056e:	2b02      	cmp	r3, #2
 8000570:	dc25      	bgt.n	80005be <MGPIO_VidTogglePin+0x66>
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <MGPIO_VidTogglePin+0x24>
 8000576:	2b01      	cmp	r3, #1
 8000578:	d00b      	beq.n	8000592 <MGPIO_VidTogglePin+0x3a>
            break;
        case GPIOC:
            TOGGLE_BIT(MGPIOC->ODR, Copy_u8Pin);
            break;
    }
}
 800057a:	e020      	b.n	80005be <MGPIO_VidTogglePin+0x66>
            TOGGLE_BIT(MGPIOA->ODR, Copy_u8Pin);
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MGPIO_VidTogglePin+0x70>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	79ba      	ldrb	r2, [r7, #6]
 8000582:	2101      	movs	r1, #1
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <MGPIO_VidTogglePin+0x70>)
 800058c:	404b      	eors	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
            break;
 8000590:	e015      	b.n	80005be <MGPIO_VidTogglePin+0x66>
            TOGGLE_BIT(MGPIOB->ODR, Copy_u8Pin);
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MGPIO_VidTogglePin+0x74>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	79ba      	ldrb	r2, [r7, #6]
 8000598:	2101      	movs	r1, #1
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <MGPIO_VidTogglePin+0x74>)
 80005a2:	404b      	eors	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
            break;
 80005a6:	e00a      	b.n	80005be <MGPIO_VidTogglePin+0x66>
            TOGGLE_BIT(MGPIOC->ODR, Copy_u8Pin);
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MGPIO_VidTogglePin+0x78>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	79ba      	ldrb	r2, [r7, #6]
 80005ae:	2101      	movs	r1, #1
 80005b0:	fa01 f202 	lsl.w	r2, r1, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <MGPIO_VidTogglePin+0x78>)
 80005b8:	404b      	eors	r3, r1
 80005ba:	60d3      	str	r3, [r2, #12]
            break;
 80005bc:	bf00      	nop
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40010800 	.word	0x40010800
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	40011000 	.word	0x40011000

080005d4 <MRCC_VidInit>:
#include "RCC_private.h"
#include "RCC_config.h"



void MRCC_VidInit ( void ) {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

	#elif   RCC_CLOCK_TYPE == RCC_PLL
	
	/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* PLL Selected As A System Clock */
		CLR_BIT( RCC_CFGR , 0  );
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MRCC_VidInit+0x60>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a15      	ldr	r2, [pc, #84]	; (8000634 <MRCC_VidInit+0x60>)
 80005de:	f023 0301 	bic.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
		SET_BIT( RCC_CFGR , 1  );
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MRCC_VidInit+0x60>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MRCC_VidInit+0x60>)
 80005ea:	f043 0302 	orr.w	r3, r3, #2
 80005ee:	6013      	str	r3, [r2, #0]
			
			
			#elif RCC_PLL_INPUT == RCC_PLL_HSE
			
		/* Bit 16 -> Enable The HSE Clock */
			SET_BIT( RCC_CR   , 16 );
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MRCC_VidInit+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <MRCC_VidInit+0x64>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6013      	str	r3, [r2, #0]

			/* BIT 16 -> Choose PLL Source -> If HSI/2 OR HSE */
			/* PLL Entery Clock Source Is HSE */
			SET_BIT( RCC_CFGR , 16 );
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MRCC_VidInit+0x60>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <MRCC_VidInit+0x60>)
 8000602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000606:	6013      	str	r3, [r2, #0]

			/* BIT 17 -> IF PLL Source IS HSE Then Choose Between Divide HSE/2 Or Not  */
			/* HSE Is Not Divided */
			CLR_BIT( RCC_CFGR , 17 );
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MRCC_VidInit+0x60>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <MRCC_VidInit+0x60>)
 800060e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000612:	6013      	str	r3, [r2, #0]
				#error("you chosed wrong Pll input")
			#endif
			


				SET_BIT( RCC_CR , 24 );
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MRCC_VidInit+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <MRCC_VidInit+0x64>)
 800061a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800061e:	6013      	str	r3, [r2, #0]
	
	
	/* For Clock Security System */
	#if CLOCK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM

			SET_BIT(RCC_CR , 19 ) ; 
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MRCC_VidInit+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <MRCC_VidInit+0x64>)
 8000626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800062a:	6013      	str	r3, [r2, #0]
	#else

		#warning " Wrong Clock Security System Configuration Choice "

	#endif
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021004 	.word	0x40021004
 8000638:	40021000 	.word	0x40021000

0800063c <MRCC_VidEnablePeripheralClock>:





void MRCC_VidEnablePeripheralClock (u8 Copy_u8BusID , u8 Copy_u8Peripheral){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	
	if (Copy_u8Peripheral <=31 )
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b1f      	cmp	r3, #31
 8000650:	d82a      	bhi.n	80006a8 <MRCC_VidEnablePeripheralClock+0x6c>
	{
		
		switch (Copy_u8BusID)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d01c      	beq.n	8000692 <MRCC_VidEnablePeripheralClock+0x56>
 8000658:	2b02      	cmp	r3, #2
 800065a:	dc25      	bgt.n	80006a8 <MRCC_VidEnablePeripheralClock+0x6c>
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <MRCC_VidEnablePeripheralClock+0x2a>
 8000660:	2b01      	cmp	r3, #1
 8000662:	d00b      	beq.n	800067c <MRCC_VidEnablePeripheralClock+0x40>
	{
		/* Return Error */ 
		
	}		
	
}
 8000664:	e020      	b.n	80006a8 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_AHB   :	SET_BIT(RCC_AHBENR  , Copy_u8Peripheral ) ; break ;  
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MRCC_VidEnablePeripheralClock+0x78>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	79ba      	ldrb	r2, [r7, #6]
 800066c:	2101      	movs	r1, #1
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MRCC_VidEnablePeripheralClock+0x78>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e015      	b.n	80006a8 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_APB1  :	SET_BIT(RCC_APB1ENR , Copy_u8Peripheral ) ; break ;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MRCC_VidEnablePeripheralClock+0x7c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	79ba      	ldrb	r2, [r7, #6]
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <MRCC_VidEnablePeripheralClock+0x7c>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	e00a      	b.n	80006a8 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_APB2  :	SET_BIT(RCC_APB2ENR , Copy_u8Peripheral ) ; break ;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MRCC_VidEnablePeripheralClock+0x80>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	79ba      	ldrb	r2, [r7, #6]
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	4611      	mov	r1, r2
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <MRCC_VidEnablePeripheralClock+0x80>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	bf00      	nop
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021014 	.word	0x40021014
 80006b8:	4002101c 	.word	0x4002101c
 80006bc:	40021018 	.word	0x40021018

080006c0 <MTIMER2_init>:




void MTIMER2_init(u8 Copy_u8Delay_type)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    // Enable TIM2 clock in RCC
    MRCC_VidEnablePeripheralClock(RCC_APB1, TIM2_RCC);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ffb5 	bl	800063c <MRCC_VidEnablePeripheralClock>

    switch(Copy_u8Delay_type)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d002      	beq.n	80006de <MTIMER2_init+0x1e>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d006      	beq.n	80006ea <MTIMER2_init+0x2a>
 80006dc:	e00a      	b.n	80006f4 <MTIMER2_init+0x34>
    {
        case delay_ms:
            MTIMER2->PSC = (u16)71999; // Correct Prescaler for 1ms
 80006de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e2:	f641 123f 	movw	r2, #6463	; 0x193f
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80006e8:	e004      	b.n	80006f4 <MTIMER2_init+0x34>

        case delay_us:
            MTIMER2->PSC = (u16)71; // Correct Prescaler for 1µs
 80006ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ee:	2247      	movs	r2, #71	; 0x47
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80006f2:	bf00      	nop
    }

    MTIMER2->EGR = (1 << EGR_UG); // Force update event to load prescaler
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
    MTIMER2->CR1 = (u16)0x0080; // Enable timer but don't start yet
 80006fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MTIMER3_init>:
#include "TIMER3_config.h"
#include "RCC_interface.h"
#include "RCC_private.h"


void MTIMER3_init(u8 mode) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
    // Enable TIM3 clock in RCC
	MRCC_VidEnablePeripheralClock(RCC_APB1, TIM3_RCC) ;
 8000716:	2101      	movs	r1, #1
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff ff8f 	bl	800063c <MRCC_VidEnablePeripheralClock>

    switch(mode) {
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	3b01      	subs	r3, #1
 8000722:	2b03      	cmp	r3, #3
 8000724:	d828      	bhi.n	8000778 <MTIMER3_init+0x6c>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <MTIMER3_init+0x20>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	0800073d 	.word	0x0800073d
 8000730:	08000747 	.word	0x08000747
 8000734:	0800074f 	.word	0x0800074f
 8000738:	08000763 	.word	0x08000763
        case delay_ms:
            MTIMER3->PSC = (u16)7999;   // Prescaler set for milliseconds delay
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MTIMER3_init+0x8c>)
 800073e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8000744:	e018      	b.n	8000778 <MTIMER3_init+0x6c>

        case delay_us:
            MTIMER3->PSC = (u16)7;      // Prescaler set for microseconds delay
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MTIMER3_init+0x8c>)
 8000748:	2207      	movs	r2, #7
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 800074c:	e014      	b.n	8000778 <MTIMER3_init+0x6c>

        case PWM_channel_1_us:
            MTIMER3->PSC = (u16)7;      // Prescaler for PWM in microseconds
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MTIMER3_init+0x8c>)
 8000750:	2207      	movs	r2, #7
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3->CCMR1 = (u16)0x0068; // PWM mode settings for channel 1
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MTIMER3_init+0x8c>)
 8000756:	2268      	movs	r2, #104	; 0x68
 8000758:	619a      	str	r2, [r3, #24]
            MTIMER3->CCER = (u16)0x0001;  // Enable output on channel 1
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MTIMER3_init+0x8c>)
 800075c:	2201      	movs	r2, #1
 800075e:	621a      	str	r2, [r3, #32]
            break;
 8000760:	e00a      	b.n	8000778 <MTIMER3_init+0x6c>

        case PWM_channel_1_IN:
            MTIMER3->PSC = (u16)7;       // Prescaler for input capture
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MTIMER3_init+0x8c>)
 8000764:	2207      	movs	r2, #7
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3->CCMR1 = (u16)0x0201; // Input capture settings for channel 1
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MTIMER3_init+0x8c>)
 800076a:	f240 2201 	movw	r2, #513	; 0x201
 800076e:	619a      	str	r2, [r3, #24]
            MTIMER3->CCER = (u16)0x0031; // Capture on both edges, enable channel 1
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MTIMER3_init+0x8c>)
 8000772:	2231      	movs	r2, #49	; 0x31
 8000774:	621a      	str	r2, [r3, #32]
            break;
 8000776:	bf00      	nop
    }

    MTIMER3->EGR |= (1 << EGR_UG); // Force update event to load prescaler
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MTIMER3_init+0x8c>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <MTIMER3_init+0x8c>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6153      	str	r3, [r2, #20]
    MTIMER3->CR1 |= (1 << CR1_CEN); // Enable timer
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <MTIMER3_init+0x8c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <MTIMER3_init+0x8c>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40000400 	.word	0x40000400

0800079c <main>:
#include "main.h"



/* Main Function */
int main(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af02      	add	r7, sp, #8
    SystemInit();
 80007a2:	f000 f835 	bl	8000810 <SystemInit>

    // Create Queue and Semaphore
    canQueue = xQueueCreate(5, sizeof(SensorData_t));
 80007a6:	2200      	movs	r2, #0
 80007a8:	210a      	movs	r1, #10
 80007aa:	2005      	movs	r0, #5
 80007ac:	f000 fa06 	bl	8000bbc <xQueueGenericCreate>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <main+0x5c>)
 80007b4:	6013      	str	r3, [r2, #0]
    canSemaphore = xSemaphoreCreateBinary();
 80007b6:	2203      	movs	r2, #3
 80007b8:	2100      	movs	r1, #0
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f9fe 	bl	8000bbc <xQueueGenericCreate>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <main+0x60>)
 80007c4:	6013      	str	r3, [r2, #0]

    // Create FreeRTOS tasks
    xTaskCreate(SensorReadTask, "SensorRead", 256, NULL, 2, NULL);
 80007c6:	2300      	movs	r3, #0
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2302      	movs	r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d4:	490a      	ldr	r1, [pc, #40]	; (8000800 <main+0x64>)
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <main+0x68>)
 80007d8:	f000 fee8 	bl	80015ac <xTaskCreate>
    xTaskCreate(CANSendTask, "CANSend", 256, NULL, 1, NULL);
 80007dc:	2300      	movs	r3, #0
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2301      	movs	r3, #1
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2300      	movs	r3, #0
 80007e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ea:	4907      	ldr	r1, [pc, #28]	; (8000808 <main+0x6c>)
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <main+0x70>)
 80007ee:	f000 fedd 	bl	80015ac <xTaskCreate>

    // Start scheduler
    vTaskStartScheduler();
 80007f2:	f001 f879 	bl	80018e8 <vTaskStartScheduler>

    while (1) {}  // Should never reach here
 80007f6:	e7fe      	b.n	80007f6 <main+0x5a>
 80007f8:	20000024 	.word	0x20000024
 80007fc:	20000028 	.word	0x20000028
 8000800:	08003560 	.word	0x08003560
 8000804:	08000859 	.word	0x08000859
 8000808:	0800356c 	.word	0x0800356c
 800080c:	080008a5 	.word	0x080008a5

08000810 <SystemInit>:
}

/* System Initialization */
void SystemInit(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    MRCC_VidInit();
 8000814:	f7ff fede 	bl	80005d4 <MRCC_VidInit>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOA_RCC);
 8000818:	2102      	movs	r1, #2
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff0e 	bl	800063c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOB_RCC);
 8000820:	2103      	movs	r1, #3
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff ff0a 	bl	800063c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, AFIO_RCC);
 8000828:	2100      	movs	r1, #0
 800082a:	2002      	movs	r0, #2
 800082c:	f7ff ff06 	bl	800063c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, ADC1_RCC);
 8000830:	2109      	movs	r1, #9
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff02 	bl	800063c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, ADC2_RCC);
 8000838:	210a      	movs	r1, #10
 800083a:	2002      	movs	r0, #2
 800083c:	f7ff fefe 	bl	800063c <MRCC_VidEnablePeripheralClock>

    MTIMER2_init(delay_us);
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff ff3d 	bl	80006c0 <MTIMER2_init>
    MTIMER3_init(PWM_channel_1_IN);
 8000846:	2004      	movs	r0, #4
 8000848:	f7ff ff60 	bl	800070c <MTIMER3_init>
    CAN_voidInit();
 800084c:	f7ff fc90 	bl	8000170 <CAN_voidInit>
    CAN_voidStart();
 8000850:	f7ff fd9a 	bl	8000388 <CAN_voidStart>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <SensorReadTask>:

/* Sensor Reading Task */
void SensorReadTask(void *pvParameters) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    SensorData_t sensorData;
    while (1) {
        // Read LDR sensors
        sensorData.LEFT_LDR =  1 ; //(uint8_t)((LDR_f32ReadLightIntensity(1) / LDR_VREF) * 255.0f);
 8000860:	2301      	movs	r3, #1
 8000862:	81bb      	strh	r3, [r7, #12]
        sensorData.RIGTH_LDR = 2 ;  //(uint8_t)((LDR_f32ReadLightIntensity(2) / LDR_VREF) * 255.0f);
 8000864:	2302      	movs	r3, #2
 8000866:	81fb      	strh	r3, [r7, #14]

        // Read IR sensors
        sensorData.LEFT_IR =  3 ;    //Left_IR_Measurement();
 8000868:	2303      	movs	r3, #3
 800086a:	823b      	strh	r3, [r7, #16]
        sensorData.RIGTH_IR =  4 ; //Right_IR_Measurment();
 800086c:	2304      	movs	r3, #4
 800086e:	827b      	strh	r3, [r7, #18]

        // Trigger and Read Ultrasonic Sensor
      //  HULTRA_Trig(GPIOA, PIN6);
     //   vTaskDelay(pdMS_TO_TICKS(10));
        sensorData.ultrasonic =   5 ;  // (uint8_t)HULTRA_Distance(MTIMER3_CH2_PORTA_7);
 8000870:	2305      	movs	r3, #5
 8000872:	82bb      	strh	r3, [r7, #20]

        // Send data to Queue
        if (xQueueSend(canQueue, &sensorData, portMAX_DELAY) != pdTRUE) {
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <SensorReadTask+0x44>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f107 010c 	add.w	r1, r7, #12
 800087c:	2300      	movs	r3, #0
 800087e:	f04f 32ff 	mov.w	r2, #4294967295
 8000882:	f000 fa0d 	bl	8000ca0 <xQueueGenericSend>
        }

        // Toggle GPIO for debugging

        // Signal CANSendTask to transmit
        xSemaphoreGive(canSemaphore);
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SensorReadTask+0x48>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	f000 fa06 	bl	8000ca0 <xQueueGenericSend>

        // Optimized Delay
        vTaskDelay(pdMS_TO_TICKS(250));  // Adjusted for responsiveness
 8000894:	20fa      	movs	r0, #250	; 0xfa
 8000896:	f000 fff3 	bl	8001880 <vTaskDelay>
        sensorData.LEFT_LDR =  1 ; //(uint8_t)((LDR_f32ReadLightIntensity(1) / LDR_VREF) * 255.0f);
 800089a:	e7e1      	b.n	8000860 <SensorReadTask+0x8>
 800089c:	20000024 	.word	0x20000024
 80008a0:	20000028 	.word	0x20000028

080008a4 <CANSendTask>:
    }
}

/* CAN Transmission Task */
void CANSendTask(void *pvParameters) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08e      	sub	sp, #56	; 0x38
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    SensorData_t sensorData;
    CAN_TxHeaderTypeDef txHeader;
    uint8_t canData[5];

    txHeader.DLC = 5;
 80008ac:	2305      	movs	r3, #5
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    txHeader.IDE = CAN_ID_STD;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    txHeader.StdId = 0x123;
 80008b4:	f240 1323 	movw	r3, #291	; 0x123
 80008b8:	617b      	str	r3, [r7, #20]
    txHeader.RTR = CAN_RTR_DATA;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]

    while (1) {
        // Wait for semaphore signal
        if (xSemaphoreTake(canSemaphore, portMAX_DELAY) == pdTRUE) {
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <CANSendTask+0x84>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f04f 31ff 	mov.w	r1, #4294967295
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fbc8 	bl	800105c <xQueueSemaphoreTake>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d125      	bne.n	800091e <CANSendTask+0x7a>
            // Receive data from Queue
            if (xQueueReceive(canQueue, &sensorData, 0) == pdTRUE) {
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <CANSendTask+0x88>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80008da:	2200      	movs	r2, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fadd 	bl	8000e9c <xQueueReceive>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d11a      	bne.n	800091e <CANSendTask+0x7a>
                // Prepare data for CAN transmission
                canData[0] = sensorData.LEFT_LDR;
 80008e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	733b      	strb	r3, [r7, #12]
                canData[1] = sensorData.RIGTH_LDR;
 80008ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	737b      	strb	r3, [r7, #13]
                canData[2] = sensorData.LEFT_IR;
 80008f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	73bb      	strb	r3, [r7, #14]
                canData[3] = sensorData.RIGTH_IR;
 80008fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	73fb      	strb	r3, [r7, #15]
                canData[4] = sensorData.ultrasonic;
 8000900:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000902:	b2db      	uxtb	r3, r3
 8000904:	743b      	strb	r3, [r7, #16]
                MGPIO_VidTogglePin(GPIOA, PIN10);
 8000906:	210a      	movs	r1, #10
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fe25 	bl	8000558 <MGPIO_VidTogglePin>

                // Transmit data via CAN
                if (CAN_voidAddTxMsg(&txHeader, canData) != 0) {
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fc8b 	bl	8000234 <CAN_voidAddTxMsg>
                }
            }
        }

        // Shorter delay for better responsiveness
        vTaskDelay(pdMS_TO_TICKS(5));
 800091e:	2005      	movs	r0, #5
 8000920:	f000 ffae 	bl	8001880 <vTaskDelay>
        if (xSemaphoreTake(canSemaphore, portMAX_DELAY) == pdTRUE) {
 8000924:	e7cb      	b.n	80008be <CANSendTask+0x1a>
 8000926:	bf00      	nop
 8000928:	20000028 	.word	0x20000028
 800092c:	20000024 	.word	0x20000024

08000930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000932:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000934:	f7ff ff6c 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095e:	f002 fdb9 	bl	80034d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff ff1b 	bl	800079c <main>

08000966 <LoopForever>:

LoopForever:
  b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   r0, =_estack
 8000968:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000974:	08003594 	.word	0x08003594
  ldr r2, =_sbss
 8000978:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800097c:	200021d0 	.word	0x200021d0

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>

08000982 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f103 0208 	add.w	r2, r3, #8
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f04f 32ff 	mov.w	r2, #4294967295
 800099a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f103 0208 	add.w	r2, r3, #8
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f103 0208 	add.w	r2, r3, #8
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ee:	d103      	bne.n	80009f8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e00c      	b.n	8000a12 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3308      	adds	r3, #8
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e002      	b.n	8000a06 <vListInsert+0x2e>
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d2f6      	bcs.n	8000a00 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6892      	ldr	r2, [r2, #8]
 8000a5e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	6852      	ldr	r2, [r2, #4]
 8000a68:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d103      	bne.n	8000a7c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
	...

08000a9c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10a      	bne.n	8000aca <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab8:	f383 8811 	msr	BASEPRI, r3
 8000abc:	f3bf 8f6f 	isb	sy
 8000ac0:	f3bf 8f4f 	dsb	sy
 8000ac4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000ac6:	bf00      	nop
 8000ac8:	e7fe      	b.n	8000ac8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d05d      	beq.n	8000b8c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d059      	beq.n	8000b8c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <xQueueGenericReset+0x50>
 8000aea:	2101      	movs	r1, #1
 8000aec:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14c      	bne.n	8000b8c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000af2:	f002 fa6d 	bl	8002fd0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afe:	6939      	ldr	r1, [r7, #16]
 8000b00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b02:	fb01 f303 	mul.w	r3, r1, r3
 8000b06:	441a      	add	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6939      	ldr	r1, [r7, #16]
 8000b26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b28:	fb01 f303 	mul.w	r3, r1, r3
 8000b2c:	441a      	add	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d114      	bne.n	8000b72 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d01a      	beq.n	8000b86 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	3310      	adds	r3, #16
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fa0b 	bl	8001f70 <xTaskRemoveFromEventList>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d012      	beq.n	8000b86 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <xQueueGenericReset+0x11c>)
 8000b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	f3bf 8f6f 	isb	sy
 8000b70:	e009      	b.n	8000b86 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	3310      	adds	r3, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff03 	bl	8000982 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	3324      	adds	r3, #36	; 0x24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fefe 	bl	8000982 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000b86:	f002 fa53 	bl	8003030 <vPortExitCritical>
 8000b8a:	e001      	b.n	8000b90 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10a      	bne.n	8000bac <xQueueGenericReset+0x110>
        __asm volatile
 8000b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9a:	f383 8811 	msr	BASEPRI, r3
 8000b9e:	f3bf 8f6f 	isb	sy
 8000ba2:	f3bf 8f4f 	dsb	sy
 8000ba6:	60bb      	str	r3, [r7, #8]
    }
 8000ba8:	bf00      	nop
 8000baa:	e7fe      	b.n	8000baa <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000bac:	697b      	ldr	r3, [r7, #20]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000ed04 	.word	0xe000ed04

08000bbc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d02e      	beq.n	8000c32 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	fba3 2302 	umull	r2, r3, r3, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d000      	beq.n	8000be4 <xQueueGenericCreate+0x28>
 8000be2:	2101      	movs	r1, #1
 8000be4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d123      	bne.n	8000c32 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000bf2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000bf6:	d81c      	bhi.n	8000c32 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	3350      	adds	r3, #80	; 0x50
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fa9a 	bl	8003140 <pvPortMalloc>
 8000c0c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d01c      	beq.n	8000c4e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3350      	adds	r3, #80	; 0x50
 8000c1c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	4613      	mov	r3, r2
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f000 f814 	bl	8000c58 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000c30:	e00d      	b.n	8000c4e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10a      	bne.n	8000c4e <xQueueGenericCreate+0x92>
        __asm volatile
 8000c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3c:	f383 8811 	msr	BASEPRI, r3
 8000c40:	f3bf 8f6f 	isb	sy
 8000c44:	f3bf 8f4f 	dsb	sy
 8000c48:	613b      	str	r3, [r7, #16]
    }
 8000c4a:	bf00      	nop
 8000c4c:	e7fe      	b.n	8000c4c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
    }
 8000c50:	4618      	mov	r0, r3
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e002      	b.n	8000c7a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c86:	2101      	movs	r1, #1
 8000c88:	69b8      	ldr	r0, [r7, #24]
 8000c8a:	f7ff ff07 	bl	8000a9c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	78fa      	ldrb	r2, [r7, #3]
 8000c92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <xQueueGenericSend+0x32>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000cce:	bf00      	nop
 8000cd0:	e7fe      	b.n	8000cd0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <xQueueGenericSend+0x40>
 8000cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <xQueueGenericSend+0x44>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <xQueueGenericSend+0x46>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10a      	bne.n	8000d00 <xQueueGenericSend+0x60>
        __asm volatile
 8000cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cee:	f383 8811 	msr	BASEPRI, r3
 8000cf2:	f3bf 8f6f 	isb	sy
 8000cf6:	f3bf 8f4f 	dsb	sy
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000cfc:	bf00      	nop
 8000cfe:	e7fe      	b.n	8000cfe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d103      	bne.n	8000d0e <xQueueGenericSend+0x6e>
 8000d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <xQueueGenericSend+0x72>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <xQueueGenericSend+0x74>
 8000d12:	2300      	movs	r3, #0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10a      	bne.n	8000d2e <xQueueGenericSend+0x8e>
        __asm volatile
 8000d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1c:	f383 8811 	msr	BASEPRI, r3
 8000d20:	f3bf 8f6f 	isb	sy
 8000d24:	f3bf 8f4f 	dsb	sy
 8000d28:	623b      	str	r3, [r7, #32]
    }
 8000d2a:	bf00      	nop
 8000d2c:	e7fe      	b.n	8000d2c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d2e:	f001 fb2d 	bl	800238c <xTaskGetSchedulerState>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <xQueueGenericSend+0x9e>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <xQueueGenericSend+0xa2>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <xQueueGenericSend+0xa4>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <xQueueGenericSend+0xbe>
        __asm volatile
 8000d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4c:	f383 8811 	msr	BASEPRI, r3
 8000d50:	f3bf 8f6f 	isb	sy
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	61fb      	str	r3, [r7, #28]
    }
 8000d5a:	bf00      	nop
 8000d5c:	e7fe      	b.n	8000d5c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d5e:	f002 f937 	bl	8002fd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d302      	bcc.n	8000d74 <xQueueGenericSend+0xd4>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d129      	bne.n	8000dc8 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7a:	f000 fa84 	bl	8001286 <prvCopyDataToQueue>
 8000d7e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d010      	beq.n	8000daa <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	3324      	adds	r3, #36	; 0x24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f8ef 	bl	8001f70 <xTaskRemoveFromEventList>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d013      	beq.n	8000dc0 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000d98:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <xQueueGenericSend+0x1f8>)
 8000d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	e00a      	b.n	8000dc0 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d007      	beq.n	8000dc0 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000db0:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <xQueueGenericSend+0x1f8>)
 8000db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000dc0:	f002 f936 	bl	8003030 <vPortExitCritical>
                return pdPASS;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e063      	b.n	8000e90 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000dce:	f002 f92f 	bl	8003030 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e05c      	b.n	8000e90 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 f99b 	bl	800211c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dea:	f002 f921 	bl	8003030 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dee:	f000 fdcd 	bl	800198c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000df2:	f002 f8ed 	bl	8002fd0 <vPortEnterCritical>
 8000df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e02:	d103      	bne.n	8000e0c <xQueueGenericSend+0x16c>
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d103      	bne.n	8000e22 <xQueueGenericSend+0x182>
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e22:	f002 f905 	bl	8003030 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e26:	1d3a      	adds	r2, r7, #4
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f98a 	bl	8002148 <xTaskCheckForTimeOut>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d124      	bne.n	8000e84 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e3c:	f000 fb1b 	bl	8001476 <prvIsQueueFull>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d018      	beq.n	8000e78 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e48:	3310      	adds	r3, #16
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 f824 	bl	8001e9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e56:	f000 faa6 	bl	80013a6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000e5a:	f000 fda5 	bl	80019a8 <xTaskResumeAll>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f47f af7c 	bne.w	8000d5e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <xQueueGenericSend+0x1f8>)
 8000e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	f3bf 8f6f 	isb	sy
 8000e76:	e772      	b.n	8000d5e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7a:	f000 fa94 	bl	80013a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e7e:	f000 fd93 	bl	80019a8 <xTaskResumeAll>
 8000e82:	e76c      	b.n	8000d5e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e86:	f000 fa8e 	bl	80013a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e8a:	f000 fd8d 	bl	80019a8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000e8e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3738      	adds	r7, #56	; 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	e000ed04 	.word	0xe000ed04

08000e9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10a      	bne.n	8000ecc <xQueueReceive+0x30>
        __asm volatile
 8000eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eba:	f383 8811 	msr	BASEPRI, r3
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	f3bf 8f4f 	dsb	sy
 8000ec6:	623b      	str	r3, [r7, #32]
    }
 8000ec8:	bf00      	nop
 8000eca:	e7fe      	b.n	8000eca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueReceive+0x3e>
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueReceive+0x42>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueReceive+0x44>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10a      	bne.n	8000efa <xQueueReceive+0x5e>
        __asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	61fb      	str	r3, [r7, #28]
    }
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000efa:	f001 fa47 	bl	800238c <xTaskGetSchedulerState>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <xQueueReceive+0x6e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <xQueueReceive+0x72>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <xQueueReceive+0x74>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10a      	bne.n	8000f2a <xQueueReceive+0x8e>
        __asm volatile
 8000f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f18:	f383 8811 	msr	BASEPRI, r3
 8000f1c:	f3bf 8f6f 	isb	sy
 8000f20:	f3bf 8f4f 	dsb	sy
 8000f24:	61bb      	str	r3, [r7, #24]
    }
 8000f26:	bf00      	nop
 8000f28:	e7fe      	b.n	8000f28 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f2a:	f002 f851 	bl	8002fd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d01f      	beq.n	8000f7a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f3e:	f000 fa0c 	bl	800135a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	1e5a      	subs	r2, r3, #1
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00f      	beq.n	8000f72 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	3310      	adds	r3, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f80a 	bl	8001f70 <xTaskRemoveFromEventList>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d007      	beq.n	8000f72 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f62:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <xQueueReceive+0x1bc>)
 8000f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f72:	f002 f85d 	bl	8003030 <vPortExitCritical>
                return pdPASS;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e069      	b.n	800104e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000f80:	f002 f856 	bl	8003030 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e062      	b.n	800104e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 f8c2 	bl	800211c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000f9c:	f002 f848 	bl	8003030 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000fa0:	f000 fcf4 	bl	800198c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000fa4:	f002 f814 	bl	8002fd0 <vPortEnterCritical>
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d103      	bne.n	8000fbe <xQueueReceive+0x122>
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fca:	d103      	bne.n	8000fd4 <xQueueReceive+0x138>
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000fd4:	f002 f82c 	bl	8003030 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000fd8:	1d3a      	adds	r2, r7, #4
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f8b1 	bl	8002148 <xTaskCheckForTimeOut>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d123      	bne.n	8001034 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fee:	f000 fa2c 	bl	800144a <prvIsQueueEmpty>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d017      	beq.n	8001028 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	3324      	adds	r3, #36	; 0x24
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f000 ff4b 	bl	8001e9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001008:	f000 f9cd 	bl	80013a6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800100c:	f000 fccc 	bl	80019a8 <xTaskResumeAll>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d189      	bne.n	8000f2a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <xQueueReceive+0x1bc>)
 8001018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	f3bf 8f4f 	dsb	sy
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	e780      	b.n	8000f2a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800102a:	f000 f9bc 	bl	80013a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800102e:	f000 fcbb 	bl	80019a8 <xTaskResumeAll>
 8001032:	e77a      	b.n	8000f2a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001036:	f000 f9b6 	bl	80013a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800103a:	f000 fcb5 	bl	80019a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800103e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001040:	f000 fa03 	bl	800144a <prvIsQueueEmpty>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	f43f af6f 	beq.w	8000f2a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800104c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800104e:	4618      	mov	r0, r3
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000ed04 	.word	0xe000ed04

0800105c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10a      	bne.n	800108e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	61bb      	str	r3, [r7, #24]
    }
 800108a:	bf00      	nop
 800108c:	e7fe      	b.n	800108c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00a      	beq.n	80010ac <xQueueSemaphoreTake+0x50>
        __asm volatile
 8001096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800109a:	f383 8811 	msr	BASEPRI, r3
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f3bf 8f4f 	dsb	sy
 80010a6:	617b      	str	r3, [r7, #20]
    }
 80010a8:	bf00      	nop
 80010aa:	e7fe      	b.n	80010aa <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010ac:	f001 f96e 	bl	800238c <xTaskGetSchedulerState>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <xQueueSemaphoreTake+0x60>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <xQueueSemaphoreTake+0x64>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <xQueueSemaphoreTake+0x66>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10a      	bne.n	80010dc <xQueueSemaphoreTake+0x80>
        __asm volatile
 80010c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ca:	f383 8811 	msr	BASEPRI, r3
 80010ce:	f3bf 8f6f 	isb	sy
 80010d2:	f3bf 8f4f 	dsb	sy
 80010d6:	613b      	str	r3, [r7, #16]
    }
 80010d8:	bf00      	nop
 80010da:	e7fe      	b.n	80010da <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80010dc:	f001 ff78 	bl	8002fd0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e4:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d024      	beq.n	8001136 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	1e5a      	subs	r2, r3, #1
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80010fc:	f001 fb5e 	bl	80027bc <pvTaskIncrementMutexHeldCount>
 8001100:	4602      	mov	r2, r0
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00f      	beq.n	800112e <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	3310      	adds	r3, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ff2c 	bl	8001f70 <xTaskRemoveFromEventList>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <xQueueSemaphoreTake+0x1f8>)
 8001120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	f3bf 8f4f 	dsb	sy
 800112a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800112e:	f001 ff7f 	bl	8003030 <vPortExitCritical>
                return pdPASS;
 8001132:	2301      	movs	r3, #1
 8001134:	e089      	b.n	800124a <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800113c:	f001 ff78 	bl	8003030 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001140:	2300      	movs	r3, #0
 8001142:	e082      	b.n	800124a <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4618      	mov	r0, r3
 8001150:	f000 ffe4 	bl	800211c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001158:	f001 ff6a 	bl	8003030 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800115c:	f000 fc16 	bl	800198c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001160:	f001 ff36 	bl	8002fd0 <vPortEnterCritical>
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800116a:	b25b      	sxtb	r3, r3
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d103      	bne.n	800117a <xQueueSemaphoreTake+0x11e>
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001180:	b25b      	sxtb	r3, r3
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001186:	d103      	bne.n	8001190 <xQueueSemaphoreTake+0x134>
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001190:	f001 ff4e 	bl	8003030 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001194:	463a      	mov	r2, r7
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f000 ffd3 	bl	8002148 <xTaskCheckForTimeOut>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d132      	bne.n	800120e <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011aa:	f000 f94e 	bl	800144a <prvIsQueueEmpty>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d026      	beq.n	8001202 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80011bc:	f001 ff08 	bl	8002fd0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 f8ff 	bl	80023c8 <xTaskPriorityInherit>
 80011ca:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80011cc:	f001 ff30 	bl	8003030 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	3324      	adds	r3, #36	; 0x24
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fe5f 	bl	8001e9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80011de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011e0:	f000 f8e1 	bl	80013a6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80011e4:	f000 fbe0 	bl	80019a8 <xTaskResumeAll>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f47f af76 	bne.w	80010dc <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <xQueueSemaphoreTake+0x1f8>)
 80011f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	f3bf 8f6f 	isb	sy
 8001200:	e76c      	b.n	80010dc <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001204:	f000 f8cf 	bl	80013a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001208:	f000 fbce 	bl	80019a8 <xTaskResumeAll>
 800120c:	e766      	b.n	80010dc <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800120e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001210:	f000 f8c9 	bl	80013a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001214:	f000 fbc8 	bl	80019a8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800121a:	f000 f916 	bl	800144a <prvIsQueueEmpty>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	f43f af5b 	beq.w	80010dc <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00d      	beq.n	8001248 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 800122c:	f001 fed0 	bl	8002fd0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001232:	f000 f811 	bl	8001258 <prvGetDisinheritPriorityAfterTimeout>
 8001236:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	69f9      	ldr	r1, [r7, #28]
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fa04 	bl	800264c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8001244:	f001 fef4 	bl	8003030 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001248:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800124a:	4618      	mov	r0, r3
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000ed04 	.word	0xe000ed04

08001258 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f1c3 0305 	rsb	r3, r3, #5
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e001      	b.n	800127a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800127a:	68fb      	ldr	r3, [r7, #12]
    }
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10d      	bne.n	80012c0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d14d      	bne.n	8001348 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f927 	bl	8002504 <xTaskPriorityDisinherit>
 80012b6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	e043      	b.n	8001348 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d119      	bne.n	80012fa <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6858      	ldr	r0, [r3, #4]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	461a      	mov	r2, r3
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	f002 f923 	bl	800351c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	441a      	add	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d32b      	bcc.n	8001348 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	e026      	b.n	8001348 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68d8      	ldr	r0, [r3, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	461a      	mov	r2, r3
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	f002 f909 	bl	800351c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	425b      	negs	r3, r3
 8001314:	441a      	add	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d207      	bcs.n	8001336 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	425b      	negs	r3, r3
 8001330:	441a      	add	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d105      	bne.n	8001348 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	3b01      	subs	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001350:	697b      	ldr	r3, [r7, #20]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d018      	beq.n	800139e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	441a      	add	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	429a      	cmp	r2, r3
 8001384:	d303      	bcc.n	800138e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68d9      	ldr	r1, [r3, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	461a      	mov	r2, r3
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f002 f8bf 	bl	800351c <memcpy>
    }
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80013ae:	f001 fe0f 	bl	8002fd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013b8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013ba:	e011      	b.n	80013e0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d012      	beq.n	80013ea <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3324      	adds	r3, #36	; 0x24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fdd1 	bl	8001f70 <xTaskRemoveFromEventList>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80013d4:	f000 ff1e 	bl	8002214 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3b01      	subs	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dce9      	bgt.n	80013bc <prvUnlockQueue+0x16>
 80013e8:	e000      	b.n	80013ec <prvUnlockQueue+0x46>
                    break;
 80013ea:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80013f4:	f001 fe1c 	bl	8003030 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80013f8:	f001 fdea 	bl	8002fd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001402:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001404:	e011      	b.n	800142a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3310      	adds	r3, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fdac 	bl	8001f70 <xTaskRemoveFromEventList>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800141e:	f000 fef9 	bl	8002214 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	3b01      	subs	r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800142a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dce9      	bgt.n	8001406 <prvUnlockQueue+0x60>
 8001432:	e000      	b.n	8001436 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001434:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	22ff      	movs	r2, #255	; 0xff
 800143a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800143e:	f001 fdf7 	bl	8003030 <vPortExitCritical>
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001452:	f001 fdbd 	bl	8002fd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e001      	b.n	8001468 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001468:	f001 fde2 	bl	8003030 <vPortExitCritical>

    return xReturn;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800147e:	f001 fda7 	bl	8002fd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	429a      	cmp	r2, r3
 800148c:	d102      	bne.n	8001494 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800148e:	2301      	movs	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e001      	b.n	8001498 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001498:	f001 fdca 	bl	8003030 <vPortExitCritical>

    return xReturn;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10a      	bne.n	80014d2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80014bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c0:	f383 8811 	msr	BASEPRI, r3
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	60fb      	str	r3, [r7, #12]
    }
 80014ce:	bf00      	nop
 80014d0:	e7fe      	b.n	80014d0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d024      	beq.n	8001522 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e01e      	b.n	800151c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <vQueueAddToRegistry+0x98>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d105      	bne.n	80014fa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <vQueueAddToRegistry+0x98>)
 80014f4:	4413      	add	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
                    break;
 80014f8:	e013      	b.n	8001522 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10a      	bne.n	8001516 <vQueueAddToRegistry+0x6e>
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <vQueueAddToRegistry+0x98>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <vQueueAddToRegistry+0x98>)
 8001512:	4413      	add	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b07      	cmp	r3, #7
 8001520:	d9dd      	bls.n	80014de <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000002c 	.word	0x2000002c

08001544 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001554:	f001 fd3c 	bl	8002fd0 <vPortEnterCritical>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800155e:	b25b      	sxtb	r3, r3
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d103      	bne.n	800156e <vQueueWaitForMessageRestricted+0x2a>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001574:	b25b      	sxtb	r3, r3
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d103      	bne.n	8001584 <vQueueWaitForMessageRestricted+0x40>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001584:	f001 fd54 	bl	8003030 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3324      	adds	r3, #36	; 0x24
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fca3 	bl	8001ee4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff01 	bl	80013a6 <prvUnlockQueue>
    }
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fdbd 	bl	8003140 <pvPortMalloc>
 80015c6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d013      	beq.n	80015f6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80015ce:	2058      	movs	r0, #88	; 0x58
 80015d0:	f001 fdb6 	bl	8003140 <pvPortMalloc>
 80015d4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80015dc:	2258      	movs	r2, #88	; 0x58
 80015de:	2100      	movs	r1, #0
 80015e0:	69f8      	ldr	r0, [r7, #28]
 80015e2:	f001 ffa9 	bl	8003538 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
 80015ec:	e005      	b.n	80015fa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f001 fe60 	bl	80032b4 <vPortFree>
 80015f4:	e001      	b.n	80015fa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	2300      	movs	r3, #0
 8001604:	9303      	str	r3, [sp, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f80e 	bl	8001638 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800161c:	69f8      	ldr	r0, [r7, #28]
 800161e:	f000 f899 	bl	8001754 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	e002      	b.n	800162e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800162e:	69bb      	ldr	r3, [r7, #24]
    }
 8001630:	4618      	mov	r0, r3
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	461a      	mov	r2, r3
 8001650:	21a5      	movs	r1, #165	; 0xa5
 8001652:	f001 ff71 	bl	8003538 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001660:	3b01      	subs	r3, #1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00a      	beq.n	8001690 <prvInitialiseNewTask+0x58>
        __asm volatile
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	617b      	str	r3, [r7, #20]
    }
 800168c:	bf00      	nop
 800168e:	e7fe      	b.n	800168e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01e      	beq.n	80016d4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e012      	b.n	80016c2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	7819      	ldrb	r1, [r3, #0]
 80016a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	3334      	adds	r3, #52	; 0x34
 80016ac:	460a      	mov	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d9e9      	bls.n	800169c <prvInitialiseNewTask+0x64>
 80016c8:	e000      	b.n	80016cc <prvInitialiseNewTask+0x94>
            {
                break;
 80016ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d90a      	bls.n	80016f0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80016da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016de:	f383 8811 	msr	BASEPRI, r3
 80016e2:	f3bf 8f6f 	isb	sy
 80016e6:	f3bf 8f4f 	dsb	sy
 80016ea:	613b      	str	r3, [r7, #16]
    }
 80016ec:	bf00      	nop
 80016ee:	e7fe      	b.n	80016ee <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d901      	bls.n	80016fa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016f6:	2304      	movs	r3, #4
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80016fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001704:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	3304      	adds	r3, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f958 	bl	80009c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	3318      	adds	r3, #24
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f953 	bl	80009c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800171e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	f1c3 0205 	rsb	r2, r3, #5
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	69b8      	ldr	r0, [r7, #24]
 8001736:	f001 fb57 	bl	8002de8 <pxPortInitialiseStack>
 800173a:	4602      	mov	r2, r0
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800174a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800175c:	f001 fc38 	bl	8002fd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001760:	4b40      	ldr	r3, [pc, #256]	; (8001864 <prvAddNewTaskToReadyList+0x110>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a3f      	ldr	r2, [pc, #252]	; (8001864 <prvAddNewTaskToReadyList+0x110>)
 8001768:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800176a:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <prvAddNewTaskToReadyList+0x114>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001772:	4a3d      	ldr	r2, [pc, #244]	; (8001868 <prvAddNewTaskToReadyList+0x114>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001778:	4b3a      	ldr	r3, [pc, #232]	; (8001864 <prvAddNewTaskToReadyList+0x110>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d110      	bne.n	80017a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001780:	f000 fd6c 	bl	800225c <prvInitialiseTaskLists>
 8001784:	e00d      	b.n	80017a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <prvAddNewTaskToReadyList+0x118>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <prvAddNewTaskToReadyList+0x114>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	429a      	cmp	r2, r3
 800179a:	d802      	bhi.n	80017a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800179c:	4a32      	ldr	r2, [pc, #200]	; (8001868 <prvAddNewTaskToReadyList+0x114>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <prvAddNewTaskToReadyList+0x11c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a31      	ldr	r2, [pc, #196]	; (8001870 <prvAddNewTaskToReadyList+0x11c>)
 80017aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <prvAddNewTaskToReadyList+0x11c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <prvAddNewTaskToReadyList+0x120>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <prvAddNewTaskToReadyList+0x120>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	492b      	ldr	r1, [pc, #172]	; (8001878 <prvAddNewTaskToReadyList+0x124>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	3204      	adds	r2, #4
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	1d1a      	adds	r2, r3, #4
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <prvAddNewTaskToReadyList+0x124>)
 800180a:	441a      	add	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001814:	4918      	ldr	r1, [pc, #96]	; (8001878 <prvAddNewTaskToReadyList+0x124>)
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	4814      	ldr	r0, [pc, #80]	; (8001878 <prvAddNewTaskToReadyList+0x124>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001832:	f001 fbfd 	bl	8003030 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <prvAddNewTaskToReadyList+0x118>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00e      	beq.n	800185c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <prvAddNewTaskToReadyList+0x114>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <prvAddNewTaskToReadyList+0x128>)
 800184e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000144 	.word	0x20000144
 8001868:	2000006c 	.word	0x2000006c
 800186c:	20000150 	.word	0x20000150
 8001870:	20000160 	.word	0x20000160
 8001874:	2000014c 	.word	0x2000014c
 8001878:	20000070 	.word	0x20000070
 800187c:	e000ed04 	.word	0xe000ed04

08001880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d017      	beq.n	80018c2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <vTaskDelay+0x60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <vTaskDelay+0x30>
        __asm volatile
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	60bb      	str	r3, [r7, #8]
    }
 80018ac:	bf00      	nop
 80018ae:	e7fe      	b.n	80018ae <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80018b0:	f000 f86c 	bl	800198c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 ff94 	bl	80027e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80018bc:	f000 f874 	bl	80019a8 <xTaskResumeAll>
 80018c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <vTaskDelay+0x64>)
 80018ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f3bf 8f4f 	dsb	sy
 80018d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000016c 	.word	0x2000016c
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <vTaskStartScheduler+0x88>)
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2300      	movs	r3, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	2282      	movs	r2, #130	; 0x82
 80018fa:	491e      	ldr	r1, [pc, #120]	; (8001974 <vTaskStartScheduler+0x8c>)
 80018fc:	481e      	ldr	r0, [pc, #120]	; (8001978 <vTaskStartScheduler+0x90>)
 80018fe:	f7ff fe55 	bl	80015ac <xTaskCreate>
 8001902:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d102      	bne.n	8001910 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800190a:	f000 ffeb 	bl	80028e4 <xTimerCreateTimerTask>
 800190e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d116      	bne.n	8001944 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191a:	f383 8811 	msr	BASEPRI, r3
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f3bf 8f4f 	dsb	sy
 8001926:	60bb      	str	r3, [r7, #8]
    }
 8001928:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <vTaskStartScheduler+0x94>)
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <vTaskStartScheduler+0x98>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <vTaskStartScheduler+0x9c>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800193e:	f001 fad5 	bl	8002eec <xPortStartScheduler>
 8001942:	e00e      	b.n	8001962 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	d10a      	bne.n	8001962 <vTaskStartScheduler+0x7a>
        __asm volatile
 800194c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001950:	f383 8811 	msr	BASEPRI, r3
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	607b      	str	r3, [r7, #4]
    }
 800195e:	bf00      	nop
 8001960:	e7fe      	b.n	8001960 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <vTaskStartScheduler+0xa0>)
 8001964:	681b      	ldr	r3, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000168 	.word	0x20000168
 8001974:	08003574 	.word	0x08003574
 8001978:	0800222d 	.word	0x0800222d
 800197c:	20000164 	.word	0x20000164
 8001980:	20000150 	.word	0x20000150
 8001984:	20000148 	.word	0x20000148
 8001988:	20000000 	.word	0x20000000

0800198c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <vTaskSuspendAll+0x18>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <vTaskSuspendAll+0x18>)
 8001998:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000016c 	.word	0x2000016c

080019a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80019b6:	4b71      	ldr	r3, [pc, #452]	; (8001b7c <xTaskResumeAll+0x1d4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10a      	bne.n	80019d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	607b      	str	r3, [r7, #4]
    }
 80019d0:	bf00      	nop
 80019d2:	e7fe      	b.n	80019d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80019d4:	f001 fafc 	bl	8002fd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <xTaskResumeAll+0x1d4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a67      	ldr	r2, [pc, #412]	; (8001b7c <xTaskResumeAll+0x1d4>)
 80019e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <xTaskResumeAll+0x1d4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 80c0 	bne.w	8001b6c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <xTaskResumeAll+0x1d8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80bb 	beq.w	8001b6c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019f6:	e08a      	b.n	8001b0e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <xTaskResumeAll+0x1dc>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	6a12      	ldr	r2, [r2, #32]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	69d2      	ldr	r2, [r2, #28]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3318      	adds	r3, #24
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d103      	bne.n	8001a2e <xTaskResumeAll+0x86>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	68d2      	ldr	r2, [r2, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	6892      	ldr	r2, [r2, #8]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d103      	bne.n	8001a6c <xTaskResumeAll+0xc4>
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2201      	movs	r2, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <xTaskResumeAll+0x1e0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	4a3f      	ldr	r2, [pc, #252]	; (8001b88 <xTaskResumeAll+0x1e0>)
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	493e      	ldr	r1, [pc, #248]	; (8001b8c <xTaskResumeAll+0x1e4>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	3204      	adds	r2, #4
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <xTaskResumeAll+0x1e4>)
 8001ad2:	441a      	add	r2, r3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	492b      	ldr	r1, [pc, #172]	; (8001b8c <xTaskResumeAll+0x1e4>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	1c59      	adds	r1, r3, #1
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <xTaskResumeAll+0x1e4>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4403      	add	r3, r0
 8001af8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <xTaskResumeAll+0x1e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d302      	bcc.n	8001b0e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <xTaskResumeAll+0x1ec>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <xTaskResumeAll+0x1dc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f47f af70 	bne.w	80019f8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001b1e:	f000 fc1b 	bl	8002358 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <xTaskResumeAll+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d010      	beq.n	8001b50 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001b2e:	f000 f845 	bl	8001bbc <xTaskIncrementTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <xTaskResumeAll+0x1ec>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f1      	bne.n	8001b2e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <xTaskResumeAll+0x1f0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <xTaskResumeAll+0x1ec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <xTaskResumeAll+0x1f4>)
 8001b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001b6c:	f001 fa60 	bl	8003030 <vPortExitCritical>

    return xAlreadyYielded;
 8001b70:	69bb      	ldr	r3, [r7, #24]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000016c 	.word	0x2000016c
 8001b80:	20000144 	.word	0x20000144
 8001b84:	20000104 	.word	0x20000104
 8001b88:	2000014c 	.word	0x2000014c
 8001b8c:	20000070 	.word	0x20000070
 8001b90:	2000006c 	.word	0x2000006c
 8001b94:	20000158 	.word	0x20000158
 8001b98:	20000154 	.word	0x20000154
 8001b9c:	e000ed04 	.word	0xe000ed04

08001ba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <xTaskGetTickCount+0x18>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000148 	.word	0x20000148

08001bbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bc6:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <xTaskIncrementTick+0x200>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 80ec 	bne.w	8001da8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bd0:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <xTaskIncrementTick+0x204>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001bd8:	4a79      	ldr	r2, [pc, #484]	; (8001dc0 <xTaskIncrementTick+0x204>)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d120      	bne.n	8001c26 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001be4:	4b77      	ldr	r3, [pc, #476]	; (8001dc4 <xTaskIncrementTick+0x208>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <xTaskIncrementTick+0x48>
        __asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	607b      	str	r3, [r7, #4]
    }
 8001c00:	bf00      	nop
 8001c02:	e7fe      	b.n	8001c02 <xTaskIncrementTick+0x46>
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <xTaskIncrementTick+0x208>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <xTaskIncrementTick+0x20c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6d      	ldr	r2, [pc, #436]	; (8001dc4 <xTaskIncrementTick+0x208>)
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4a6d      	ldr	r2, [pc, #436]	; (8001dc8 <xTaskIncrementTick+0x20c>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <xTaskIncrementTick+0x210>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a6b      	ldr	r2, [pc, #428]	; (8001dcc <xTaskIncrementTick+0x210>)
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	f000 fb99 	bl	8002358 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c26:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <xTaskIncrementTick+0x214>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a3a      	ldr	r2, [r7, #32]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f0c0 80a6 	bcc.w	8001d7e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c32:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <xTaskIncrementTick+0x208>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <xTaskIncrementTick+0x214>)
 8001c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c42:	601a      	str	r2, [r3, #0]
                    break;
 8001c44:	e09b      	b.n	8001d7e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <xTaskIncrementTick+0x208>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001c56:	6a3a      	ldr	r2, [r7, #32]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d203      	bcs.n	8001c66 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c5e:	4a5c      	ldr	r2, [pc, #368]	; (8001dd0 <xTaskIncrementTick+0x214>)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001c64:	e08b      	b.n	8001d7e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	68d2      	ldr	r2, [r2, #12]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	6892      	ldr	r2, [r2, #8]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	3304      	adds	r3, #4
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d103      	bne.n	8001c94 <xTaskIncrementTick+0xd8>
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	1e5a      	subs	r2, r3, #1
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01e      	beq.n	8001cea <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	6a12      	ldr	r2, [r2, #32]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	69d2      	ldr	r2, [r2, #28]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	3318      	adds	r3, #24
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d103      	bne.n	8001cda <xTaskIncrementTick+0x11e>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1e5a      	subs	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <xTaskIncrementTick+0x218>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	4a36      	ldr	r2, [pc, #216]	; (8001dd4 <xTaskIncrementTick+0x218>)
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4935      	ldr	r1, [pc, #212]	; (8001dd8 <xTaskIncrementTick+0x21c>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	3204      	adds	r2, #4
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1d1a      	adds	r2, r3, #4
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <xTaskIncrementTick+0x21c>)
 8001d40:	441a      	add	r2, r3
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	615a      	str	r2, [r3, #20]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	4923      	ldr	r1, [pc, #140]	; (8001dd8 <xTaskIncrementTick+0x21c>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1c59      	adds	r1, r3, #1
 8001d5a:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <xTaskIncrementTick+0x21c>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4403      	add	r3, r0
 8001d66:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <xTaskIncrementTick+0x220>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	429a      	cmp	r2, r3
 8001d74:	f67f af5d 	bls.w	8001c32 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d7c:	e759      	b.n	8001c32 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <xTaskIncrementTick+0x220>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	4914      	ldr	r1, [pc, #80]	; (8001dd8 <xTaskIncrementTick+0x21c>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d901      	bls.n	8001d9a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <xTaskIncrementTick+0x224>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	e004      	b.n	8001db2 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <xTaskIncrementTick+0x228>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <xTaskIncrementTick+0x228>)
 8001db0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000016c 	.word	0x2000016c
 8001dc0:	20000148 	.word	0x20000148
 8001dc4:	200000fc 	.word	0x200000fc
 8001dc8:	20000100 	.word	0x20000100
 8001dcc:	2000015c 	.word	0x2000015c
 8001dd0:	20000164 	.word	0x20000164
 8001dd4:	2000014c 	.word	0x2000014c
 8001dd8:	20000070 	.word	0x20000070
 8001ddc:	2000006c 	.word	0x2000006c
 8001de0:	20000158 	.word	0x20000158
 8001de4:	20000154 	.word	0x20000154

08001de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <vTaskSwitchContext+0xa0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <vTaskSwitchContext+0xa4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001dfc:	e03f      	b.n	8001e7e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <vTaskSwitchContext+0xa4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <vTaskSwitchContext+0xa8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	f1c3 031f 	rsb	r3, r3, #31
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	491e      	ldr	r1, [pc, #120]	; (8001e94 <vTaskSwitchContext+0xac>)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	607b      	str	r3, [r7, #4]
    }
 8001e40:	bf00      	nop
 8001e42:	e7fe      	b.n	8001e42 <vTaskSwitchContext+0x5a>
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <vTaskSwitchContext+0xac>)
 8001e50:	4413      	add	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	3308      	adds	r3, #8
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d104      	bne.n	8001e74 <vTaskSwitchContext+0x8c>
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <vTaskSwitchContext+0xb0>)
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	2000016c 	.word	0x2000016c
 8001e8c:	20000158 	.word	0x20000158
 8001e90:	2000014c 	.word	0x2000014c
 8001e94:	20000070 	.word	0x20000070
 8001e98:	2000006c 	.word	0x2000006c

08001e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10a      	bne.n	8001ec2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb0:	f383 8811 	msr	BASEPRI, r3
 8001eb4:	f3bf 8f6f 	isb	sy
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	60fb      	str	r3, [r7, #12]
    }
 8001ebe:	bf00      	nop
 8001ec0:	e7fe      	b.n	8001ec0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <vTaskPlaceOnEventList+0x44>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3318      	adds	r3, #24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd84 	bl	80009d8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f000 fc86 	bl	80027e4 <prvAddCurrentTaskToDelayedList>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000006c 	.word	0x2000006c

08001ee4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	613b      	str	r3, [r7, #16]
    }
 8001f08:	bf00      	nop
 8001f0a:	e7fe      	b.n	8001f0a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <vTaskPlaceOnEventListRestricted+0x88>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	61da      	str	r2, [r3, #28]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <vTaskPlaceOnEventListRestricted+0x88>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	621a      	str	r2, [r3, #32]
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <vTaskPlaceOnEventListRestricted+0x88>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	3218      	adds	r2, #24
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <vTaskPlaceOnEventListRestricted+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f103 0218 	add.w	r2, r3, #24
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <vTaskPlaceOnEventListRestricted+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	68b8      	ldr	r0, [r7, #8]
 8001f5e:	f000 fc41 	bl	80027e4 <prvAddCurrentTaskToDelayedList>
    }
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000006c 	.word	0x2000006c

08001f70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b08b      	sub	sp, #44	; 0x2c
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	60fb      	str	r3, [r7, #12]
    }
 8001f98:	bf00      	nop
 8001f9a:	e7fe      	b.n	8001f9a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	6a3a      	ldr	r2, [r7, #32]
 8001fa8:	6a12      	ldr	r2, [r2, #32]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	69d2      	ldr	r2, [r2, #28]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	3318      	adds	r3, #24
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d103      	bne.n	8001fca <xTaskRemoveFromEventList+0x5a>
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	6a1a      	ldr	r2, [r3, #32]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <xTaskRemoveFromEventList+0x194>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d15e      	bne.n	80020a0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	6a3a      	ldr	r2, [r7, #32]
 8001fee:	68d2      	ldr	r2, [r2, #12]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	6a3a      	ldr	r2, [r7, #32]
 8001ff8:	6892      	ldr	r2, [r2, #8]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	3304      	adds	r3, #4
 8002004:	429a      	cmp	r2, r3
 8002006:	d103      	bne.n	8002010 <xTaskRemoveFromEventList+0xa0>
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2201      	movs	r2, #1
 8002026:	409a      	lsls	r2, r3
 8002028:	4b37      	ldr	r3, [pc, #220]	; (8002108 <xTaskRemoveFromEventList+0x198>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	4a36      	ldr	r2, [pc, #216]	; (8002108 <xTaskRemoveFromEventList+0x198>)
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002036:	4935      	ldr	r1, [pc, #212]	; (800210c <xTaskRemoveFromEventList+0x19c>)
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3304      	adds	r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	6a3a      	ldr	r2, [r7, #32]
 800205c:	3204      	adds	r2, #4
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <xTaskRemoveFromEventList+0x19c>)
 8002076:	441a      	add	r2, r3
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	4922      	ldr	r1, [pc, #136]	; (800210c <xTaskRemoveFromEventList+0x19c>)
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	481e      	ldr	r0, [pc, #120]	; (800210c <xTaskRemoveFromEventList+0x19c>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4403      	add	r3, r0
 800209c:	6019      	str	r1, [r3, #0]
 800209e:	e01b      	b.n	80020d8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <xTaskRemoveFromEventList+0x1a0>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	61da      	str	r2, [r3, #28]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	621a      	str	r2, [r3, #32]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	3218      	adds	r2, #24
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f103 0218 	add.w	r2, r3, #24
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	4a11      	ldr	r2, [pc, #68]	; (8002110 <xTaskRemoveFromEventList+0x1a0>)
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <xTaskRemoveFromEventList+0x1a0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <xTaskRemoveFromEventList+0x1a0>)
 80020d6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <xTaskRemoveFromEventList+0x1a4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d905      	bls.n	80020f2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <xTaskRemoveFromEventList+0x1a8>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e001      	b.n	80020f6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	372c      	adds	r7, #44	; 0x2c
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000016c 	.word	0x2000016c
 8002108:	2000014c 	.word	0x2000014c
 800210c:	20000070 	.word	0x20000070
 8002110:	20000104 	.word	0x20000104
 8002114:	2000006c 	.word	0x2000006c
 8002118:	20000158 	.word	0x20000158

0800211c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <vTaskInternalSetTimeOutState+0x24>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <vTaskInternalSetTimeOutState+0x28>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	605a      	str	r2, [r3, #4]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000015c 	.word	0x2000015c
 8002144:	20000148 	.word	0x20000148

08002148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215c:	f383 8811 	msr	BASEPRI, r3
 8002160:	f3bf 8f6f 	isb	sy
 8002164:	f3bf 8f4f 	dsb	sy
 8002168:	613b      	str	r3, [r7, #16]
    }
 800216a:	bf00      	nop
 800216c:	e7fe      	b.n	800216c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	60fb      	str	r3, [r7, #12]
    }
 8002186:	bf00      	nop
 8002188:	e7fe      	b.n	8002188 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800218a:	f000 ff21 	bl	8002fd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <xTaskCheckForTimeOut+0xc4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d102      	bne.n	80021ae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e026      	b.n	80021fc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <xTaskCheckForTimeOut+0xc8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d00a      	beq.n	80021d0 <xTaskCheckForTimeOut+0x88>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d305      	bcc.n	80021d0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e015      	b.n	80021fc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d20b      	bcs.n	80021f2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff98 	bl	800211c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	e004      	b.n	80021fc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80021fc:	f000 ff18 	bl	8003030 <vPortExitCritical>

    return xReturn;
 8002200:	69fb      	ldr	r3, [r7, #28]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000148 	.word	0x20000148
 8002210:	2000015c 	.word	0x2000015c

08002214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <vTaskMissedYield+0x14>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000158 	.word	0x20000158

0800222c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002234:	f000 f852 	bl	80022dc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <prvIdleTask+0x28>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d9f9      	bls.n	8002234 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <prvIdleTask+0x2c>)
 8002242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002250:	e7f0      	b.n	8002234 <prvIdleTask+0x8>
 8002252:	bf00      	nop
 8002254:	20000070 	.word	0x20000070
 8002258:	e000ed04 	.word	0xe000ed04

0800225c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	e00c      	b.n	8002282 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <prvInitialiseTaskLists+0x60>)
 8002274:	4413      	add	r3, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fb83 	bl	8000982 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3301      	adds	r3, #1
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d9ef      	bls.n	8002268 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <prvInitialiseTaskLists+0x64>)
 800228a:	f7fe fb7a 	bl	8000982 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800228e:	480d      	ldr	r0, [pc, #52]	; (80022c4 <prvInitialiseTaskLists+0x68>)
 8002290:	f7fe fb77 	bl	8000982 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <prvInitialiseTaskLists+0x6c>)
 8002296:	f7fe fb74 	bl	8000982 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800229a:	480c      	ldr	r0, [pc, #48]	; (80022cc <prvInitialiseTaskLists+0x70>)
 800229c:	f7fe fb71 	bl	8000982 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80022a0:	480b      	ldr	r0, [pc, #44]	; (80022d0 <prvInitialiseTaskLists+0x74>)
 80022a2:	f7fe fb6e 	bl	8000982 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <prvInitialiseTaskLists+0x78>)
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <prvInitialiseTaskLists+0x64>)
 80022aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <prvInitialiseTaskLists+0x7c>)
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <prvInitialiseTaskLists+0x68>)
 80022b0:	601a      	str	r2, [r3, #0]
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000070 	.word	0x20000070
 80022c0:	200000d4 	.word	0x200000d4
 80022c4:	200000e8 	.word	0x200000e8
 80022c8:	20000104 	.word	0x20000104
 80022cc:	20000118 	.word	0x20000118
 80022d0:	20000130 	.word	0x20000130
 80022d4:	200000fc 	.word	0x200000fc
 80022d8:	20000100 	.word	0x20000100

080022dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022e2:	e019      	b.n	8002318 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80022e4:	f000 fe74 	bl	8002fd0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <prvCheckTasksWaitingTermination+0x50>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fba7 	bl	8000a48 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <prvCheckTasksWaitingTermination+0x54>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <prvCheckTasksWaitingTermination+0x54>)
 8002302:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <prvCheckTasksWaitingTermination+0x58>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3b01      	subs	r3, #1
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <prvCheckTasksWaitingTermination+0x58>)
 800230c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800230e:	f000 fe8f 	bl	8003030 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f810 	bl	8002338 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <prvCheckTasksWaitingTermination+0x58>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e1      	bne.n	80022e4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000118 	.word	0x20000118
 8002330:	20000144 	.word	0x20000144
 8002334:	2000012c 	.word	0x2000012c

08002338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ffb5 	bl	80032b4 <vPortFree>
            vPortFree( pxTCB );
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 ffb2 	bl	80032b4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <prvResetNextTaskUnblockTime+0x2c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <prvResetNextTaskUnblockTime+0x30>)
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800236e:	e005      	b.n	800237c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <prvResetNextTaskUnblockTime+0x2c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <prvResetNextTaskUnblockTime+0x30>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	200000fc 	.word	0x200000fc
 8002388:	20000164 	.word	0x20000164

0800238c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <xTaskGetSchedulerState+0x34>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800239a:	2301      	movs	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	e008      	b.n	80023b2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <xTaskGetSchedulerState+0x38>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80023a8:	2302      	movs	r3, #2
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	e001      	b.n	80023b2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80023b2:	687b      	ldr	r3, [r7, #4]
    }
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000150 	.word	0x20000150
 80023c4:	2000016c 	.word	0x2000016c

080023c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8087 	beq.w	80024ee <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <xTaskPriorityInherit+0x130>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d276      	bcs.n	80024dc <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db06      	blt.n	8002404 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f6:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <xTaskPriorityInherit+0x130>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f1c3 0205 	rsb	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	6959      	ldr	r1, [r3, #20]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4a39      	ldr	r2, [pc, #228]	; (80024fc <xTaskPriorityInherit+0x134>)
 8002416:	4413      	add	r3, r2
 8002418:	4299      	cmp	r1, r3
 800241a:	d157      	bne.n	80024cc <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3304      	adds	r3, #4
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fb11 	bl	8000a48 <uxListRemove>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2201      	movs	r2, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <xTaskPriorityInherit+0x138>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4013      	ands	r3, r2
 800243e:	4a30      	ldr	r2, [pc, #192]	; (8002500 <xTaskPriorityInherit+0x138>)
 8002440:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <xTaskPriorityInherit+0x130>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	2201      	movs	r2, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <xTaskPriorityInherit+0x138>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	4a29      	ldr	r2, [pc, #164]	; (8002500 <xTaskPriorityInherit+0x138>)
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	4926      	ldr	r1, [pc, #152]	; (80024fc <xTaskPriorityInherit+0x134>)
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3304      	adds	r3, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	3204      	adds	r2, #4
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1d1a      	adds	r2, r3, #4
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <xTaskPriorityInherit+0x134>)
 80024a2:	441a      	add	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	4913      	ldr	r1, [pc, #76]	; (80024fc <xTaskPriorityInherit+0x134>)
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1c59      	adds	r1, r3, #1
 80024bc:	480f      	ldr	r0, [pc, #60]	; (80024fc <xTaskPriorityInherit+0x134>)
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4403      	add	r3, r0
 80024c8:	6019      	str	r1, [r3, #0]
 80024ca:	e004      	b.n	80024d6 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <xTaskPriorityInherit+0x130>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e008      	b.n	80024ee <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <xTaskPriorityInherit+0x130>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d201      	bcs.n	80024ee <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80024ee:	697b      	ldr	r3, [r7, #20]
    }
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000006c 	.word	0x2000006c
 80024fc:	20000070 	.word	0x20000070
 8002500:	2000014c 	.word	0x2000014c

08002504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 808c 	beq.w	8002634 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800251c:	4b48      	ldr	r3, [pc, #288]	; (8002640 <xTaskPriorityDisinherit+0x13c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	429a      	cmp	r2, r3
 8002524:	d00a      	beq.n	800253c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	613b      	str	r3, [r7, #16]
    }
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	60fb      	str	r3, [r7, #12]
    }
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	429a      	cmp	r2, r3
 800256e:	d061      	beq.n	8002634 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d15d      	bne.n	8002634 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3304      	adds	r3, #4
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fa63 	bl	8000a48 <uxListRemove>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2201      	movs	r2, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <xTaskPriorityDisinherit+0x140>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4013      	ands	r3, r2
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <xTaskPriorityDisinherit+0x140>)
 800259c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f1c3 0205 	rsb	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <xTaskPriorityDisinherit+0x140>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <xTaskPriorityDisinherit+0x140>)
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c8:	491f      	ldr	r1, [pc, #124]	; (8002648 <xTaskPriorityDisinherit+0x144>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3304      	adds	r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	3204      	adds	r2, #4
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1d1a      	adds	r2, r3, #4
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <xTaskPriorityDisinherit+0x144>)
 8002608:	441a      	add	r2, r3
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	615a      	str	r2, [r3, #20]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <xTaskPriorityDisinherit+0x144>)
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c59      	adds	r1, r3, #1
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <xTaskPriorityDisinherit+0x144>)
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4403      	add	r3, r0
 800262e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002630:	2301      	movs	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002634:	69fb      	ldr	r3, [r7, #28]
    }
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000006c 	.word	0x2000006c
 8002644:	2000014c 	.word	0x2000014c
 8002648:	20000070 	.word	0x20000070

0800264c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800265a:	2301      	movs	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a1 	beq.w	80027a8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	613b      	str	r3, [r7, #16]
    }
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d902      	bls.n	8002694 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	e002      	b.n	800269a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f000 8081 	beq.w	80027a8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d17b      	bne.n	80027a8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80026b0:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d10a      	bne.n	80026d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	60fb      	str	r3, [r7, #12]
    }
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db04      	blt.n	80026ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f1c3 0205 	rsb	r2, r3, #5
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	6959      	ldr	r1, [r3, #20]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80026fe:	4413      	add	r3, r2
 8002700:	4299      	cmp	r1, r3
 8002702:	d151      	bne.n	80027a8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	3304      	adds	r3, #4
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe f99d 	bl	8000a48 <uxListRemove>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	2201      	movs	r2, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4013      	ands	r3, r2
 8002726:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002728:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	2201      	movs	r2, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	491c      	ldr	r1, [pc, #112]	; (80027b4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	6a3a      	ldr	r2, [r7, #32]
 8002766:	3204      	adds	r2, #4
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	1d1a      	adds	r2, r3, #4
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002780:	441a      	add	r2, r3
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	615a      	str	r2, [r3, #20]
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	1c59      	adds	r1, r3, #1
 800279a:	4806      	ldr	r0, [pc, #24]	; (80027b4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4403      	add	r3, r0
 80027a6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80027a8:	bf00      	nop
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000006c 	.word	0x2000006c
 80027b4:	20000070 	.word	0x20000070
 80027b8:	2000014c 	.word	0x2000014c

080027bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ce:	3201      	adds	r2, #1
 80027d0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80027d2:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
    }
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000006c 	.word	0x2000006c

080027e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe f924 	bl	8000a48 <uxListRemove>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2201      	movs	r2, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4013      	ands	r3, r2
 800281a:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <prvAddCurrentTaskToDelayedList+0xec>)
 800281c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d124      	bne.n	8002870 <prvAddCurrentTaskToDelayedList+0x8c>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d021      	beq.n	8002870 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	3204      	adds	r2, #4
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1d1a      	adds	r2, r3, #4
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002860:	615a      	str	r2, [r3, #20]
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800286e:	e026      	b.n	80028be <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	d209      	bcs.n	800289c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3304      	adds	r3, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7fe f89f 	bl	80009d8 <vListInsert>
}
 800289a:	e010      	b.n	80028be <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <prvAddCurrentTaskToDelayedList+0xf8>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3304      	adds	r3, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f7fe f895 	bl	80009d8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d202      	bcs.n	80028be <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000148 	.word	0x20000148
 80028cc:	2000006c 	.word	0x2000006c
 80028d0:	2000014c 	.word	0x2000014c
 80028d4:	20000130 	.word	0x20000130
 80028d8:	20000100 	.word	0x20000100
 80028dc:	200000fc 	.word	0x200000fc
 80028e0:	20000164 	.word	0x20000164

080028e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80028ee:	f000 fa45 	bl	8002d7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <xTimerCreateTimerTask+0x54>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <xTimerCreateTimerTask+0x58>)
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2302      	movs	r3, #2
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002908:	490d      	ldr	r1, [pc, #52]	; (8002940 <xTimerCreateTimerTask+0x5c>)
 800290a:	480e      	ldr	r0, [pc, #56]	; (8002944 <xTimerCreateTimerTask+0x60>)
 800290c:	f7fe fe4e 	bl	80015ac <xTaskCreate>
 8002910:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	603b      	str	r3, [r7, #0]
    }
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800292e:	687b      	ldr	r3, [r7, #4]
    }
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200001a0 	.word	0x200001a0
 800293c:	200001a4 	.word	0x200001a4
 8002940:	0800357c 	.word	0x0800357c
 8002944:	080029ed 	.word	0x080029ed

08002948 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002954:	e008      	b.n	8002968 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	18d1      	adds	r1, r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8db 	bl	8002b30 <prvInsertTimerInActiveList>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ea      	bne.n	8002956 <prvReloadTimer+0xe>
        }
    }
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <prvProcessExpiredTimer+0x5c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe f84f 	bl	8000a48 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff ffc3 	bl	8002948 <prvReloadTimer>
 80029c2:	e008      	b.n	80029d6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	4798      	blx	r3
    }
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000198 	.word	0x20000198

080029ec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f857 	bl	8002aac <prvGetNextExpireTime>
 80029fe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4619      	mov	r1, r3
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f803 	bl	8002a10 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a0a:	f000 f8d3 	bl	8002bb4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a0e:	e7f1      	b.n	80029f4 <prvTimerTask+0x8>

08002a10 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a1a:	f7fe ffb7 	bl	800198c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f864 	bl	8002af0 <prvSampleTimeNow>
 8002a28:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d130      	bne.n	8002a92 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <prvProcessTimerOrBlockTask+0x3c>
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d806      	bhi.n	8002a4c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002a3e:	f7fe ffb3 	bl	80019a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffa1 	bl	800298c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a4a:	e024      	b.n	8002a96 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <prvProcessTimerOrBlockTask+0x90>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <prvProcessTimerOrBlockTask+0x50>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <prvProcessTimerOrBlockTask+0x52>
 8002a60:	2300      	movs	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <prvProcessTimerOrBlockTask+0x94>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f7fe fd67 	bl	8001544 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002a76:	f7fe ff97 	bl	80019a8 <xTaskResumeAll>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <prvProcessTimerOrBlockTask+0x98>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
    }
 8002a90:	e001      	b.n	8002a96 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002a92:	f7fe ff89 	bl	80019a8 <xTaskResumeAll>
    }
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000019c 	.word	0x2000019c
 8002aa4:	200001a0 	.word	0x200001a0
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <prvGetNextExpireTime+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <prvGetNextExpireTime+0x16>
 8002abe:	2201      	movs	r2, #1
 8002ac0:	e000      	b.n	8002ac4 <prvGetNextExpireTime+0x18>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <prvGetNextExpireTime+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e001      	b.n	8002ae0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    }
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000198 	.word	0x20000198

08002af0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002af8:	f7ff f852 	bl	8001ba0 <xTaskGetTickCount>
 8002afc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <prvSampleTimeNow+0x3c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d205      	bcs.n	8002b14 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002b08:	f000 f912 	bl	8002d30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e002      	b.n	8002b1a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <prvSampleTimeNow+0x3c>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002b20:	68fb      	ldr	r3, [r7, #12]
    }
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200001a8 	.word	0x200001a8

08002b30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d812      	bhi.n	8002b7c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e01b      	b.n	8002ba2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <prvInsertTimerInActiveList+0x7c>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7fd ff2f 	bl	80009d8 <vListInsert>
 8002b7a:	e012      	b.n	8002ba2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d206      	bcs.n	8002b92 <prvInsertTimerInActiveList+0x62>
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d302      	bcc.n	8002b92 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e007      	b.n	8002ba2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <prvInsertTimerInActiveList+0x80>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f7fd ff1b 	bl	80009d8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002ba2:	697b      	ldr	r3, [r7, #20]
    }
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2000019c 	.word	0x2000019c
 8002bb0:	20000198 	.word	0x20000198

08002bb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bba:	e0a6      	b.n	8002d0a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f2c0 80a2 	blt.w	8002d08 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd ff37 	bl	8000a48 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff87 	bl	8002af0 <prvSampleTimeNow>
 8002be2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 808e 	bhi.w	8002d0a <prvProcessReceivedCommands+0x156>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <prvProcessReceivedCommands+0x40>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c19 	.word	0x08002c19
 8002bfc:	08002c81 	.word	0x08002c81
 8002c00:	08002c95 	.word	0x08002c95
 8002c04:	08002cdf 	.word	0x08002cdf
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c19 	.word	0x08002c19
 8002c10:	08002c81 	.word	0x08002c81
 8002c14:	08002c95 	.word	0x08002c95
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	18d1      	adds	r1, r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	69f8      	ldr	r0, [r7, #28]
 8002c38:	f7ff ff7a 	bl	8002b30 <prvInsertTimerInActiveList>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4413      	add	r3, r2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	69f8      	ldr	r0, [r7, #28]
 8002c5e:	f7ff fe73 	bl	8002948 <prvReloadTimer>
 8002c62:	e008      	b.n	8002c76 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	69f8      	ldr	r0, [r7, #28]
 8002c7c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002c7e:	e044      	b.n	8002d0a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002c92:	e03a      	b.n	8002d0a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	617b      	str	r3, [r7, #20]
    }
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	18d1      	adds	r1, r2, r3
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	69f8      	ldr	r0, [r7, #28]
 8002cd8:	f7ff ff2a 	bl	8002b30 <prvInsertTimerInActiveList>
                        break;
 8002cdc:	e015      	b.n	8002d0a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002cec:	69f8      	ldr	r0, [r7, #28]
 8002cee:	f000 fae1 	bl	80032b4 <vPortFree>
 8002cf2:	e00a      	b.n	8002d0a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d06:	e000      	b.n	8002d0a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002d08:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <prvProcessReceivedCommands+0x178>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f107 0108 	add.w	r1, r7, #8
 8002d12:	2200      	movs	r2, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f8c1 	bl	8000e9c <xQueueReceive>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af4d 	bne.w	8002bbc <prvProcessReceivedCommands+0x8>
        }
    }
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200001a0 	.word	0x200001a0

08002d30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d36:	e009      	b.n	8002d4c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <prvSwitchTimerLists+0x44>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002d42:	f04f 31ff 	mov.w	r1, #4294967295
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	f7ff fe20 	bl	800298c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <prvSwitchTimerLists+0x44>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <prvSwitchTimerLists+0x44>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <prvSwitchTimerLists+0x48>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <prvSwitchTimerLists+0x44>)
 8002d62:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <prvSwitchTimerLists+0x48>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6013      	str	r3, [r2, #0]
    }
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000198 	.word	0x20000198
 8002d78:	2000019c 	.word	0x2000019c

08002d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002d80:	f000 f926 	bl	8002fd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11d      	bne.n	8002dc8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002d8c:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <prvCheckForValidListAndQueue+0x58>)
 8002d8e:	f7fd fdf8 	bl	8000982 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <prvCheckForValidListAndQueue+0x5c>)
 8002d94:	f7fd fdf5 	bl	8000982 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <prvCheckForValidListAndQueue+0x60>)
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <prvCheckForValidListAndQueue+0x58>)
 8002d9c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <prvCheckForValidListAndQueue+0x64>)
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <prvCheckForValidListAndQueue+0x5c>)
 8002da2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002da4:	2200      	movs	r2, #0
 8002da6:	210c      	movs	r1, #12
 8002da8:	200a      	movs	r0, #10
 8002daa:	f7fd ff07 	bl	8000bbc <xQueueGenericCreate>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002db2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4908      	ldr	r1, [pc, #32]	; (8002de4 <prvCheckForValidListAndQueue+0x68>)
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fb70 	bl	80014a8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002dc8:	f000 f932 	bl	8003030 <vPortExitCritical>
    }
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200001a0 	.word	0x200001a0
 8002dd4:	20000170 	.word	0x20000170
 8002dd8:	20000184 	.word	0x20000184
 8002ddc:	20000198 	.word	0x20000198
 8002de0:	2000019c 	.word	0x2000019c
 8002de4:	08003584 	.word	0x08003584

08002de8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3b04      	subs	r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3b04      	subs	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3b04      	subs	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e18:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <pxPortInitialiseStack+0x54>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b14      	subs	r3, #20
 8002e22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b20      	subs	r3, #32
 8002e2e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	08002e41 	.word	0x08002e41

08002e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <prvTaskExitError+0x54>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d00a      	beq.n	8002e6a <prvTaskExitError+0x2a>
        __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	60fb      	str	r3, [r7, #12]
    }
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <prvTaskExitError+0x28>
        __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	60bb      	str	r3, [r7, #8]
    }
 8002e7c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e7e:	bf00      	nop
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0fc      	beq.n	8002e80 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000004 	.word	0x20000004
	...

08002ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <pxCurrentTCBConst2>)
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	6808      	ldr	r0, [r1, #0]
 8002ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002eaa:	f380 8809 	msr	PSP, r0
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f380 8811 	msr	BASEPRI, r0
 8002eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8002ebe:	4770      	bx	lr

08002ec0 <pxCurrentTCBConst2>:
 8002ec0:	2000006c 	.word	0x2000006c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop

08002ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002ec8:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <prvPortStartFirstTask+0x1c>)
 8002eca:	6800      	ldr	r0, [r0, #0]
 8002ecc:	6800      	ldr	r0, [r0, #0]
 8002ece:	f380 8808 	msr	MSP, r0
 8002ed2:	b662      	cpsie	i
 8002ed4:	b661      	cpsie	f
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	df00      	svc	0
 8002ee0:	bf00      	nop
 8002ee2:	0000      	.short	0x0000
 8002ee4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop

08002eec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <xPortStartScheduler+0xd0>)
 8002ef4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	22ff      	movs	r2, #255	; 0xff
 8002f02:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <xPortStartScheduler+0xd4>)
 8002f18:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f20:	e009      	b.n	8002f36 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f2a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d0ef      	beq.n	8002f22 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00a      	beq.n	8002f64 <xPortStartScheduler+0x78>
        __asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60bb      	str	r3, [r7, #8]
    }
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f6c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <xPortStartScheduler+0xd8>)
 8002f78:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <xPortStartScheduler+0xdc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <xPortStartScheduler+0xdc>)
 8002f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f8c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <xPortStartScheduler+0xdc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <xPortStartScheduler+0xdc>)
 8002f94:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f98:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f9a:	f000 f8b7 	bl	800310c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <xPortStartScheduler+0xe0>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002fa4:	f7ff ff90 	bl	8002ec8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002fa8:	f7fe ff1e 	bl	8001de8 <vTaskSwitchContext>
    prvTaskExitError();
 8002fac:	f7ff ff48 	bl	8002e40 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	e000e400 	.word	0xe000e400
 8002fc0:	200001ac 	.word	0x200001ac
 8002fc4:	200001b0 	.word	0x200001b0
 8002fc8:	e000ed20 	.word	0xe000ed20
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
        __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	607b      	str	r3, [r7, #4]
    }
 8002fe8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <vPortEnterCritical+0x58>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <vPortEnterCritical+0x58>)
 8002ff2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <vPortEnterCritical+0x58>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10f      	bne.n	800301c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <vPortEnterCritical+0x5c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <vPortEnterCritical+0x4c>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	603b      	str	r3, [r7, #0]
    }
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <vPortEnterCritical+0x4a>
    }
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000004 	.word	0x20000004
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <vPortExitCritical+0x4c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <vPortExitCritical+0x24>
        __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	607b      	str	r3, [r7, #4]
    }
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <vPortExitCritical+0x4c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <vPortExitCritical+0x4c>)
 800305c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <vPortExitCritical+0x4c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <vPortExitCritical+0x42>
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003070:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	20000004 	.word	0x20000004

08003080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003080:	f3ef 8009 	mrs	r0, PSP
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <pxCurrentTCBConst>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003090:	6010      	str	r0, [r2, #0]
 8003092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003096:	f04f 0050 	mov.w	r0, #80	; 0x50
 800309a:	f380 8811 	msr	BASEPRI, r0
 800309e:	f7fe fea3 	bl	8001de8 <vTaskSwitchContext>
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f380 8811 	msr	BASEPRI, r0
 80030aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030b6:	f380 8809 	msr	PSP, r0
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	4770      	bx	lr

080030c0 <pxCurrentTCBConst>:
 80030c0:	2000006c 	.word	0x2000006c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop

080030c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
        __asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	607b      	str	r3, [r7, #4]
    }
 80030e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030e2:	f7fe fd6b 	bl	8001bbc <xTaskIncrementTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <SysTick_Handler+0x40>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f383 8811 	msr	BASEPRI, r3
    }
 80030fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <vPortSetupTimerInterrupt+0x24>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <vPortSetupTimerInterrupt+0x28>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <vPortSetupTimerInterrupt+0x2c>)
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <vPortSetupTimerInterrupt+0x30>)
 8003120:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003122:	4b03      	ldr	r3, [pc, #12]	; (8003130 <vPortSetupTimerInterrupt+0x24>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	e000e010 	.word	0xe000e010
 8003134:	e000e018 	.word	0xe000e018
 8003138:	e000e014 	.word	0xe000e014
 800313c:	0001193f 	.word	0x0001193f

08003140 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800314c:	f7fe fc1e 	bl	800198c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <pvPortMalloc+0x160>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003158:	f000 f908 	bl	800336c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d012      	beq.n	8003188 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003162:	2208      	movs	r2, #8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	3308      	adds	r3, #8
 800316e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	43db      	mvns	r3, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d804      	bhi.n	8003184 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	4413      	add	r3, r2
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	e001      	b.n	8003188 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db70      	blt.n	8003270 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d06d      	beq.n	8003270 <pvPortMalloc+0x130>
 8003194:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <pvPortMalloc+0x164>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d868      	bhi.n	8003270 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800319e:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <pvPortMalloc+0x168>)
 80031a0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <pvPortMalloc+0x168>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031a8:	e004      	b.n	80031b4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d903      	bls.n	80031c6 <pvPortMalloc+0x86>
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f1      	bne.n	80031aa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <pvPortMalloc+0x160>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d04f      	beq.n	8003270 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2208      	movs	r2, #8
 80031d6:	4413      	add	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad2      	subs	r2, r2, r3
 80031ea:	2308      	movs	r3, #8
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d91f      	bls.n	8003232 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <pvPortMalloc+0xda>
        __asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	613b      	str	r3, [r7, #16]
    }
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad2      	subs	r2, r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800322c:	6978      	ldr	r0, [r7, #20]
 800322e:	f000 f8f9 	bl	8003424 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <pvPortMalloc+0x164>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <pvPortMalloc+0x164>)
 800323e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <pvPortMalloc+0x164>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <pvPortMalloc+0x16c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d203      	bcs.n	8003254 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <pvPortMalloc+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <pvPortMalloc+0x16c>)
 8003252:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <pvPortMalloc+0x170>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <pvPortMalloc+0x170>)
 800326e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003270:	f7fe fb9a 	bl	80019a8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <pvPortMalloc+0x154>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	60fb      	str	r3, [r7, #12]
    }
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <pvPortMalloc+0x152>
    return pvReturn;
 8003294:	69fb      	ldr	r3, [r7, #28]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200021bc 	.word	0x200021bc
 80032a4:	200021c0 	.word	0x200021c0
 80032a8:	200021b4 	.word	0x200021b4
 80032ac:	200021c4 	.word	0x200021c4
 80032b0:	200021c8 	.word	0x200021c8

080032b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d049      	beq.n	800335a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032c6:	2308      	movs	r3, #8
 80032c8:	425b      	negs	r3, r3
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4413      	add	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <vPortFree+0x3e>
        __asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	60fb      	str	r3, [r7, #12]
    }
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <vPortFree+0x5c>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60bb      	str	r3, [r7, #8]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	0fdb      	lsrs	r3, r3, #31
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d118      	bne.n	800335a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003334:	f7fe fb2a 	bl	800198c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <vPortFree+0xb0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	4a08      	ldr	r2, [pc, #32]	; (8003364 <vPortFree+0xb0>)
 8003344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f000 f86c 	bl	8003424 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <vPortFree+0xb4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <vPortFree+0xb4>)
 8003354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003356:	f7fe fb27 	bl	80019a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200021c0 	.word	0x200021c0
 8003368:	200021cc 	.word	0x200021cc

0800336c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003376:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <prvHeapInit+0xa4>)
 800337a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3307      	adds	r3, #7
 800338a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <prvHeapInit+0xa4>)
 800339c:	4413      	add	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <prvHeapInit+0xa8>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <prvHeapInit+0xa8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033b8:	2208      	movs	r2, #8
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <prvHeapInit+0xac>)
 80033cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <prvHeapInit+0xac>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <prvHeapInit+0xac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	1ad2      	subs	r2, r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <prvHeapInit+0xac>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a08      	ldr	r2, [pc, #32]	; (800341c <prvHeapInit+0xb0>)
 80033fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a07      	ldr	r2, [pc, #28]	; (8003420 <prvHeapInit+0xb4>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	200001b4 	.word	0x200001b4
 8003414:	200021b4 	.word	0x200021b4
 8003418:	200021bc 	.word	0x200021bc
 800341c:	200021c4 	.word	0x200021c4
 8003420:	200021c0 	.word	0x200021c0

08003424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <prvInsertBlockIntoFreeList+0xa8>)
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e002      	b.n	8003438 <prvInsertBlockIntoFreeList+0x14>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d8f7      	bhi.n	8003432 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d108      	bne.n	8003466 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	441a      	add	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	441a      	add	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d118      	bne.n	80034ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <prvInsertBlockIntoFreeList+0xac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d00d      	beq.n	80034a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e008      	b.n	80034b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <prvInsertBlockIntoFreeList+0xac>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e003      	b.n	80034b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d002      	beq.n	80034c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	200021b4 	.word	0x200021b4
 80034d0:	200021bc 	.word	0x200021bc

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2600      	movs	r6, #0
 80034d8:	4d0c      	ldr	r5, [pc, #48]	; (800350c <__libc_init_array+0x38>)
 80034da:	4c0d      	ldr	r4, [pc, #52]	; (8003510 <__libc_init_array+0x3c>)
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	42a6      	cmp	r6, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	f000 f830 	bl	8003548 <_init>
 80034e8:	2600      	movs	r6, #0
 80034ea:	4d0a      	ldr	r5, [pc, #40]	; (8003514 <__libc_init_array+0x40>)
 80034ec:	4c0a      	ldr	r4, [pc, #40]	; (8003518 <__libc_init_array+0x44>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	42a6      	cmp	r6, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fc:	4798      	blx	r3
 80034fe:	3601      	adds	r6, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	f855 3b04 	ldr.w	r3, [r5], #4
 8003506:	4798      	blx	r3
 8003508:	3601      	adds	r6, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	0800358c 	.word	0x0800358c
 8003510:	0800358c 	.word	0x0800358c
 8003514:	0800358c 	.word	0x0800358c
 8003518:	08003590 	.word	0x08003590

0800351c <memcpy>:
 800351c:	440a      	add	r2, r1
 800351e:	4291      	cmp	r1, r2
 8003520:	f100 33ff 	add.w	r3, r0, #4294967295
 8003524:	d100      	bne.n	8003528 <memcpy+0xc>
 8003526:	4770      	bx	lr
 8003528:	b510      	push	{r4, lr}
 800352a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800352e:	4291      	cmp	r1, r2
 8003530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003534:	d1f9      	bne.n	800352a <memcpy+0xe>
 8003536:	bd10      	pop	{r4, pc}

08003538 <memset>:
 8003538:	4603      	mov	r3, r0
 800353a:	4402      	add	r2, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
