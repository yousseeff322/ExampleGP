
MASTER_NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002900  08002900  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002900  08002900  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002900  08002900  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c4  20000008  08002910  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  08002910  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000632c  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012b5  00000000  00000000  0002635d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00027618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00027c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028bc  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068e3  00000000  00000000  0002aacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00010fbc  00000000  00000000  000313af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004236b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001900  00000000  00000000  000423bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08002898 	.word	0x08002898

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08002898 	.word	0x08002898

08000170 <MGPIO_VidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"



void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	d07a      	beq.n	800027e <MGPIO_VidSetPinDirection+0x10e>
 8000188:	2b02      	cmp	r3, #2
 800018a:	f300 80b1 	bgt.w	80002f0 <MGPIO_VidSetPinDirection+0x180>
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <MGPIO_VidSetPinDirection+0x28>
 8000192:	2b01      	cmp	r3, #1
 8000194:	d03a      	beq.n	800020c <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 8000196:	e0ab      	b.n	80002f0 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 8000198:	79bb      	ldrb	r3, [r7, #6]
 800019a:	2b07      	cmp	r3, #7
 800019c:	d817      	bhi.n	80001ce <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 800019e:	4b5a      	ldr	r3, [pc, #360]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	79ba      	ldrb	r2, [r7, #6]
 80001a4:	0092      	lsls	r2, r2, #2
 80001a6:	210f      	movs	r1, #15
 80001a8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ac:	43d2      	mvns	r2, r2
 80001ae:	4611      	mov	r1, r2
 80001b0:	4a55      	ldr	r2, [pc, #340]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001b2:	400b      	ands	r3, r1
 80001b4:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001b6:	4b54      	ldr	r3, [pc, #336]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	7979      	ldrb	r1, [r7, #5]
 80001bc:	79ba      	ldrb	r2, [r7, #6]
 80001be:	0092      	lsls	r2, r2, #2
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	4611      	mov	r1, r2
 80001c6:	4a50      	ldr	r2, [pc, #320]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001c8:	430b      	orrs	r3, r1
 80001ca:	6013      	str	r3, [r2, #0]
		break;
 80001cc:	e092      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b0f      	cmp	r3, #15
 80001d2:	f200 808f 	bhi.w	80002f4 <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	3b08      	subs	r3, #8
 80001da:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80001dc:	4b4a      	ldr	r3, [pc, #296]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	79ba      	ldrb	r2, [r7, #6]
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	210f      	movs	r1, #15
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	43d2      	mvns	r2, r2
 80001ec:	4611      	mov	r1, r2
 80001ee:	4a46      	ldr	r2, [pc, #280]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001f0:	400b      	ands	r3, r1
 80001f2:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001f4:	4b44      	ldr	r3, [pc, #272]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	7979      	ldrb	r1, [r7, #5]
 80001fa:	79ba      	ldrb	r2, [r7, #6]
 80001fc:	0092      	lsls	r2, r2, #2
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	4611      	mov	r1, r2
 8000204:	4a40      	ldr	r2, [pc, #256]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 8000206:	430b      	orrs	r3, r1
 8000208:	6053      	str	r3, [r2, #4]
		break;
 800020a:	e073      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	2b07      	cmp	r3, #7
 8000210:	d817      	bhi.n	8000242 <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000212:	4b3e      	ldr	r3, [pc, #248]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	79ba      	ldrb	r2, [r7, #6]
 8000218:	0092      	lsls	r2, r2, #2
 800021a:	210f      	movs	r1, #15
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	43d2      	mvns	r2, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a39      	ldr	r2, [pc, #228]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000226:	400b      	ands	r3, r1
 8000228:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800022a:	4b38      	ldr	r3, [pc, #224]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	7979      	ldrb	r1, [r7, #5]
 8000230:	79ba      	ldrb	r2, [r7, #6]
 8000232:	0092      	lsls	r2, r2, #2
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	4611      	mov	r1, r2
 800023a:	4a34      	ldr	r2, [pc, #208]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 800023c:	430b      	orrs	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
		break;
 8000240:	e05a      	b.n	80002f8 <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d857      	bhi.n	80002f8 <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	3b08      	subs	r3, #8
 800024c:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 800024e:	4b2f      	ldr	r3, [pc, #188]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	210f      	movs	r1, #15
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	43d2      	mvns	r2, r2
 800025e:	4611      	mov	r1, r2
 8000260:	4a2a      	ldr	r2, [pc, #168]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000262:	400b      	ands	r3, r1
 8000264:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000266:	4b29      	ldr	r3, [pc, #164]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	7979      	ldrb	r1, [r7, #5]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a25      	ldr	r2, [pc, #148]	; (800030c <MGPIO_VidSetPinDirection+0x19c>)
 8000278:	430b      	orrs	r3, r1
 800027a:	6053      	str	r3, [r2, #4]
		break;
 800027c:	e03c      	b.n	80002f8 <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	2b07      	cmp	r3, #7
 8000282:	d817      	bhi.n	80002b4 <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000284:	4b22      	ldr	r3, [pc, #136]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	0092      	lsls	r2, r2, #2
 800028c:	210f      	movs	r1, #15
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	43d2      	mvns	r2, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a1e      	ldr	r2, [pc, #120]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 8000298:	400b      	ands	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	7979      	ldrb	r1, [r7, #5]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	4611      	mov	r1, r2
 80002ac:	4a18      	ldr	r2, [pc, #96]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 80002ae:	430b      	orrs	r3, r1
 80002b0:	6013      	str	r3, [r2, #0]
		break;
 80002b2:	e023      	b.n	80002fc <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	2b0f      	cmp	r3, #15
 80002b8:	d820      	bhi.n	80002fc <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	3b08      	subs	r3, #8
 80002be:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	79ba      	ldrb	r2, [r7, #6]
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	210f      	movs	r1, #15
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 80002d4:	400b      	ands	r3, r1
 80002d6:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	7979      	ldrb	r1, [r7, #5]
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	fa01 f202 	lsl.w	r2, r1, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <MGPIO_VidSetPinDirection+0x1a0>)
 80002ea:	430b      	orrs	r3, r1
 80002ec:	6053      	str	r3, [r2, #4]
		break;
 80002ee:	e005      	b.n	80002fc <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 80002f0:	bf00      	nop
 80002f2:	e004      	b.n	80002fe <MGPIO_VidSetPinDirection+0x18e>
		break;
 80002f4:	bf00      	nop
 80002f6:	e002      	b.n	80002fe <MGPIO_VidSetPinDirection+0x18e>
		break;
 80002f8:	bf00      	nop
 80002fa:	e000      	b.n	80002fe <MGPIO_VidSetPinDirection+0x18e>
		break;
 80002fc:	bf00      	nop
	}

}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40010800 	.word	0x40010800
 800030c:	40010c00 	.word	0x40010c00
 8000310:	40011000 	.word	0x40011000

08000314 <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
 800031e:	460b      	mov	r3, r1
 8000320:	71bb      	strb	r3, [r7, #6]
 8000322:	4613      	mov	r3, r2
 8000324:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d040      	beq.n	80003ae <MGPIO_VidSetPinValue+0x9a>
 800032c:	2b02      	cmp	r3, #2
 800032e:	dc60      	bgt.n	80003f2 <MGPIO_VidSetPinValue+0xde>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <MGPIO_VidSetPinValue+0x26>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d01d      	beq.n	8000374 <MGPIO_VidSetPinValue+0x60>

		break;

	}

}
 8000338:	e05b      	b.n	80003f2 <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 800033a:	797b      	ldrb	r3, [r7, #5]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d10a      	bne.n	8000356 <MGPIO_VidSetPinValue+0x42>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 8000340:	4b2e      	ldr	r3, [pc, #184]	; (80003fc <MGPIO_VidSetPinValue+0xe8>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	2101      	movs	r1, #1
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a2b      	ldr	r2, [pc, #172]	; (80003fc <MGPIO_VidSetPinValue+0xe8>)
 8000350:	430b      	orrs	r3, r1
 8000352:	60d3      	str	r3, [r2, #12]
		break;
 8000354:	e048      	b.n	80003e8 <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 8000356:	797b      	ldrb	r3, [r7, #5]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d145      	bne.n	80003e8 <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 800035c:	4b27      	ldr	r3, [pc, #156]	; (80003fc <MGPIO_VidSetPinValue+0xe8>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	2101      	movs	r1, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a23      	ldr	r2, [pc, #140]	; (80003fc <MGPIO_VidSetPinValue+0xe8>)
 800036e:	400b      	ands	r3, r1
 8000370:	60d3      	str	r3, [r2, #12]
		break;
 8000372:	e039      	b.n	80003e8 <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 8000374:	797b      	ldrb	r3, [r7, #5]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d10a      	bne.n	8000390 <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <MGPIO_VidSetPinValue+0xec>)
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	79ba      	ldrb	r2, [r7, #6]
 8000380:	2101      	movs	r1, #1
 8000382:	fa01 f202 	lsl.w	r2, r1, r2
 8000386:	4611      	mov	r1, r2
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <MGPIO_VidSetPinValue+0xec>)
 800038a:	430b      	orrs	r3, r1
 800038c:	60d3      	str	r3, [r2, #12]
		break;
 800038e:	e02d      	b.n	80003ec <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 8000390:	797b      	ldrb	r3, [r7, #5]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d12a      	bne.n	80003ec <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <MGPIO_VidSetPinValue+0xec>)
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	43d2      	mvns	r2, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a16      	ldr	r2, [pc, #88]	; (8000400 <MGPIO_VidSetPinValue+0xec>)
 80003a8:	400b      	ands	r3, r1
 80003aa:	60d3      	str	r3, [r2, #12]
		break;
 80003ac:	e01e      	b.n	80003ec <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 80003ae:	797b      	ldrb	r3, [r7, #5]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d10a      	bne.n	80003ca <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <MGPIO_VidSetPinValue+0xf0>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a10      	ldr	r2, [pc, #64]	; (8000404 <MGPIO_VidSetPinValue+0xf0>)
 80003c4:	430b      	orrs	r3, r1
 80003c6:	60d3      	str	r3, [r2, #12]
		break;
 80003c8:	e012      	b.n	80003f0 <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 80003ca:	797b      	ldrb	r3, [r7, #5]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d10f      	bne.n	80003f0 <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MGPIO_VidSetPinValue+0xf0>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a08      	ldr	r2, [pc, #32]	; (8000404 <MGPIO_VidSetPinValue+0xf0>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	60d3      	str	r3, [r2, #12]
		break;
 80003e6:	e003      	b.n	80003f0 <MGPIO_VidSetPinValue+0xdc>
		break;
 80003e8:	bf00      	nop
 80003ea:	e002      	b.n	80003f2 <MGPIO_VidSetPinValue+0xde>
		break;
 80003ec:	bf00      	nop
 80003ee:	e000      	b.n	80003f2 <MGPIO_VidSetPinValue+0xde>
		break;
 80003f0:	bf00      	nop
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40011000 	.word	0x40011000

08000408 <EXTI0_IRQHandler>:
{
		EXTI0_CallBack = ptr ;
}

void	EXTI0_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <EXTI0_IRQHandler+0x1c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4798      	blx	r3
	/*	Clear pending Bit		*/
	SET_BIT(EXTI -> PR , 0);
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI0_IRQHandler+0x20>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI0_IRQHandler+0x20>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6153      	str	r3, [r2, #20]
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000024 	.word	0x20000024
 8000428:	40010400 	.word	0x40010400

0800042c <MRCC_VidInit>:
#include "RCC_private.h"
#include "RCC_config.h"



void MRCC_VidInit ( void ) {
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	
	#if 	RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
	
			RCC_CR = 0x00010000	;		
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MRCC_VidInit+0x28>)
 8000432:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000436:	601a      	str	r2, [r3, #0]
			RCC_CFGR =0x00000001 ;
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <MRCC_VidInit+0x2c>)
 800043a:	2201      	movs	r2, #1
 800043c:	601a      	str	r2, [r3, #0]
	#if CLOCK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM

			SET_BIT(RCC_CR , 19 ) ; 
	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

			CLR_BIT(RCC_CR , 19 ) ; 
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <MRCC_VidInit+0x28>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <MRCC_VidInit+0x28>)
 8000444:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000448:	6013      	str	r3, [r2, #0]
	#else

		#warning " Wrong Clock Security System Configuration Choice "

	#endif
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40021004 	.word	0x40021004

0800045c <MRCC_VidEnablePeripheralClock>:





void MRCC_VidEnablePeripheralClock (u8 Copy_u8BusID , u8 Copy_u8Peripheral){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	460a      	mov	r2, r1
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	4613      	mov	r3, r2
 800046a:	71bb      	strb	r3, [r7, #6]
	
	if (Copy_u8Peripheral <=31 )
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	2b1f      	cmp	r3, #31
 8000470:	d82a      	bhi.n	80004c8 <MRCC_VidEnablePeripheralClock+0x6c>
	{
		
		switch (Copy_u8BusID)
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b02      	cmp	r3, #2
 8000476:	d01c      	beq.n	80004b2 <MRCC_VidEnablePeripheralClock+0x56>
 8000478:	2b02      	cmp	r3, #2
 800047a:	dc25      	bgt.n	80004c8 <MRCC_VidEnablePeripheralClock+0x6c>
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <MRCC_VidEnablePeripheralClock+0x2a>
 8000480:	2b01      	cmp	r3, #1
 8000482:	d00b      	beq.n	800049c <MRCC_VidEnablePeripheralClock+0x40>
	{
		/* Return Error */ 
		
	}		
	
}
 8000484:	e020      	b.n	80004c8 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_AHB   :	SET_BIT(RCC_AHBENR  , Copy_u8Peripheral ) ; break ;  
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MRCC_VidEnablePeripheralClock+0x78>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	79ba      	ldrb	r2, [r7, #6]
 800048c:	2101      	movs	r1, #1
 800048e:	fa01 f202 	lsl.w	r2, r1, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <MRCC_VidEnablePeripheralClock+0x78>)
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
 800049a:	e015      	b.n	80004c8 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_APB1  :	SET_BIT(RCC_APB1ENR , Copy_u8Peripheral ) ; break ;
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MRCC_VidEnablePeripheralClock+0x7c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	79ba      	ldrb	r2, [r7, #6]
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <MRCC_VidEnablePeripheralClock+0x7c>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e00a      	b.n	80004c8 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_APB2  :	SET_BIT(RCC_APB2ENR , Copy_u8Peripheral ) ; break ;
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MRCC_VidEnablePeripheralClock+0x80>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	2101      	movs	r1, #1
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <MRCC_VidEnablePeripheralClock+0x80>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6013      	str	r3, [r2, #0]
 80004c6:	bf00      	nop
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021014 	.word	0x40021014
 80004d8:	4002101c 	.word	0x4002101c
 80004dc:	40021018 	.word	0x40021018

080004e0 <main>:
void Task2Handler (void *parmeters) ;



void main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af02      	add	r7, sp, #8
	TaskHandle_t  HandleTask1  , HandleTask2  ;
	BaseType_t  Local_status ;



    MRCC_VidInit();
 80004e6:	f7ff ffa1 	bl	800042c <MRCC_VidInit>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOA_RCC);
 80004ea:	2102      	movs	r1, #2
 80004ec:	2002      	movs	r0, #2
 80004ee:	f7ff ffb5 	bl	800045c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, AFIO_RCC);
 80004f2:	2100      	movs	r1, #0
 80004f4:	2002      	movs	r0, #2
 80004f6:	f7ff ffb1 	bl	800045c <MRCC_VidEnablePeripheralClock>

    MGPIO_VidSetPinDirection(GPIOA, PIN1, OUT_SPEED_2MHZ_PP);
 80004fa:	2202      	movs	r2, #2
 80004fc:	2101      	movs	r1, #1
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff fe36 	bl	8000170 <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, PIN2, OUT_SPEED_2MHZ_PP);
 8000504:	2202      	movs	r2, #2
 8000506:	2102      	movs	r1, #2
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fe31 	bl	8000170 <MGPIO_VidSetPinDirection>


    Local_status  = xTaskCreate(Task1Handler, "Task1", 200, "Hello Ftom TAsk1 " , 2	,&HandleTask1 ) ;
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <main+0x9c>)
 800051a:	22c8      	movs	r2, #200	; 0xc8
 800051c:	4918      	ldr	r1, [pc, #96]	; (8000580 <main+0xa0>)
 800051e:	4819      	ldr	r0, [pc, #100]	; (8000584 <main+0xa4>)
 8000520:	f000 fbfc 	bl	8000d1c <xTaskCreate>
 8000524:	6178      	str	r0, [r7, #20]
	configASSERT((Local_status == pdPASS));
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d00a      	beq.n	8000542 <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000530:	f383 8811 	msr	BASEPRI, r3
 8000534:	f3bf 8f6f 	isb	sy
 8000538:	f3bf 8f4f 	dsb	sy
 800053c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800053e:	bf00      	nop
 8000540:	e7fe      	b.n	8000540 <main+0x60>

    Local_status  = xTaskCreate(Task2Handler, "Task2", 200, "Hello Ftom TAsk2 " , 2	,&HandleTask2 ) ;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2302      	movs	r3, #2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0xa8>)
 800054c:	22c8      	movs	r2, #200	; 0xc8
 800054e:	490f      	ldr	r1, [pc, #60]	; (800058c <main+0xac>)
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <main+0xb0>)
 8000552:	f000 fbe3 	bl	8000d1c <xTaskCreate>
 8000556:	6178      	str	r0, [r7, #20]
	configASSERT((Local_status == pdPASS));
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d00a      	beq.n	8000574 <main+0x94>
        __asm volatile
 800055e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000562:	f383 8811 	msr	BASEPRI, r3
 8000566:	f3bf 8f6f 	isb	sy
 800056a:	f3bf 8f4f 	dsb	sy
 800056e:	60fb      	str	r3, [r7, #12]
    }
 8000570:	bf00      	nop
 8000572:	e7fe      	b.n	8000572 <main+0x92>
	vTaskStartScheduler() ;
 8000574:	f000 fd70 	bl	8001058 <vTaskStartScheduler>

	while(1)
 8000578:	e7fe      	b.n	8000578 <main+0x98>
 800057a:	bf00      	nop
 800057c:	080028b0 	.word	0x080028b0
 8000580:	080028c4 	.word	0x080028c4
 8000584:	08000595 	.word	0x08000595
 8000588:	080028cc 	.word	0x080028cc
 800058c:	080028e0 	.word	0x080028e0
 8000590:	080005b1 	.word	0x080005b1

08000594 <Task1Handler>:

	}

}
void Task1Handler (void *parmeters)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

while(1)
{
	MGPIO_VidSetPinValue(GPIOA, PIN1, GPIO_HIGH) ;
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	2000      	movs	r0, #0
 80005a2:	f7ff feb7 	bl	8000314 <MGPIO_VidSetPinValue>
    vTaskDelay(pdMS_TO_TICKS(500));  // Delay for 500 ms
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 fd21 	bl	8000ff0 <vTaskDelay>
	MGPIO_VidSetPinValue(GPIOA, PIN1, GPIO_HIGH) ;
 80005ae:	e7f5      	b.n	800059c <Task1Handler+0x8>

080005b0 <Task2Handler>:

}


void Task2Handler (void *parmeters)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

while(1)
{

	MGPIO_VidSetPinValue(GPIOA, PIN2, GPIO_HIGH) ;
 80005b8:	2201      	movs	r2, #1
 80005ba:	2102      	movs	r1, #2
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff fea9 	bl	8000314 <MGPIO_VidSetPinValue>
    vTaskDelay(pdMS_TO_TICKS(500));  // Delay for 500 ms
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f000 fd13 	bl	8000ff0 <vTaskDelay>
	MGPIO_VidSetPinValue(GPIOA, PIN2, GPIO_HIGH) ;
 80005ca:	e7f5      	b.n	80005b8 <Task2Handler+0x8>

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	; (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	; (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fa:	f002 f913 	bl	8002824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff ff6f 	bl	80004e0 <main>

08000602 <LoopForever>:

LoopForever:
  b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000610:	08002908 	.word	0x08002908
  ldr r2, =_sbss
 8000614:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000618:	200015cc 	.word	0x200015cc

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>

0800061e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 0208 	add.w	r2, r3, #8
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f04f 32ff 	mov.w	r2, #4294967295
 8000636:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f103 0208 	add.w	r2, r3, #8
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f103 0208 	add.w	r2, r3, #8
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068a:	d103      	bne.n	8000694 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e00c      	b.n	80006ae <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3308      	adds	r3, #8
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e002      	b.n	80006a2 <vListInsert+0x2e>
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d2f6      	bcs.n	800069c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	6892      	ldr	r2, [r2, #8]
 80006fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	6852      	ldr	r2, [r2, #4]
 8000704:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d103      	bne.n	8000718 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10a      	bne.n	8000766 <xQueueGenericReset+0x2e>
        __asm volatile
 8000750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000754:	f383 8811 	msr	BASEPRI, r3
 8000758:	f3bf 8f6f 	isb	sy
 800075c:	f3bf 8f4f 	dsb	sy
 8000760:	60fb      	str	r3, [r7, #12]
    }
 8000762:	bf00      	nop
 8000764:	e7fe      	b.n	8000764 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d05d      	beq.n	8000828 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000770:	2b00      	cmp	r3, #0
 8000772:	d059      	beq.n	8000828 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800077c:	2100      	movs	r1, #0
 800077e:	fba3 2302 	umull	r2, r3, r3, r2
 8000782:	2b00      	cmp	r3, #0
 8000784:	d000      	beq.n	8000788 <xQueueGenericReset+0x50>
 8000786:	2101      	movs	r1, #1
 8000788:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800078a:	2b00      	cmp	r3, #0
 800078c:	d14c      	bne.n	8000828 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800078e:	f001 fdc7 	bl	8002320 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079a:	6939      	ldr	r1, [r7, #16]
 800079c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	441a      	add	r2, r3
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	2200      	movs	r2, #0
 80007ac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007be:	3b01      	subs	r3, #1
 80007c0:	6939      	ldr	r1, [r7, #16]
 80007c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007c4:	fb01 f303 	mul.w	r3, r1, r3
 80007c8:	441a      	add	r2, r3
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	22ff      	movs	r2, #255	; 0xff
 80007d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	22ff      	movs	r2, #255	; 0xff
 80007da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d114      	bne.n	800080e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d01a      	beq.n	8000822 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	3310      	adds	r3, #16
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 ff75 	bl	80016e0 <xTaskRemoveFromEventList>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d012      	beq.n	8000822 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <xQueueGenericReset+0x11c>)
 80007fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	f3bf 8f4f 	dsb	sy
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	e009      	b.n	8000822 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3310      	adds	r3, #16
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff03 	bl	800061e <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	3324      	adds	r3, #36	; 0x24
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fefe 	bl	800061e <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000822:	f001 fdad 	bl	8002380 <vPortExitCritical>
 8000826:	e001      	b.n	800082c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <xQueueGenericReset+0x110>
        __asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	60bb      	str	r3, [r7, #8]
    }
 8000844:	bf00      	nop
 8000846:	e7fe      	b.n	8000846 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000848:	697b      	ldr	r3, [r7, #20]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000ed04 	.word	0xe000ed04

08000858 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af02      	add	r7, sp, #8
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	4613      	mov	r3, r2
 8000864:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d02e      	beq.n	80008ce <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000870:	2100      	movs	r1, #0
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	fba3 2302 	umull	r2, r3, r3, r2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d000      	beq.n	8000880 <xQueueGenericCreate+0x28>
 800087e:	2101      	movs	r1, #1
 8000880:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000882:	2b00      	cmp	r3, #0
 8000884:	d123      	bne.n	80008ce <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800088e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000892:	d81c      	bhi.n	80008ce <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	fb02 f303 	mul.w	r3, r2, r3
 800089c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	3350      	adds	r3, #80	; 0x50
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fdf4 	bl	8002490 <pvPortMalloc>
 80008a8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d01c      	beq.n	80008ea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3350      	adds	r3, #80	; 0x50
 80008b8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	4613      	mov	r3, r2
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f814 	bl	80008f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80008cc:	e00d      	b.n	80008ea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10a      	bne.n	80008ea <xQueueGenericCreate+0x92>
        __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	613b      	str	r3, [r7, #16]
    }
 80008e6:	bf00      	nop
 80008e8:	e7fe      	b.n	80008e8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80008ea:	69fb      	ldr	r3, [r7, #28]
    }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000922:	2101      	movs	r1, #1
 8000924:	69b8      	ldr	r0, [r7, #24]
 8000926:	f7ff ff07 	bl	8000738 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10a      	bne.n	800096c <xQueueReceive+0x30>
        __asm volatile
 8000956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095a:	f383 8811 	msr	BASEPRI, r3
 800095e:	f3bf 8f6f 	isb	sy
 8000962:	f3bf 8f4f 	dsb	sy
 8000966:	623b      	str	r3, [r7, #32]
    }
 8000968:	bf00      	nop
 800096a:	e7fe      	b.n	800096a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <xQueueReceive+0x3e>
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <xQueueReceive+0x42>
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <xQueueReceive+0x44>
 800097e:	2300      	movs	r3, #0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <xQueueReceive+0x5e>
        __asm volatile
 8000984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000988:	f383 8811 	msr	BASEPRI, r3
 800098c:	f3bf 8f6f 	isb	sy
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	61fb      	str	r3, [r7, #28]
    }
 8000996:	bf00      	nop
 8000998:	e7fe      	b.n	8000998 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800099a:	f001 f8af 	bl	8001afc <xTaskGetSchedulerState>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <xQueueReceive+0x6e>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <xQueueReceive+0x72>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <xQueueReceive+0x74>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10a      	bne.n	80009ca <xQueueReceive+0x8e>
        __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	61bb      	str	r3, [r7, #24]
    }
 80009c6:	bf00      	nop
 80009c8:	e7fe      	b.n	80009c8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009ca:	f001 fca9 	bl	8002320 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d01f      	beq.n	8000a1a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009de:	f000 f88d 	bl	8000afc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00f      	beq.n	8000a12 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	3310      	adds	r3, #16
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fe72 	bl	80016e0 <xTaskRemoveFromEventList>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d007      	beq.n	8000a12 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <xQueueReceive+0x1bc>)
 8000a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a12:	f001 fcb5 	bl	8002380 <vPortExitCritical>
                return pdPASS;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e069      	b.n	8000aee <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a20:	f001 fcae 	bl	8002380 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000a24:	2300      	movs	r3, #0
 8000a26:	e062      	b.n	8000aee <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d106      	bne.n	8000a3c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 ff2a 	bl	800188c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a3c:	f001 fca0 	bl	8002380 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a40:	f000 fb5c 	bl	80010fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a44:	f001 fc6c 	bl	8002320 <vPortEnterCritical>
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d103      	bne.n	8000a5e <xQueueReceive+0x122>
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6a:	d103      	bne.n	8000a74 <xQueueReceive+0x138>
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a74:	f001 fc84 	bl	8002380 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a78:	1d3a      	adds	r2, r7, #4
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 ff19 	bl	80018b8 <xTaskCheckForTimeOut>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d123      	bne.n	8000ad4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a8e:	f000 f8ad 	bl	8000bec <prvIsQueueEmpty>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d017      	beq.n	8000ac8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	3324      	adds	r3, #36	; 0x24
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fdb3 	bl	800160c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aa8:	f000 f84e 	bl	8000b48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000aac:	f000 fb34 	bl	8001118 <xTaskResumeAll>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d189      	bne.n	80009ca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <xQueueReceive+0x1bc>)
 8000ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	f3bf 8f6f 	isb	sy
 8000ac6:	e780      	b.n	80009ca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aca:	f000 f83d 	bl	8000b48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ace:	f000 fb23 	bl	8001118 <xTaskResumeAll>
 8000ad2:	e77a      	b.n	80009ca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ad6:	f000 f837 	bl	8000b48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ada:	f000 fb1d 	bl	8001118 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ae0:	f000 f884 	bl	8000bec <prvIsQueueEmpty>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f43f af6f 	beq.w	80009ca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000aec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000ed04 	.word	0xe000ed04

08000afc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d018      	beq.n	8000b40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	441a      	add	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d303      	bcc.n	8000b30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68d9      	ldr	r1, [r3, #12]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	461a      	mov	r2, r3
 8000b3a:	6838      	ldr	r0, [r7, #0]
 8000b3c:	f001 fe96 	bl	800286c <memcpy>
    }
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b50:	f001 fbe6 	bl	8002320 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b5c:	e011      	b.n	8000b82 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3324      	adds	r3, #36	; 0x24
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fdb8 	bl	80016e0 <xTaskRemoveFromEventList>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b76:	f000 ff05 	bl	8001984 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dce9      	bgt.n	8000b5e <prvUnlockQueue+0x16>
 8000b8a:	e000      	b.n	8000b8e <prvUnlockQueue+0x46>
                    break;
 8000b8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	22ff      	movs	r2, #255	; 0xff
 8000b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000b96:	f001 fbf3 	bl	8002380 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b9a:	f001 fbc1 	bl	8002320 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ba4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ba6:	e011      	b.n	8000bcc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d012      	beq.n	8000bd6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3310      	adds	r3, #16
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fd93 	bl	80016e0 <xTaskRemoveFromEventList>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bc0:	f000 fee0 	bl	8001984 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dce9      	bgt.n	8000ba8 <prvUnlockQueue+0x60>
 8000bd4:	e000      	b.n	8000bd8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bd6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000be0:	f001 fbce 	bl	8002380 <vPortExitCritical>
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000bf4:	f001 fb94 	bl	8002320 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e001      	b.n	8000c0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c0a:	f001 fbb9 	bl	8002380 <vPortExitCritical>

    return xReturn;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10a      	bne.n	8000c42 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c30:	f383 8811 	msr	BASEPRI, r3
 8000c34:	f3bf 8f6f 	isb	sy
 8000c38:	f3bf 8f4f 	dsb	sy
 8000c3c:	60fb      	str	r3, [r7, #12]
    }
 8000c3e:	bf00      	nop
 8000c40:	e7fe      	b.n	8000c40 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d024      	beq.n	8000c92 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e01e      	b.n	8000c8c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <vQueueAddToRegistry+0x98>)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d105      	bne.n	8000c6a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <vQueueAddToRegistry+0x98>)
 8000c64:	4413      	add	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
                    break;
 8000c68:	e013      	b.n	8000c92 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10a      	bne.n	8000c86 <vQueueAddToRegistry+0x6e>
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <vQueueAddToRegistry+0x98>)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <vQueueAddToRegistry+0x98>)
 8000c82:	4413      	add	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d9dd      	bls.n	8000c4e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000028 	.word	0x20000028

08000cb4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000cc4:	f001 fb2c 	bl	8002320 <vPortEnterCritical>
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d103      	bne.n	8000cde <vQueueWaitForMessageRestricted+0x2a>
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cea:	d103      	bne.n	8000cf4 <vQueueWaitForMessageRestricted+0x40>
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000cf4:	f001 fb44 	bl	8002380 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d106      	bne.n	8000d0e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3324      	adds	r3, #36	; 0x24
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fca3 	bl	8001654 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff1a 	bl	8000b48 <prvUnlockQueue>
    }
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fbad 	bl	8002490 <pvPortMalloc>
 8000d36:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d013      	beq.n	8000d66 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d3e:	2058      	movs	r0, #88	; 0x58
 8000d40:	f001 fba6 	bl	8002490 <pvPortMalloc>
 8000d44:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d008      	beq.n	8000d5e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d4c:	2258      	movs	r2, #88	; 0x58
 8000d4e:	2100      	movs	r1, #0
 8000d50:	69f8      	ldr	r0, [r7, #28]
 8000d52:	f001 fd99 	bl	8002888 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d5c:	e005      	b.n	8000d6a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f001 fc50 	bl	8002604 <vPortFree>
 8000d64:	e001      	b.n	8000d6a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	2300      	movs	r3, #0
 8000d74:	9303      	str	r3, [sp, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f000 f80e 	bl	8000da8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d8c:	69f8      	ldr	r0, [r7, #28]
 8000d8e:	f000 f899 	bl	8000ec4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	e002      	b.n	8000d9e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d9e:	69bb      	ldr	r3, [r7, #24]
    }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	21a5      	movs	r1, #165	; 0xa5
 8000dc2:	f001 fd61 	bl	8002888 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	f023 0307 	bic.w	r3, r3, #7
 8000dde:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dee:	f383 8811 	msr	BASEPRI, r3
 8000df2:	f3bf 8f6f 	isb	sy
 8000df6:	f3bf 8f4f 	dsb	sy
 8000dfa:	617b      	str	r3, [r7, #20]
    }
 8000dfc:	bf00      	nop
 8000dfe:	e7fe      	b.n	8000dfe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01e      	beq.n	8000e44 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e012      	b.n	8000e32 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	4413      	add	r3, r2
 8000e12:	7819      	ldrb	r1, [r3, #0]
 8000e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	3334      	adds	r3, #52	; 0x34
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d9e9      	bls.n	8000e0c <prvInitialiseNewTask+0x64>
 8000e38:	e000      	b.n	8000e3c <prvInitialiseNewTask+0x94>
            {
                break;
 8000e3a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d90a      	bls.n	8000e60 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4e:	f383 8811 	msr	BASEPRI, r3
 8000e52:	f3bf 8f6f 	isb	sy
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	613b      	str	r3, [r7, #16]
    }
 8000e5c:	bf00      	nop
 8000e5e:	e7fe      	b.n	8000e5e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d901      	bls.n	8000e6a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e66:	2304      	movs	r3, #4
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e74:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e78:	3304      	adds	r3, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fbee 	bl	800065c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e82:	3318      	adds	r3, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fbe9 	bl	800065c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e92:	f1c3 0205 	rsb	r2, r3, #5
 8000e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	68f9      	ldr	r1, [r7, #12]
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f001 f949 	bl	800213c <pxPortInitialiseStack>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ecc:	f001 fa28 	bl	8002320 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ed0:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <prvAddNewTaskToReadyList+0x110>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a3f      	ldr	r2, [pc, #252]	; (8000fd4 <prvAddNewTaskToReadyList+0x110>)
 8000ed8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000eda:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <prvAddNewTaskToReadyList+0x114>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ee2:	4a3d      	ldr	r2, [pc, #244]	; (8000fd8 <prvAddNewTaskToReadyList+0x114>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <prvAddNewTaskToReadyList+0x110>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d110      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ef0:	f000 fd6c 	bl	80019cc <prvInitialiseTaskLists>
 8000ef4:	e00d      	b.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <prvAddNewTaskToReadyList+0x118>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d109      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <prvAddNewTaskToReadyList+0x114>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d802      	bhi.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f0c:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <prvAddNewTaskToReadyList+0x114>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f12:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <prvAddNewTaskToReadyList+0x11c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <prvAddNewTaskToReadyList+0x11c>)
 8000f1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <prvAddNewTaskToReadyList+0x11c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <prvAddNewTaskToReadyList+0x120>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <prvAddNewTaskToReadyList+0x120>)
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3a:	492b      	ldr	r1, [pc, #172]	; (8000fe8 <prvAddNewTaskToReadyList+0x124>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	3304      	adds	r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	3204      	adds	r2, #4
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1d1a      	adds	r2, r3, #4
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <prvAddNewTaskToReadyList+0x124>)
 8000f7a:	441a      	add	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f84:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <prvAddNewTaskToReadyList+0x124>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1c59      	adds	r1, r3, #1
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <prvAddNewTaskToReadyList+0x124>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000fa2:	f001 f9ed 	bl	8002380 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <prvAddNewTaskToReadyList+0x118>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00e      	beq.n	8000fcc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <prvAddNewTaskToReadyList+0x114>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <prvAddNewTaskToReadyList+0x128>)
 8000fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000140 	.word	0x20000140
 8000fd8:	20000068 	.word	0x20000068
 8000fdc:	2000014c 	.word	0x2000014c
 8000fe0:	2000015c 	.word	0x2000015c
 8000fe4:	20000148 	.word	0x20000148
 8000fe8:	2000006c 	.word	0x2000006c
 8000fec:	e000ed04 	.word	0xe000ed04

08000ff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d017      	beq.n	8001032 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <vTaskDelay+0x60>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00a      	beq.n	8001020 <vTaskDelay+0x30>
        __asm volatile
 800100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100e:	f383 8811 	msr	BASEPRI, r3
 8001012:	f3bf 8f6f 	isb	sy
 8001016:	f3bf 8f4f 	dsb	sy
 800101a:	60bb      	str	r3, [r7, #8]
    }
 800101c:	bf00      	nop
 800101e:	e7fe      	b.n	800101e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001020:	f000 f86c 	bl	80010fc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001024:	2100      	movs	r1, #0
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fd86 	bl	8001b38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800102c:	f000 f874 	bl	8001118 <xTaskResumeAll>
 8001030:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d107      	bne.n	8001048 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <vTaskDelay+0x64>)
 800103a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000168 	.word	0x20000168
 8001054:	e000ed04 	.word	0xe000ed04

08001058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <vTaskStartScheduler+0x88>)
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	2282      	movs	r2, #130	; 0x82
 800106a:	491e      	ldr	r1, [pc, #120]	; (80010e4 <vTaskStartScheduler+0x8c>)
 800106c:	481e      	ldr	r0, [pc, #120]	; (80010e8 <vTaskStartScheduler+0x90>)
 800106e:	f7ff fe55 	bl	8000d1c <xTaskCreate>
 8001072:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d102      	bne.n	8001080 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800107a:	f000 fddd 	bl	8001c38 <xTimerCreateTimerTask>
 800107e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d116      	bne.n	80010b4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108a:	f383 8811 	msr	BASEPRI, r3
 800108e:	f3bf 8f6f 	isb	sy
 8001092:	f3bf 8f4f 	dsb	sy
 8001096:	60bb      	str	r3, [r7, #8]
    }
 8001098:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <vTaskStartScheduler+0x94>)
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <vTaskStartScheduler+0x98>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <vTaskStartScheduler+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80010ae:	f001 f8c5 	bl	800223c <xPortStartScheduler>
 80010b2:	e00e      	b.n	80010d2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ba:	d10a      	bne.n	80010d2 <vTaskStartScheduler+0x7a>
        __asm volatile
 80010bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010c0:	f383 8811 	msr	BASEPRI, r3
 80010c4:	f3bf 8f6f 	isb	sy
 80010c8:	f3bf 8f4f 	dsb	sy
 80010cc:	607b      	str	r3, [r7, #4]
    }
 80010ce:	bf00      	nop
 80010d0:	e7fe      	b.n	80010d0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <vTaskStartScheduler+0xa0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000164 	.word	0x20000164
 80010e4:	080028e8 	.word	0x080028e8
 80010e8:	0800199d 	.word	0x0800199d
 80010ec:	20000160 	.word	0x20000160
 80010f0:	2000014c 	.word	0x2000014c
 80010f4:	20000144 	.word	0x20000144
 80010f8:	20000000 	.word	0x20000000

080010fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <vTaskSuspendAll+0x18>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <vTaskSuspendAll+0x18>)
 8001108:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000168 	.word	0x20000168

08001118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001126:	4b71      	ldr	r3, [pc, #452]	; (80012ec <xTaskResumeAll+0x1d4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10a      	bne.n	8001144 <xTaskResumeAll+0x2c>
        __asm volatile
 800112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001132:	f383 8811 	msr	BASEPRI, r3
 8001136:	f3bf 8f6f 	isb	sy
 800113a:	f3bf 8f4f 	dsb	sy
 800113e:	607b      	str	r3, [r7, #4]
    }
 8001140:	bf00      	nop
 8001142:	e7fe      	b.n	8001142 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001144:	f001 f8ec 	bl	8002320 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001148:	4b68      	ldr	r3, [pc, #416]	; (80012ec <xTaskResumeAll+0x1d4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a67      	ldr	r2, [pc, #412]	; (80012ec <xTaskResumeAll+0x1d4>)
 8001150:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001152:	4b66      	ldr	r3, [pc, #408]	; (80012ec <xTaskResumeAll+0x1d4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f040 80c0 	bne.w	80012dc <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800115c:	4b64      	ldr	r3, [pc, #400]	; (80012f0 <xTaskResumeAll+0x1d8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80bb 	beq.w	80012dc <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001166:	e08a      	b.n	800127e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001168:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <xTaskResumeAll+0x1dc>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	6a12      	ldr	r2, [r2, #32]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	69d2      	ldr	r2, [r2, #28]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3318      	adds	r3, #24
 8001192:	429a      	cmp	r2, r3
 8001194:	d103      	bne.n	800119e <xTaskResumeAll+0x86>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2200      	movs	r2, #0
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	68d2      	ldr	r2, [r2, #12]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	6892      	ldr	r2, [r2, #8]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3304      	adds	r3, #4
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d103      	bne.n	80011dc <xTaskResumeAll+0xc4>
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2201      	movs	r2, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <xTaskResumeAll+0x1e0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <xTaskResumeAll+0x1e0>)
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001202:	493e      	ldr	r1, [pc, #248]	; (80012fc <xTaskResumeAll+0x1e4>)
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	3204      	adds	r2, #4
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	1d1a      	adds	r2, r3, #4
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <xTaskResumeAll+0x1e4>)
 8001242:	441a      	add	r2, r3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	615a      	str	r2, [r3, #20]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	492b      	ldr	r1, [pc, #172]	; (80012fc <xTaskResumeAll+0x1e4>)
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1c59      	adds	r1, r3, #1
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <xTaskResumeAll+0x1e4>)
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4403      	add	r3, r0
 8001268:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <xTaskResumeAll+0x1e8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	429a      	cmp	r2, r3
 8001276:	d302      	bcc.n	800127e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <xTaskResumeAll+0x1ec>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <xTaskResumeAll+0x1dc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f af70 	bne.w	8001168 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800128e:	f000 fc1b 	bl	8001ac8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <xTaskResumeAll+0x1f0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800129e:	f000 f845 	bl	800132c <xTaskIncrementTick>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <xTaskResumeAll+0x1ec>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f1      	bne.n	800129e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <xTaskResumeAll+0x1f0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <xTaskResumeAll+0x1ec>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <xTaskResumeAll+0x1f4>)
 80012ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80012dc:	f001 f850 	bl	8002380 <vPortExitCritical>

    return xAlreadyYielded;
 80012e0:	69bb      	ldr	r3, [r7, #24]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000168 	.word	0x20000168
 80012f0:	20000140 	.word	0x20000140
 80012f4:	20000100 	.word	0x20000100
 80012f8:	20000148 	.word	0x20000148
 80012fc:	2000006c 	.word	0x2000006c
 8001300:	20000068 	.word	0x20000068
 8001304:	20000154 	.word	0x20000154
 8001308:	20000150 	.word	0x20000150
 800130c:	e000ed04 	.word	0xe000ed04

08001310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <xTaskGetTickCount+0x18>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000144 	.word	0x20000144

0800132c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <xTaskIncrementTick+0x200>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80ec 	bne.w	8001518 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001340:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <xTaskIncrementTick+0x204>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <xTaskIncrementTick+0x204>)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d120      	bne.n	8001396 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001354:	4b77      	ldr	r3, [pc, #476]	; (8001534 <xTaskIncrementTick+0x208>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <xTaskIncrementTick+0x48>
        __asm volatile
 800135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001362:	f383 8811 	msr	BASEPRI, r3
 8001366:	f3bf 8f6f 	isb	sy
 800136a:	f3bf 8f4f 	dsb	sy
 800136e:	607b      	str	r3, [r7, #4]
    }
 8001370:	bf00      	nop
 8001372:	e7fe      	b.n	8001372 <xTaskIncrementTick+0x46>
 8001374:	4b6f      	ldr	r3, [pc, #444]	; (8001534 <xTaskIncrementTick+0x208>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <xTaskIncrementTick+0x20c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6d      	ldr	r2, [pc, #436]	; (8001534 <xTaskIncrementTick+0x208>)
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4a6d      	ldr	r2, [pc, #436]	; (8001538 <xTaskIncrementTick+0x20c>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <xTaskIncrementTick+0x210>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a6b      	ldr	r2, [pc, #428]	; (800153c <xTaskIncrementTick+0x210>)
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	f000 fb99 	bl	8001ac8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001396:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <xTaskIncrementTick+0x214>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a3a      	ldr	r2, [r7, #32]
 800139c:	429a      	cmp	r2, r3
 800139e:	f0c0 80a6 	bcc.w	80014ee <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013a2:	4b64      	ldr	r3, [pc, #400]	; (8001534 <xTaskIncrementTick+0x208>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d104      	bne.n	80013b6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013ac:	4b64      	ldr	r3, [pc, #400]	; (8001540 <xTaskIncrementTick+0x214>)
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	601a      	str	r2, [r3, #0]
                    break;
 80013b4:	e09b      	b.n	80014ee <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <xTaskIncrementTick+0x208>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80013c6:	6a3a      	ldr	r2, [r7, #32]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d203      	bcs.n	80013d6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <xTaskIncrementTick+0x214>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80013d4:	e08b      	b.n	80014ee <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	68d2      	ldr	r2, [r2, #12]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	6892      	ldr	r2, [r2, #8]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3304      	adds	r3, #4
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d103      	bne.n	8001404 <xTaskIncrementTick+0xd8>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1e5a      	subs	r2, r3, #1
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01e      	beq.n	800145a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	6a12      	ldr	r2, [r2, #32]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	69d2      	ldr	r2, [r2, #28]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	3318      	adds	r3, #24
 800143e:	429a      	cmp	r2, r3
 8001440:	d103      	bne.n	800144a <xTaskIncrementTick+0x11e>
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	2201      	movs	r2, #1
 8001460:	409a      	lsls	r2, r3
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <xTaskIncrementTick+0x218>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4313      	orrs	r3, r2
 8001468:	4a36      	ldr	r2, [pc, #216]	; (8001544 <xTaskIncrementTick+0x218>)
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <xTaskIncrementTick+0x21c>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3304      	adds	r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	3204      	adds	r2, #4
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	1d1a      	adds	r2, r3, #4
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <xTaskIncrementTick+0x21c>)
 80014b0:	441a      	add	r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ba:	4923      	ldr	r1, [pc, #140]	; (8001548 <xTaskIncrementTick+0x21c>)
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	1c59      	adds	r1, r3, #1
 80014ca:	481f      	ldr	r0, [pc, #124]	; (8001548 <xTaskIncrementTick+0x21c>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4403      	add	r3, r0
 80014d6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <xTaskIncrementTick+0x220>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	f67f af5d 	bls.w	80013a2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014ec:	e759      	b.n	80013a2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <xTaskIncrementTick+0x220>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f4:	4914      	ldr	r1, [pc, #80]	; (8001548 <xTaskIncrementTick+0x21c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d901      	bls.n	800150a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <xTaskIncrementTick+0x224>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
 8001516:	e004      	b.n	8001522 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <xTaskIncrementTick+0x228>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <xTaskIncrementTick+0x228>)
 8001520:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001524:	4618      	mov	r0, r3
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000168 	.word	0x20000168
 8001530:	20000144 	.word	0x20000144
 8001534:	200000f8 	.word	0x200000f8
 8001538:	200000fc 	.word	0x200000fc
 800153c:	20000158 	.word	0x20000158
 8001540:	20000160 	.word	0x20000160
 8001544:	20000148 	.word	0x20000148
 8001548:	2000006c 	.word	0x2000006c
 800154c:	20000068 	.word	0x20000068
 8001550:	20000154 	.word	0x20000154
 8001554:	20000150 	.word	0x20000150

08001558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <vTaskSwitchContext+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <vTaskSwitchContext+0xa4>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800156c:	e03f      	b.n	80015ee <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <vTaskSwitchContext+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <vTaskSwitchContext+0xa8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	f1c3 031f 	rsb	r3, r3, #31
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	491e      	ldr	r1, [pc, #120]	; (8001604 <vTaskSwitchContext+0xac>)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10a      	bne.n	80015b4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	607b      	str	r3, [r7, #4]
    }
 80015b0:	bf00      	nop
 80015b2:	e7fe      	b.n	80015b2 <vTaskSwitchContext+0x5a>
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <vTaskSwitchContext+0xac>)
 80015c0:	4413      	add	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	3308      	adds	r3, #8
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d104      	bne.n	80015e4 <vTaskSwitchContext+0x8c>
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <vTaskSwitchContext+0xb0>)
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000168 	.word	0x20000168
 80015fc:	20000154 	.word	0x20000154
 8001600:	20000148 	.word	0x20000148
 8001604:	2000006c 	.word	0x2000006c
 8001608:	20000068 	.word	0x20000068

0800160c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10a      	bne.n	8001632 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001620:	f383 8811 	msr	BASEPRI, r3
 8001624:	f3bf 8f6f 	isb	sy
 8001628:	f3bf 8f4f 	dsb	sy
 800162c:	60fb      	str	r3, [r7, #12]
    }
 800162e:	bf00      	nop
 8001630:	e7fe      	b.n	8001630 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <vTaskPlaceOnEventList+0x44>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3318      	adds	r3, #24
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff f81a 	bl	8000674 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001640:	2101      	movs	r1, #1
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f000 fa78 	bl	8001b38 <prvAddCurrentTaskToDelayedList>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000068 	.word	0x20000068

08001654 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10a      	bne.n	800167c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166a:	f383 8811 	msr	BASEPRI, r3
 800166e:	f3bf 8f6f 	isb	sy
 8001672:	f3bf 8f4f 	dsb	sy
 8001676:	613b      	str	r3, [r7, #16]
    }
 8001678:	bf00      	nop
 800167a:	e7fe      	b.n	800167a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <vTaskPlaceOnEventListRestricted+0x88>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	61da      	str	r2, [r3, #28]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <vTaskPlaceOnEventListRestricted+0x88>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	6892      	ldr	r2, [r2, #8]
 8001692:	621a      	str	r2, [r3, #32]
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <vTaskPlaceOnEventListRestricted+0x88>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	3218      	adds	r2, #24
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <vTaskPlaceOnEventListRestricted+0x88>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f103 0218 	add.w	r2, r3, #24
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <vTaskPlaceOnEventListRestricted+0x88>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f000 fa33 	bl	8001b38 <prvAddCurrentTaskToDelayedList>
    }
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000068 	.word	0x20000068

080016e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	60fb      	str	r3, [r7, #12]
    }
 8001708:	bf00      	nop
 800170a:	e7fe      	b.n	800170a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	6a3a      	ldr	r2, [r7, #32]
 8001718:	6a12      	ldr	r2, [r2, #32]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	69d2      	ldr	r2, [r2, #28]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	3318      	adds	r3, #24
 800172e:	429a      	cmp	r2, r3
 8001730:	d103      	bne.n	800173a <xTaskRemoveFromEventList+0x5a>
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800174a:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <xTaskRemoveFromEventList+0x194>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d15e      	bne.n	8001810 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	68d2      	ldr	r2, [r2, #12]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	6a3a      	ldr	r2, [r7, #32]
 8001768:	6892      	ldr	r2, [r2, #8]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	3304      	adds	r3, #4
 8001774:	429a      	cmp	r2, r3
 8001776:	d103      	bne.n	8001780 <xTaskRemoveFromEventList+0xa0>
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1e5a      	subs	r2, r3, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	2201      	movs	r2, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <xTaskRemoveFromEventList+0x198>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	4a36      	ldr	r2, [pc, #216]	; (8001878 <xTaskRemoveFromEventList+0x198>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	4935      	ldr	r1, [pc, #212]	; (800187c <xTaskRemoveFromEventList+0x19c>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3304      	adds	r3, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	6a3a      	ldr	r2, [r7, #32]
 80017cc:	3204      	adds	r2, #4
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	1d1a      	adds	r2, r3, #4
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4a25      	ldr	r2, [pc, #148]	; (800187c <xTaskRemoveFromEventList+0x19c>)
 80017e6:	441a      	add	r2, r3
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f0:	4922      	ldr	r1, [pc, #136]	; (800187c <xTaskRemoveFromEventList+0x19c>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	481e      	ldr	r0, [pc, #120]	; (800187c <xTaskRemoveFromEventList+0x19c>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4403      	add	r3, r0
 800180c:	6019      	str	r1, [r3, #0]
 800180e:	e01b      	b.n	8001848 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <xTaskRemoveFromEventList+0x1a0>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	61da      	str	r2, [r3, #28]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	621a      	str	r2, [r3, #32]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	3218      	adds	r2, #24
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f103 0218 	add.w	r2, r3, #24
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <xTaskRemoveFromEventList+0x1a0>)
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <xTaskRemoveFromEventList+0x1a0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <xTaskRemoveFromEventList+0x1a0>)
 8001846:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <xTaskRemoveFromEventList+0x1a4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	429a      	cmp	r2, r3
 8001854:	d905      	bls.n	8001862 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001856:	2301      	movs	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <xTaskRemoveFromEventList+0x1a8>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e001      	b.n	8001866 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001868:	4618      	mov	r0, r3
 800186a:	372c      	adds	r7, #44	; 0x2c
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000168 	.word	0x20000168
 8001878:	20000148 	.word	0x20000148
 800187c:	2000006c 	.word	0x2000006c
 8001880:	20000100 	.word	0x20000100
 8001884:	20000068 	.word	0x20000068
 8001888:	20000154 	.word	0x20000154

0800188c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <vTaskInternalSetTimeOutState+0x24>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <vTaskInternalSetTimeOutState+0x28>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	605a      	str	r2, [r3, #4]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000158 	.word	0x20000158
 80018b4:	20000144 	.word	0x20000144

080018b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80018c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	f3bf 8f4f 	dsb	sy
 80018d8:	613b      	str	r3, [r7, #16]
    }
 80018da:	bf00      	nop
 80018dc:	e7fe      	b.n	80018dc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80018e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	60fb      	str	r3, [r7, #12]
    }
 80018f6:	bf00      	nop
 80018f8:	e7fe      	b.n	80018f8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80018fa:	f000 fd11 	bl	8002320 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <xTaskCheckForTimeOut+0xc4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d102      	bne.n	800191e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	e026      	b.n	800196c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <xTaskCheckForTimeOut+0xc8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d00a      	beq.n	8001940 <xTaskCheckForTimeOut+0x88>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	429a      	cmp	r2, r3
 8001932:	d305      	bcc.n	8001940 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001934:	2301      	movs	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e015      	b.n	800196c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20b      	bcs.n	8001962 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff98 	bl	800188c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	e004      	b.n	800196c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800196c:	f000 fd08 	bl	8002380 <vPortExitCritical>

    return xReturn;
 8001970:	69fb      	ldr	r3, [r7, #28]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000144 	.word	0x20000144
 8001980:	20000158 	.word	0x20000158

08001984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <vTaskMissedYield+0x14>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000154 	.word	0x20000154

0800199c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80019a4:	f000 f852 	bl	8001a4c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <prvIdleTask+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d9f9      	bls.n	80019a4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <prvIdleTask+0x2c>)
 80019b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80019c0:	e7f0      	b.n	80019a4 <prvIdleTask+0x8>
 80019c2:	bf00      	nop
 80019c4:	2000006c 	.word	0x2000006c
 80019c8:	e000ed04 	.word	0xe000ed04

080019cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e00c      	b.n	80019f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <prvInitialiseTaskLists+0x60>)
 80019e4:	4413      	add	r3, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fe19 	bl	800061e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d9ef      	bls.n	80019d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <prvInitialiseTaskLists+0x64>)
 80019fa:	f7fe fe10 	bl	800061e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <prvInitialiseTaskLists+0x68>)
 8001a00:	f7fe fe0d 	bl	800061e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <prvInitialiseTaskLists+0x6c>)
 8001a06:	f7fe fe0a 	bl	800061e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001a0a:	480c      	ldr	r0, [pc, #48]	; (8001a3c <prvInitialiseTaskLists+0x70>)
 8001a0c:	f7fe fe07 	bl	800061e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <prvInitialiseTaskLists+0x74>)
 8001a12:	f7fe fe04 	bl	800061e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <prvInitialiseTaskLists+0x78>)
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <prvInitialiseTaskLists+0x64>)
 8001a1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <prvInitialiseTaskLists+0x7c>)
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <prvInitialiseTaskLists+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000006c 	.word	0x2000006c
 8001a30:	200000d0 	.word	0x200000d0
 8001a34:	200000e4 	.word	0x200000e4
 8001a38:	20000100 	.word	0x20000100
 8001a3c:	20000114 	.word	0x20000114
 8001a40:	2000012c 	.word	0x2000012c
 8001a44:	200000f8 	.word	0x200000f8
 8001a48:	200000fc 	.word	0x200000fc

08001a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a52:	e019      	b.n	8001a88 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001a54:	f000 fc64 	bl	8002320 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <prvCheckTasksWaitingTermination+0x50>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3304      	adds	r3, #4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fe3d 	bl	80006e4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <prvCheckTasksWaitingTermination+0x54>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <prvCheckTasksWaitingTermination+0x54>)
 8001a72:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <prvCheckTasksWaitingTermination+0x58>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <prvCheckTasksWaitingTermination+0x58>)
 8001a7c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001a7e:	f000 fc7f 	bl	8002380 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f810 	bl	8001aa8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <prvCheckTasksWaitingTermination+0x58>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e1      	bne.n	8001a54 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000114 	.word	0x20000114
 8001aa0:	20000140 	.word	0x20000140
 8001aa4:	20000128 	.word	0x20000128

08001aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fda5 	bl	8002604 <vPortFree>
            vPortFree( pxTCB );
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fda2 	bl	8002604 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <prvResetNextTaskUnblockTime+0x2c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d104      	bne.n	8001ae0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <prvResetNextTaskUnblockTime+0x30>)
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ade:	e005      	b.n	8001aec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <prvResetNextTaskUnblockTime+0x2c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <prvResetNextTaskUnblockTime+0x30>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	200000f8 	.word	0x200000f8
 8001af8:	20000160 	.word	0x20000160

08001afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <xTaskGetSchedulerState+0x34>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	e008      	b.n	8001b22 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <xTaskGetSchedulerState+0x38>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	e001      	b.n	8001b22 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001b22:	687b      	ldr	r3, [r7, #4]
    }
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000014c 	.word	0x2000014c
 8001b34:	20000168 	.word	0x20000168

08001b38 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fdc8 	bl	80006e4 <uxListRemove>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2201      	movs	r2, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d124      	bne.n	8001bc4 <prvAddCurrentTaskToDelayedList+0x8c>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	6892      	ldr	r2, [r2, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	3204      	adds	r2, #4
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1d1a      	adds	r2, r3, #4
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001bc2:	e026      	b.n	8001c12 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d209      	bcs.n	8001bf0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3304      	adds	r3, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f7fe fd43 	bl	8000674 <vListInsert>
}
 8001bee:	e010      	b.n	8001c12 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7fe fd39 	bl	8000674 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d202      	bcs.n	8001c12 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000144 	.word	0x20000144
 8001c20:	20000068 	.word	0x20000068
 8001c24:	20000148 	.word	0x20000148
 8001c28:	2000012c 	.word	0x2000012c
 8001c2c:	200000fc 	.word	0x200000fc
 8001c30:	200000f8 	.word	0x200000f8
 8001c34:	20000160 	.word	0x20000160

08001c38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001c42:	f000 fa45 	bl	80020d0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <xTimerCreateTimerTask+0x54>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <xTimerCreateTimerTask+0x58>)
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2302      	movs	r3, #2
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c5c:	490d      	ldr	r1, [pc, #52]	; (8001c94 <xTimerCreateTimerTask+0x5c>)
 8001c5e:	480e      	ldr	r0, [pc, #56]	; (8001c98 <xTimerCreateTimerTask+0x60>)
 8001c60:	f7ff f85c 	bl	8000d1c <xTaskCreate>
 8001c64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10a      	bne.n	8001c82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	603b      	str	r3, [r7, #0]
    }
 8001c7e:	bf00      	nop
 8001c80:	e7fe      	b.n	8001c80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001c82:	687b      	ldr	r3, [r7, #4]
    }
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000019c 	.word	0x2000019c
 8001c90:	200001a0 	.word	0x200001a0
 8001c94:	080028f0 	.word	0x080028f0
 8001c98:	08001d41 	.word	0x08001d41

08001c9c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ca8:	e008      	b.n	8001cbc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	18d1      	adds	r1, r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f8db 	bl	8001e84 <prvInsertTimerInActiveList>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ea      	bne.n	8001caa <prvReloadTimer+0xe>
        }
    }
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <prvProcessExpiredTimer+0x5c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fcf3 	bl	80006e4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff ffc3 	bl	8001c9c <prvReloadTimer>
 8001d16:	e008      	b.n	8001d2a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	4798      	blx	r3
    }
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000194 	.word	0x20000194

08001d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f857 	bl	8001e00 <prvGetNextExpireTime>
 8001d52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4619      	mov	r1, r3
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f803 	bl	8001d64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001d5e:	f000 f8d3 	bl	8001f08 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d62:	e7f1      	b.n	8001d48 <prvTimerTask+0x8>

08001d64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001d6e:	f7ff f9c5 	bl	80010fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f864 	bl	8001e44 <prvSampleTimeNow>
 8001d7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d130      	bne.n	8001de6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <prvProcessTimerOrBlockTask+0x3c>
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d806      	bhi.n	8001da0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001d92:	f7ff f9c1 	bl	8001118 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffa1 	bl	8001ce0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001d9e:	e024      	b.n	8001dea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <prvProcessTimerOrBlockTask+0x90>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <prvProcessTimerOrBlockTask+0x50>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <prvProcessTimerOrBlockTask+0x52>
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <prvProcessTimerOrBlockTask+0x94>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe ff75 	bl	8000cb4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001dca:	f7ff f9a5 	bl	8001118 <xTaskResumeAll>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10a      	bne.n	8001dea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <prvProcessTimerOrBlockTask+0x98>)
 8001dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	f3bf 8f6f 	isb	sy
    }
 8001de4:	e001      	b.n	8001dea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001de6:	f7ff f997 	bl	8001118 <xTaskResumeAll>
    }
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000198 	.word	0x20000198
 8001df8:	2000019c 	.word	0x2000019c
 8001dfc:	e000ed04 	.word	0xe000ed04

08001e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <prvGetNextExpireTime+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <prvGetNextExpireTime+0x16>
 8001e12:	2201      	movs	r2, #1
 8001e14:	e000      	b.n	8001e18 <prvGetNextExpireTime+0x18>
 8001e16:	2200      	movs	r2, #0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <prvGetNextExpireTime+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e001      	b.n	8001e34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001e34:	68fb      	ldr	r3, [r7, #12]
    }
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000194 	.word	0x20000194

08001e44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001e4c:	f7ff fa60 	bl	8001310 <xTaskGetTickCount>
 8001e50:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <prvSampleTimeNow+0x3c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d205      	bcs.n	8001e68 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001e5c:	f000 f912 	bl	8002084 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e002      	b.n	8001e6e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <prvSampleTimeNow+0x3c>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001e74:	68fb      	ldr	r3, [r7, #12]
    }
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200001a4 	.word	0x200001a4

08001e84 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d812      	bhi.n	8001ed0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d302      	bcc.n	8001ebe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e01b      	b.n	8001ef6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <prvInsertTimerInActiveList+0x7c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f7fe fbd3 	bl	8000674 <vListInsert>
 8001ece:	e012      	b.n	8001ef6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d206      	bcs.n	8001ee6 <prvInsertTimerInActiveList+0x62>
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d302      	bcc.n	8001ee6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e007      	b.n	8001ef6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <prvInsertTimerInActiveList+0x80>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7fe fbbf 	bl	8000674 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001ef6:	697b      	ldr	r3, [r7, #20]
    }
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000198 	.word	0x20000198
 8001f04:	20000194 	.word	0x20000194

08001f08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f0e:	e0a6      	b.n	800205e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f2c0 80a2 	blt.w	800205c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fbdb 	bl	80006e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff87 	bl	8001e44 <prvSampleTimeNow>
 8001f36:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	f200 808e 	bhi.w	800205e <prvProcessReceivedCommands+0x156>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <prvProcessReceivedCommands+0x40>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f6d 	.word	0x08001f6d
 8001f4c:	08001f6d 	.word	0x08001f6d
 8001f50:	08001fd5 	.word	0x08001fd5
 8001f54:	08001fe9 	.word	0x08001fe9
 8001f58:	08002033 	.word	0x08002033
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f6d 	.word	0x08001f6d
 8001f64:	08001fd5 	.word	0x08001fd5
 8001f68:	08001fe9 	.word	0x08001fe9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	18d1      	adds	r1, r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	69f8      	ldr	r0, [r7, #28]
 8001f8c:	f7ff ff7a 	bl	8001e84 <prvInsertTimerInActiveList>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4413      	add	r3, r2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	69f8      	ldr	r0, [r7, #28]
 8001fb2:	f7ff fe73 	bl	8001c9c <prvReloadTimer>
 8001fb6:	e008      	b.n	8001fca <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	69f8      	ldr	r0, [r7, #28]
 8001fd0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001fd2:	e044      	b.n	800205e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001fe6:	e03a      	b.n	800205e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	617b      	str	r3, [r7, #20]
    }
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	18d1      	adds	r1, r2, r3
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	69f8      	ldr	r0, [r7, #28]
 800202c:	f7ff ff2a 	bl	8001e84 <prvInsertTimerInActiveList>
                        break;
 8002030:	e015      	b.n	800205e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d103      	bne.n	8002048 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002040:	69f8      	ldr	r0, [r7, #28]
 8002042:	f000 fadf 	bl	8002604 <vPortFree>
 8002046:	e00a      	b.n	800205e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800205a:	e000      	b.n	800205e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800205c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <prvProcessReceivedCommands+0x178>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f107 0108 	add.w	r1, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fc67 	bl	800093c <xQueueReceive>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f af4d 	bne.w	8001f10 <prvProcessReceivedCommands+0x8>
        }
    }
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000019c 	.word	0x2000019c

08002084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800208a:	e009      	b.n	80020a0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <prvSwitchTimerLists+0x44>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002096:	f04f 31ff 	mov.w	r1, #4294967295
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	f7ff fe20 	bl	8001ce0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <prvSwitchTimerLists+0x44>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <prvSwitchTimerLists+0x44>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <prvSwitchTimerLists+0x48>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <prvSwitchTimerLists+0x44>)
 80020b6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <prvSwitchTimerLists+0x48>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
    }
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000194 	.word	0x20000194
 80020cc:	20000198 	.word	0x20000198

080020d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80020d4:	f000 f924 	bl	8002320 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <prvCheckForValidListAndQueue+0x54>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d11d      	bne.n	800211c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80020e0:	4811      	ldr	r0, [pc, #68]	; (8002128 <prvCheckForValidListAndQueue+0x58>)
 80020e2:	f7fe fa9c 	bl	800061e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80020e6:	4811      	ldr	r0, [pc, #68]	; (800212c <prvCheckForValidListAndQueue+0x5c>)
 80020e8:	f7fe fa99 	bl	800061e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <prvCheckForValidListAndQueue+0x60>)
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <prvCheckForValidListAndQueue+0x58>)
 80020f0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <prvCheckForValidListAndQueue+0x64>)
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <prvCheckForValidListAndQueue+0x5c>)
 80020f6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80020f8:	2200      	movs	r2, #0
 80020fa:	210c      	movs	r1, #12
 80020fc:	200a      	movs	r0, #10
 80020fe:	f7fe fbab 	bl	8000858 <xQueueGenericCreate>
 8002102:	4603      	mov	r3, r0
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <prvCheckForValidListAndQueue+0x54>)
 8002106:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <prvCheckForValidListAndQueue+0x54>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <prvCheckForValidListAndQueue+0x54>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4908      	ldr	r1, [pc, #32]	; (8002138 <prvCheckForValidListAndQueue+0x68>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fd7e 	bl	8000c18 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800211c:	f000 f930 	bl	8002380 <vPortExitCritical>
    }
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2000019c 	.word	0x2000019c
 8002128:	2000016c 	.word	0x2000016c
 800212c:	20000180 	.word	0x20000180
 8002130:	20000194 	.word	0x20000194
 8002134:	20000198 	.word	0x20000198
 8002138:	080028f8 	.word	0x080028f8

0800213c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b04      	subs	r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002154:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3b04      	subs	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f023 0201 	bic.w	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b04      	subs	r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800216c:	4a08      	ldr	r2, [pc, #32]	; (8002190 <pxPortInitialiseStack+0x54>)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3b14      	subs	r3, #20
 8002176:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3b20      	subs	r3, #32
 8002182:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	08002195 	.word	0x08002195

08002194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <prvTaskExitError+0x54>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d00a      	beq.n	80021be <prvTaskExitError+0x2a>
        __asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	60fb      	str	r3, [r7, #12]
    }
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <prvTaskExitError+0x28>
        __asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	60bb      	str	r3, [r7, #8]
    }
 80021d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80021d2:	bf00      	nop
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0fc      	beq.n	80021d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000004 	.word	0x20000004
 80021ec:	00000000 	.word	0x00000000

080021f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <pxCurrentTCBConst2>)
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	6808      	ldr	r0, [r1, #0]
 80021f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80021fa:	f380 8809 	msr	PSP, r0
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	f380 8811 	msr	BASEPRI, r0
 800220a:	f04e 0e0d 	orr.w	lr, lr, #13
 800220e:	4770      	bx	lr

08002210 <pxCurrentTCBConst2>:
 8002210:	20000068 	.word	0x20000068
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop

08002218 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <prvPortStartFirstTask+0x1c>)
 800221a:	6800      	ldr	r0, [r0, #0]
 800221c:	6800      	ldr	r0, [r0, #0]
 800221e:	f380 8808 	msr	MSP, r0
 8002222:	b662      	cpsie	i
 8002224:	b661      	cpsie	f
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	df00      	svc	0
 8002230:	bf00      	nop
 8002232:	0000      	.short	0x0000
 8002234:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop

0800223c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <xPortStartScheduler+0xd0>)
 8002244:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <xPortStartScheduler+0xd4>)
 8002268:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <xPortStartScheduler+0xd8>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002270:	e009      	b.n	8002286 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <xPortStartScheduler+0xd8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3b01      	subs	r3, #1
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <xPortStartScheduler+0xd8>)
 800227a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d0ef      	beq.n	8002272 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <xPortStartScheduler+0xd8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	d00a      	beq.n	80022b4 <xPortStartScheduler+0x78>
        __asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	60bb      	str	r3, [r7, #8]
    }
 80022b0:	bf00      	nop
 80022b2:	e7fe      	b.n	80022b2 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <xPortStartScheduler+0xd8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <xPortStartScheduler+0xd8>)
 80022bc:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <xPortStartScheduler+0xd8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <xPortStartScheduler+0xd8>)
 80022c8:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <xPortStartScheduler+0xdc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a10      	ldr	r2, [pc, #64]	; (8002318 <xPortStartScheduler+0xdc>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <xPortStartScheduler+0xdc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <xPortStartScheduler+0xdc>)
 80022e4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80022e8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80022ea:	f000 f8b7 	bl	800245c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <xPortStartScheduler+0xe0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80022f4:	f7ff ff90 	bl	8002218 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80022f8:	f7ff f92e 	bl	8001558 <vTaskSwitchContext>
    prvTaskExitError();
 80022fc:	f7ff ff4a 	bl	8002194 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e400 	.word	0xe000e400
 8002310:	200001a8 	.word	0x200001a8
 8002314:	200001ac 	.word	0x200001ac
 8002318:	e000ed20 	.word	0xe000ed20
 800231c:	20000004 	.word	0x20000004

08002320 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
        __asm volatile
 8002326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232a:	f383 8811 	msr	BASEPRI, r3
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	607b      	str	r3, [r7, #4]
    }
 8002338:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <vPortEnterCritical+0x58>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <vPortEnterCritical+0x58>)
 8002342:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <vPortEnterCritical+0x58>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10f      	bne.n	800236c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <vPortEnterCritical+0x5c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <vPortEnterCritical+0x4c>
        __asm volatile
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	603b      	str	r3, [r7, #0]
    }
 8002368:	bf00      	nop
 800236a:	e7fe      	b.n	800236a <vPortEnterCritical+0x4a>
    }
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000004 	.word	0x20000004
 800237c:	e000ed04 	.word	0xe000ed04

08002380 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <vPortExitCritical+0x4c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <vPortExitCritical+0x24>
        __asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	607b      	str	r3, [r7, #4]
    }
 80023a0:	bf00      	nop
 80023a2:	e7fe      	b.n	80023a2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <vPortExitCritical+0x4c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <vPortExitCritical+0x4c>)
 80023ac:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <vPortExitCritical+0x4c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <vPortExitCritical+0x42>
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80023c0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000004 	.word	0x20000004

080023d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80023d0:	f3ef 8009 	mrs	r0, PSP
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <pxCurrentTCBConst>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023e0:	6010      	str	r0, [r2, #0]
 80023e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80023e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80023ea:	f380 8811 	msr	BASEPRI, r0
 80023ee:	f7ff f8b3 	bl	8001558 <vTaskSwitchContext>
 80023f2:	f04f 0000 	mov.w	r0, #0
 80023f6:	f380 8811 	msr	BASEPRI, r0
 80023fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	6808      	ldr	r0, [r1, #0]
 8002402:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002406:	f380 8809 	msr	PSP, r0
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	4770      	bx	lr

08002410 <pxCurrentTCBConst>:
 8002410:	20000068 	.word	0x20000068
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop

08002418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
        __asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	607b      	str	r3, [r7, #4]
    }
 8002430:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002432:	f7fe ff7b 	bl	800132c <xTaskIncrementTick>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <SysTick_Handler+0x40>)
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f383 8811 	msr	BASEPRI, r3
    }
 800244e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	e000ed04 	.word	0xe000ed04

0800245c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <vPortSetupTimerInterrupt+0x24>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <vPortSetupTimerInterrupt+0x28>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <vPortSetupTimerInterrupt+0x2c>)
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <vPortSetupTimerInterrupt+0x30>)
 8002470:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002472:	4b03      	ldr	r3, [pc, #12]	; (8002480 <vPortSetupTimerInterrupt+0x24>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	e000e010 	.word	0xe000e010
 8002484:	e000e018 	.word	0xe000e018
 8002488:	e000e014 	.word	0xe000e014
 800248c:	0001193f 	.word	0x0001193f

08002490 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800249c:	f7fe fe2e 	bl	80010fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <pvPortMalloc+0x160>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80024a8:	f000 f908 	bl	80026bc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80024b2:	2208      	movs	r2, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	3308      	adds	r3, #8
 80024be:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d804      	bhi.n	80024d4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	e001      	b.n	80024d8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db70      	blt.n	80025c0 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06d      	beq.n	80025c0 <pvPortMalloc+0x130>
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <pvPortMalloc+0x164>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d868      	bhi.n	80025c0 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <pvPortMalloc+0x168>)
 80024f0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <pvPortMalloc+0x168>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024f8:	e004      	b.n	8002504 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d903      	bls.n	8002516 <pvPortMalloc+0x86>
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f1      	bne.n	80024fa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <pvPortMalloc+0x160>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	429a      	cmp	r2, r3
 800251e:	d04f      	beq.n	80025c0 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	4413      	add	r3, r2
 8002528:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	1ad2      	subs	r2, r2, r3
 800253a:	2308      	movs	r3, #8
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	429a      	cmp	r2, r3
 8002540:	d91f      	bls.n	8002582 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <pvPortMalloc+0xda>
        __asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	613b      	str	r3, [r7, #16]
    }
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800257c:	6978      	ldr	r0, [r7, #20]
 800257e:	f000 f8f9 	bl	8002774 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <pvPortMalloc+0x164>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <pvPortMalloc+0x164>)
 800258e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <pvPortMalloc+0x164>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <pvPortMalloc+0x16c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d203      	bcs.n	80025a4 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <pvPortMalloc+0x164>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <pvPortMalloc+0x16c>)
 80025a2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <pvPortMalloc+0x170>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a10      	ldr	r2, [pc, #64]	; (8002600 <pvPortMalloc+0x170>)
 80025be:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80025c0:	f7fe fdaa 	bl	8001118 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <pvPortMalloc+0x154>
        __asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	60fb      	str	r3, [r7, #12]
    }
 80025e0:	bf00      	nop
 80025e2:	e7fe      	b.n	80025e2 <pvPortMalloc+0x152>
    return pvReturn;
 80025e4:	69fb      	ldr	r3, [r7, #28]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200015b8 	.word	0x200015b8
 80025f4:	200015bc 	.word	0x200015bc
 80025f8:	200015b0 	.word	0x200015b0
 80025fc:	200015c0 	.word	0x200015c0
 8002600:	200015c4 	.word	0x200015c4

08002604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d049      	beq.n	80026aa <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002616:	2308      	movs	r3, #8
 8002618:	425b      	negs	r3, r3
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <vPortFree+0x3e>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60fb      	str	r3, [r7, #12]
    }
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <vPortFree+0x5c>
        __asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	60bb      	str	r3, [r7, #8]
    }
 800265c:	bf00      	nop
 800265e:	e7fe      	b.n	800265e <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0fdb      	lsrs	r3, r3, #31
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01c      	beq.n	80026aa <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d118      	bne.n	80026aa <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002684:	f7fe fd3a 	bl	80010fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <vPortFree+0xb0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4413      	add	r3, r2
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <vPortFree+0xb0>)
 8002694:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002696:	6938      	ldr	r0, [r7, #16]
 8002698:	f000 f86c 	bl	8002774 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <vPortFree+0xb4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <vPortFree+0xb4>)
 80026a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80026a6:	f7fe fd37 	bl	8001118 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200015bc 	.word	0x200015bc
 80026b8:	200015c8 	.word	0x200015c8

080026bc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <prvHeapInit+0xa4>)
 80026ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3307      	adds	r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0307 	bic.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <prvHeapInit+0xa4>)
 80026ec:	4413      	add	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <prvHeapInit+0xa8>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <prvHeapInit+0xa8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4413      	add	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002708:	2208      	movs	r2, #8
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <prvHeapInit+0xac>)
 800271c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <prvHeapInit+0xac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <prvHeapInit+0xac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <prvHeapInit+0xac>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a08      	ldr	r2, [pc, #32]	; (800276c <prvHeapInit+0xb0>)
 800274a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <prvHeapInit+0xb4>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	200001b0 	.word	0x200001b0
 8002764:	200015b0 	.word	0x200015b0
 8002768:	200015b8 	.word	0x200015b8
 800276c:	200015c0 	.word	0x200015c0
 8002770:	200015bc 	.word	0x200015bc

08002774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <prvInsertBlockIntoFreeList+0xa8>)
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e002      	b.n	8002788 <prvInsertBlockIntoFreeList+0x14>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	d8f7      	bhi.n	8002782 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4413      	add	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d108      	bne.n	80027b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	441a      	add	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	441a      	add	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d118      	bne.n	80027fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <prvInsertBlockIntoFreeList+0xac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d00d      	beq.n	80027f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	441a      	add	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e008      	b.n	8002804 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <prvInsertBlockIntoFreeList+0xac>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e003      	b.n	8002804 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d002      	beq.n	8002812 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	200015b0 	.word	0x200015b0
 8002820:	200015b8 	.word	0x200015b8

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	2600      	movs	r6, #0
 8002828:	4d0c      	ldr	r5, [pc, #48]	; (800285c <__libc_init_array+0x38>)
 800282a:	4c0d      	ldr	r4, [pc, #52]	; (8002860 <__libc_init_array+0x3c>)
 800282c:	1b64      	subs	r4, r4, r5
 800282e:	10a4      	asrs	r4, r4, #2
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	f000 f830 	bl	8002898 <_init>
 8002838:	2600      	movs	r6, #0
 800283a:	4d0a      	ldr	r5, [pc, #40]	; (8002864 <__libc_init_array+0x40>)
 800283c:	4c0a      	ldr	r4, [pc, #40]	; (8002868 <__libc_init_array+0x44>)
 800283e:	1b64      	subs	r4, r4, r5
 8002840:	10a4      	asrs	r4, r4, #2
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f855 3b04 	ldr.w	r3, [r5], #4
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f855 3b04 	ldr.w	r3, [r5], #4
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	08002900 	.word	0x08002900
 8002860:	08002900 	.word	0x08002900
 8002864:	08002900 	.word	0x08002900
 8002868:	08002904 	.word	0x08002904

0800286c <memcpy>:
 800286c:	440a      	add	r2, r1
 800286e:	4291      	cmp	r1, r2
 8002870:	f100 33ff 	add.w	r3, r0, #4294967295
 8002874:	d100      	bne.n	8002878 <memcpy+0xc>
 8002876:	4770      	bx	lr
 8002878:	b510      	push	{r4, lr}
 800287a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800287e:	4291      	cmp	r1, r2
 8002880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002884:	d1f9      	bne.n	800287a <memcpy+0xe>
 8002886:	bd10      	pop	{r4, pc}

08002888 <memset>:
 8002888:	4603      	mov	r3, r0
 800288a:	4402      	add	r2, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
