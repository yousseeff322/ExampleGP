
MASTER_NODE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c0  080037c0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080037c0  080037c0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c0  080037c0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c8  20000008  080037d0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021d0  080037d0  000221d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000755b  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ed  00000000  00000000  0002758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  00028c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  00029480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c7f  00000000  00000000  00029ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007739  00000000  00000000  0002c827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001293b  00000000  00000000  00033f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004689b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001edc  00000000  00000000  000468ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08003768 	.word	0x08003768

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08003768 	.word	0x08003768

08000170 <CAN_voidInit>:




void CAN_voidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    /**  Enable the CAN interface clock **/
	MRCC_VidEnablePeripheralClock(RCC_APB1, CAN_RCC);
 8000174:	2119      	movs	r1, #25
 8000176:	2001      	movs	r0, #1
 8000178:	f000 fce4 	bl	8000b44 <MRCC_VidEnablePeripheralClock>
                        CAN_TX mapped to PB9    */
  //  RCC_voidEnableClock(RCC_APB2, AFIO_RCC);
  // AFIO_voidRemapPeripheralPins (CAN_REMAP);
    /* Enable the clock for the CAN GPIOs */
  //  RCC_voidEnableClock(RCC_APB2, APB2_GPIOB_EN);
    MGPIO_VidSetPinDirection(GPIOA, PIN11, INPUT_PULL_UP_DOWN); //RX
 800017c:	2208      	movs	r2, #8
 800017e:	210b      	movs	r1, #11
 8000180:	2000      	movs	r0, #0
 8000182:	f000 fa03 	bl	800058c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, PIN12, OUT_SPEED_50MHZ_AFPP); //TX
 8000186:	220b      	movs	r2, #11
 8000188:	210c      	movs	r1, #12
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f9fe 	bl	800058c <MGPIO_VidSetPinDirection>
    /**  exit CAN sleep mode **/
    /* CLEAR SLEEP bit (SLEEP) */
    CLR_BIT(CAN->MCR,1);
 8000190:	4b27      	ldr	r3, [pc, #156]	; (8000230 <CAN_voidInit+0xc0>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a26      	ldr	r2, [pc, #152]	; (8000230 <CAN_voidInit+0xc0>)
 8000196:	f023 0302 	bic.w	r3, r3, #2
 800019a:	6013      	str	r3, [r2, #0]
    /* wait to exit sleep mode */
    while ((GET_BIT(CAN->MSR,1)));
 800019c:	bf00      	nop
 800019e:	4b24      	ldr	r3, [pc, #144]	; (8000230 <CAN_voidInit+0xc0>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	085b      	lsrs	r3, r3, #1
 80001a4:	f003 0301 	and.w	r3, r3, #1
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d1f8      	bne.n	800019e <CAN_voidInit+0x2e>
     /**  Set CAN Initialization mode **/
    /* SET Initialization request BIT (INRQ) */
    SET_BIT(CAN->MCR,0);
 80001ac:	4b20      	ldr	r3, [pc, #128]	; (8000230 <CAN_voidInit+0xc0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a1f      	ldr	r2, [pc, #124]	; (8000230 <CAN_voidInit+0xc0>)
 80001b2:	f043 0301 	orr.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
    /* wait to enter in Initialization mode */
    while(!(GET_BIT(CAN->MSR,0)));
 80001b8:	bf00      	nop
 80001ba:	4b1d      	ldr	r3, [pc, #116]	; (8000230 <CAN_voidInit+0xc0>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	f003 0301 	and.w	r3, r3, #1
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d0f9      	beq.n	80001ba <CAN_voidInit+0x4a>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
     /* by the identifier of the message */
        CLR_BIT(CAN->MCR,2); //TXFP
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <CAN_voidInit+0xc0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a19      	ldr	r2, [pc, #100]	; (8000230 <CAN_voidInit+0xc0>)
 80001cc:	f023 0304 	bic.w	r3, r3, #4
 80001d0:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
     /* Receive FIFO not locked on overrun.
         Once a receive FIFO is full the next incoming message will overwrite the previous one. */
        CLR_BIT(CAN->MCR,3); //RFLM
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <CAN_voidInit+0xc0>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a16      	ldr	r2, [pc, #88]	; (8000230 <CAN_voidInit+0xc0>)
 80001d8:	f023 0308 	bic.w	r3, r3, #8
 80001dc:	6013      	str	r3, [r2, #0]
#endif
    /** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
        CLR_BIT(CAN->MCR,4); //NART
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <CAN_voidInit+0xc0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <CAN_voidInit+0xc0>)
 80001e4:	f023 0310 	bic.w	r3, r3, #16
 80001e8:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

    /** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,5); //AWUM
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <CAN_voidInit+0xc0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a10      	ldr	r2, [pc, #64]	; (8000230 <CAN_voidInit+0xc0>)
 80001f0:	f043 0320 	orr.w	r3, r3, #32
 80001f4:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

    /** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,6); //ABOM
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <CAN_voidInit+0xc0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <CAN_voidInit+0xc0>)
 80001fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000200:	6013      	str	r3, [r2, #0]

    /** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
        CLR_BIT(CAN->MCR,7); //TTCM
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <CAN_voidInit+0xc0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <CAN_voidInit+0xc0>)
 8000208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800020c:	6013      	str	r3, [r2, #0]
#endif


     /** Set the bit timing register **/
  WRITE_REG(CAN->BTR, (u32) (MODE |
 800020e:	2301      	movs	r3, #1
 8000210:	3b01      	subs	r3, #1
 8000212:	051b      	lsls	r3, r3, #20
 8000214:	461a      	mov	r2, r3
 8000216:	230c      	movs	r3, #12
 8000218:	3b01      	subs	r3, #1
 800021a:	041b      	lsls	r3, r3, #16
 800021c:	4313      	orrs	r3, r2
 800021e:	2202      	movs	r2, #2
 8000220:	3a01      	subs	r2, #1
 8000222:	4611      	mov	r1, r2
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <CAN_voidInit+0xc0>)
 8000226:	430b      	orrs	r3, r1
 8000228:	61d3      	str	r3, [r2, #28]
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
		  ((CAN_bitRateConfig[BOUDRATE].TS1-1) << 16) |
		  (CAN_bitRateConfig[BOUDRATE].BRP-1)));
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40006400 	.word	0x40006400

08000234 <CAN_voidStart>:
	}
}


void CAN_voidStart(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR,0);
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <CAN_voidStart+0x28>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <CAN_voidStart+0x28>)
 800023e:	f023 0301 	bic.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while(!(GET_BIT(CAN->MSR,0) == 0));
 8000244:	bf00      	nop
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <CAN_voidStart+0x28>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1f9      	bne.n	8000246 <CAN_voidStart+0x12>

}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40006400 	.word	0x40006400

08000260 <CAN_voidGetRxMsg>:


void CAN_voidGetRxMsg(u32 local_u8RxFifo, CAN_RxHeaderTypeDef *pRxHeader, u8 Local_u8Data[])
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
    /* Get Identifier extension */
	pRxHeader->IDE =  GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,2);
 800026c:	4a50      	ldr	r2, [pc, #320]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	331b      	adds	r3, #27
 8000272:	011b      	lsls	r3, r3, #4
 8000274:	4413      	add	r3, r2
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	089b      	lsrs	r3, r3, #2
 800027a:	f003 0201 	and.w	r2, r3, #1
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	609a      	str	r2, [r3, #8]
    if (pRxHeader->IDE == CAN_ID_STD)
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d109      	bne.n	800029e <CAN_voidGetRxMsg+0x3e>
    {/* GET the Id */
      pRxHeader->StdId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 21;
 800028a:	4a49      	ldr	r2, [pc, #292]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	331b      	adds	r3, #27
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	4413      	add	r3, r2
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	0d5a      	lsrs	r2, r3, #21
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	e008      	b.n	80002b0 <CAN_voidGetRxMsg+0x50>
    }
    else
    {
      pRxHeader->ExtId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 3;
 800029e:	4a44      	ldr	r2, [pc, #272]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	331b      	adds	r3, #27
 80002a4:	011b      	lsls	r3, r3, #4
 80002a6:	4413      	add	r3, r2
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	08da      	lsrs	r2, r3, #3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	605a      	str	r2, [r3, #4]
    }
    /* GET the RTR */
    pRxHeader->RTR = GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,1);
 80002b0:	4a3f      	ldr	r2, [pc, #252]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	331b      	adds	r3, #27
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	4413      	add	r3, r2
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	085b      	lsrs	r3, r3, #1
 80002be:	f003 0201 	and.w	r2, r3, #1
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	60da      	str	r2, [r3, #12]
    /* GET the DLC */
    pRxHeader->DLC = (CAN->FIFOMailBox[local_u8RxFifo].RDTR & 0xF);
 80002c6:	4a3a      	ldr	r2, [pc, #232]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	331b      	adds	r3, #27
 80002cc:	011b      	lsls	r3, r3, #4
 80002ce:	4413      	add	r3, r2
 80002d0:	3304      	adds	r3, #4
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 020f 	and.w	r2, r3, #15
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	611a      	str	r2, [r3, #16]
    /* GET the (FMI) Filter Match Index */
    pRxHeader->FilterMatchIndex = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 8) & 0xFF;
 80002dc:	4a34      	ldr	r2, [pc, #208]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	331b      	adds	r3, #27
 80002e2:	011b      	lsls	r3, r3, #4
 80002e4:	4413      	add	r3, r2
 80002e6:	3304      	adds	r3, #4
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	0a1b      	lsrs	r3, r3, #8
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	619a      	str	r2, [r3, #24]
    /* GET the Time stamp */
    pRxHeader->TimeStamp = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 16) & 0XFFFF;
 80002f2:	4a2f      	ldr	r2, [pc, #188]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	331b      	adds	r3, #27
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	4413      	add	r3, r2
 80002fc:	3304      	adds	r3, #4
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	0c1b      	lsrs	r3, r3, #16
 8000302:	b29a      	uxth	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	615a      	str	r2, [r3, #20]
    Local_u8Data[4] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	  ) & 0XFF);
    Local_u8Data[5] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 8 ) & 0XFF);
    Local_u8Data[6] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 16) & 0XFF);
    Local_u8Data[7] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 24) & 0XFF);
		#else
		for(u8 i=0 ; i < 8 ; i++)
 8000308:	2300      	movs	r3, #0
 800030a:	75fb      	strb	r3, [r7, #23]
 800030c:	e007      	b.n	800031e <CAN_voidGetRxMsg+0xbe>
		{/*clear buff*/
			Local_u8Data[i] = 0;
 800030e:	7dfb      	ldrb	r3, [r7, #23]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4413      	add	r3, r2
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
		for(u8 i=0 ; i < 8 ; i++)
 8000318:	7dfb      	ldrb	r3, [r7, #23]
 800031a:	3301      	adds	r3, #1
 800031c:	75fb      	strb	r3, [r7, #23]
 800031e:	7dfb      	ldrb	r3, [r7, #23]
 8000320:	2b07      	cmp	r3, #7
 8000322:	d9f4      	bls.n	800030e <CAN_voidGetRxMsg+0xae>
		}
		for(u8 i=0 ; i < pRxHeader->DLC ; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	75bb      	strb	r3, [r7, #22]
 8000328:	e027      	b.n	800037a <CAN_voidGetRxMsg+0x11a>
		{
			if (i<4)
 800032a:	7dbb      	ldrb	r3, [r7, #22]
 800032c:	2b03      	cmp	r3, #3
 800032e:	d810      	bhi.n	8000352 <CAN_voidGetRxMsg+0xf2>
				Local_u8Data[i] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDLR >>(i*8) ) & 0XFF);
 8000330:	4a1f      	ldr	r2, [pc, #124]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	4413      	add	r3, r2
 8000338:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	7dbb      	ldrb	r3, [r7, #22]
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	fa22 f103 	lsr.w	r1, r2, r3
 8000346:	7dbb      	ldrb	r3, [r7, #22]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	4413      	add	r3, r2
 800034c:	b2ca      	uxtb	r2, r1
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	e010      	b.n	8000374 <CAN_voidGetRxMsg+0x114>
			else
				Local_u8Data[i] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	>>((i-4)*8)  ) & 0XFF);
 8000352:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	4413      	add	r3, r2
 800035a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	7dbb      	ldrb	r3, [r7, #22]
 8000362:	3b04      	subs	r3, #4
 8000364:	00db      	lsls	r3, r3, #3
 8000366:	fa22 f103 	lsr.w	r1, r2, r3
 800036a:	7dbb      	ldrb	r3, [r7, #22]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	b2ca      	uxtb	r2, r1
 8000372:	701a      	strb	r2, [r3, #0]
		for(u8 i=0 ; i < pRxHeader->DLC ; i++)
 8000374:	7dbb      	ldrb	r3, [r7, #22]
 8000376:	3301      	adds	r3, #1
 8000378:	75bb      	strb	r3, [r7, #22]
 800037a:	7dba      	ldrb	r2, [r7, #22]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d3d2      	bcc.n	800032a <CAN_voidGetRxMsg+0xca>
		}
		
		#endif
    /* Release the FIFO */
    if (local_u8RxFifo == CAN_RX_FIFO0)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d106      	bne.n	8000398 <CAN_voidGetRxMsg+0x138>
    {
      /* Release RX FIFO 0 */
      SET_BIT(CAN->RF0R, 5);
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	60d3      	str	r3, [r2, #12]
    else
    {
      /* Release RX FIFO 1 */
      SET_BIT(CAN->RF1R, 5);
    }
}
 8000396:	e005      	b.n	80003a4 <CAN_voidGetRxMsg+0x144>
      SET_BIT(CAN->RF1R, 5);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <CAN_voidGetRxMsg+0x150>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6113      	str	r3, [r2, #16]
}
 80003a4:	bf00      	nop
 80003a6:	371c      	adds	r7, #28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40006400 	.word	0x40006400

080003b4 <CAN_voidRXPending>:
/** CAN RX Pending **/
u8 CAN_voidRXPending(u8 local_u8RxFifo)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	/* return the Rx FIFO  message pending */
	if (local_u8RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d106      	bne.n	80003d2 <CAN_voidRXPending+0x1e>
	{
		/* return value of the Rx FIFO 0  */
	 return (CAN->RF0R & 0X3);
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <CAN_voidRXPending+0x34>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	f003 0303 	and.w	r3, r3, #3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	e005      	b.n	80003de <CAN_voidRXPending+0x2a>

	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* return value of the Rx FIFO 1  */
		return (CAN->RF1R & 0X3);
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <CAN_voidRXPending+0x34>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	f003 0303 	and.w	r3, r3, #3
 80003dc:	b2db      	uxtb	r3, r3
	}
}
 80003de:	4618      	mov	r0, r3
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40006400 	.word	0x40006400

080003ec <CAN_voidConfigFilter>:
/** CAN CONFIG filter **/
void CAN_voidConfigFilter( CAN_FilterTypeDef *pFilterConfig)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	/* Initialization mode for the filter */
	SET_BIT(CAN->FMR, 0);
 80003f4:	4b64      	ldr	r3, [pc, #400]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80003f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80003fa:	4a63      	ldr	r2, [pc, #396]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/* Convert filter number into bit position */
	u32 local_u32FilterBitPos = pFilterConfig->FilterBank ;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CLR_BIT(CAN->FA1R, pFilterConfig->FilterBank);
 800040a:	4b5f      	ldr	r3, [pc, #380]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 800040c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6952      	ldr	r2, [r2, #20]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	43d2      	mvns	r2, r2
 800041c:	4611      	mov	r1, r2
 800041e:	4a5a      	ldr	r2, [pc, #360]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000420:	400b      	ands	r3, r1
 8000422:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* Filter Scale */
	if (pFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d128      	bne.n	8000480 <CAN_voidConfigFilter+0x94>
	{
	  /* 16-bit scale for the filter */
	  CLR_BIT(CAN->FS1R, local_u32FilterBitPos);
 800042e:	4b56      	ldr	r3, [pc, #344]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000430:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000434:	2101      	movs	r1, #1
 8000436:	68fa      	ldr	r2, [r7, #12]
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	43d2      	mvns	r2, r2
 800043e:	4611      	mov	r1, r2
 8000440:	4a51      	ldr	r2, [pc, #324]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000442:	400b      	ands	r3, r1
 8000444:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	     * */

	  /* First 16-bit identifier and First 16-bit mask */
	  /* Or First 16-bit identifier and Second 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	0419      	lsls	r1, r3, #16
									  (pFilterConfig->FilterIdLow	   & 0x0000FFFF) );
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000454:	484c      	ldr	r0, [pc, #304]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 800045a:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 800045c:	3348      	adds	r3, #72	; 0x48
 800045e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* Second 16-bit identifier and Second 16-bit mask */
	  /* Or Third 16-bit identifier and Fourth 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	0419      	lsls	r1, r3, #16
			  									  (pFilterConfig->FilterIdHigh 	   & 0x0000FFFF) );
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 800046e:	4846      	ldr	r0, [pc, #280]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000474:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000476:	3348      	adds	r3, #72	; 0x48
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	4403      	add	r3, r0
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	e02a      	b.n	80004d6 <CAN_voidConfigFilter+0xea>
	}

	else if (pFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d126      	bne.n	80004d6 <CAN_voidConfigFilter+0xea>
	{
	  /* 32-bit scale for the filter */
	  SET_BIT(CAN->FS1R, local_u32FilterBitPos);
 8000488:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 800048a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800048e:	2101      	movs	r1, #1
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a3b      	ldr	r2, [pc, #236]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 800049a:	430b      	orrs	r3, r1
 800049c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
		 * */

	  /* 32-bit identifier or First 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	0419      	lsls	r1, r3, #16
											 (pFilterConfig->FilterIdLow  & 0x0000FFFF));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 80004ac:	4836      	ldr	r0, [pc, #216]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	695b      	ldr	r3, [r3, #20]
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 80004b2:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 80004b4:	3348      	adds	r3, #72	; 0x48
 80004b6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* 32-bit mask or Second 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	0419      	lsls	r1, r3, #16
												 (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 80004c6:	4830      	ldr	r0, [pc, #192]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	695b      	ldr	r3, [r3, #20]
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 80004cc:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 80004ce:	3348      	adds	r3, #72	; 0x48
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	4403      	add	r3, r0
 80004d4:	605a      	str	r2, [r3, #4]
	}

	/* Filter Mode */
	if (pFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10d      	bne.n	80004fa <CAN_voidConfigFilter+0x10e>
	{
	  /* Id/Mask mode for the filter*/
	  CLR_BIT(CAN->FM1R, local_u32FilterBitPos);
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80004e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004e4:	2101      	movs	r1, #1
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a25      	ldr	r2, [pc, #148]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80004f2:	400b      	ands	r3, r1
 80004f4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 80004f8:	e00b      	b.n	8000512 <CAN_voidConfigFilter+0x126>
	}
	else
	{
	  /* Identifier list mode for the filter*/
	  SET_BIT(CAN->FM1R, local_u32FilterBitPos);
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 80004fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000500:	2101      	movs	r1, #1
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a1f      	ldr	r2, [pc, #124]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 800050c:	430b      	orrs	r3, r1
 800050e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* Filter FIFO assignment */
	if (pFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	691b      	ldr	r3, [r3, #16]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10d      	bne.n	8000536 <CAN_voidConfigFilter+0x14a>
	{
	  /* FIFO 0 assignation for the filter */
	  CLR_BIT(CAN->FFA1R, local_u32FilterBitPos);
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 800051c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000520:	2101      	movs	r1, #1
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	43d2      	mvns	r2, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 800052e:	400b      	ands	r3, r1
 8000530:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8000534:	e00b      	b.n	800054e <CAN_voidConfigFilter+0x162>
	}
	else
	{
	  /* FIFO 1 assignation for the filter */
	  SET_BIT(CAN->FFA1R, local_u32FilterBitPos);
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800053c:	2101      	movs	r1, #1
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000548:	430b      	orrs	r3, r1
 800054a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	}

	/* Filter activation */
	if (pFilterConfig->FilterActivation == ENABLE)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6a1b      	ldr	r3, [r3, #32]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d10b      	bne.n	800056e <CAN_voidConfigFilter+0x182>
	{
	  SET_BIT(CAN->FA1R, local_u32FilterBitPos);
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000558:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800055c:	2101      	movs	r1, #1
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000568:	430b      	orrs	r3, r1
 800056a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}

	/* Leave the initialisation mode for the filter */
	CLR_BIT(CAN->FMR, 0);
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <CAN_voidConfigFilter+0x19c>)
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40006400 	.word	0x40006400

0800058c <MGPIO_VidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"



void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	460b      	mov	r3, r1
 8000598:	71bb      	strb	r3, [r7, #6]
 800059a:	4613      	mov	r3, r2
 800059c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d07a      	beq.n	800069a <MGPIO_VidSetPinDirection+0x10e>
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	f300 80b1 	bgt.w	800070c <MGPIO_VidSetPinDirection+0x180>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <MGPIO_VidSetPinDirection+0x28>
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d03a      	beq.n	8000628 <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 80005b2:	e0ab      	b.n	800070c <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	d817      	bhi.n	80005ea <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 80005ba:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	0092      	lsls	r2, r2, #2
 80005c2:	210f      	movs	r1, #15
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a55      	ldr	r2, [pc, #340]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	7979      	ldrb	r1, [r7, #5]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a50      	ldr	r2, [pc, #320]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6013      	str	r3, [r2, #0]
		break;
 80005e8:	e092      	b.n	8000710 <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	f200 808f 	bhi.w	8000710 <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	3b08      	subs	r3, #8
 80005f6:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80005f8:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	79ba      	ldrb	r2, [r7, #6]
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	210f      	movs	r1, #15
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	43d2      	mvns	r2, r2
 8000608:	4611      	mov	r1, r2
 800060a:	4a46      	ldr	r2, [pc, #280]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 800060c:	400b      	ands	r3, r1
 800060e:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8000610:	4b44      	ldr	r3, [pc, #272]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	7979      	ldrb	r1, [r7, #5]
 8000616:	79ba      	ldrb	r2, [r7, #6]
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	4611      	mov	r1, r2
 8000620:	4a40      	ldr	r2, [pc, #256]	; (8000724 <MGPIO_VidSetPinDirection+0x198>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6053      	str	r3, [r2, #4]
		break;
 8000626:	e073      	b.n	8000710 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b07      	cmp	r3, #7
 800062c:	d817      	bhi.n	800065e <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	79ba      	ldrb	r2, [r7, #6]
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	210f      	movs	r1, #15
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	43d2      	mvns	r2, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a39      	ldr	r2, [pc, #228]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 8000642:	400b      	ands	r3, r1
 8000644:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7979      	ldrb	r1, [r7, #5]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a34      	ldr	r2, [pc, #208]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
		break;
 800065c:	e05a      	b.n	8000714 <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d857      	bhi.n	8000714 <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	3b08      	subs	r3, #8
 8000668:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	210f      	movs	r1, #15
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	43d2      	mvns	r2, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 800067e:	400b      	ands	r3, r1
 8000680:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000682:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	7979      	ldrb	r1, [r7, #5]
 8000688:	79ba      	ldrb	r2, [r7, #6]
 800068a:	0092      	lsls	r2, r2, #2
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <MGPIO_VidSetPinDirection+0x19c>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6053      	str	r3, [r2, #4]
		break;
 8000698:	e03c      	b.n	8000714 <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	2b07      	cmp	r3, #7
 800069e:	d817      	bhi.n	80006d0 <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	210f      	movs	r1, #15
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a1e      	ldr	r2, [pc, #120]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	7979      	ldrb	r1, [r7, #5]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a18      	ldr	r2, [pc, #96]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6013      	str	r3, [r2, #0]
		break;
 80006ce:	e023      	b.n	8000718 <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d820      	bhi.n	8000718 <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	3b08      	subs	r3, #8
 80006da:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	210f      	movs	r1, #15
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	7979      	ldrb	r1, [r7, #5]
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000702:	4611      	mov	r1, r2
 8000704:	4a09      	ldr	r2, [pc, #36]	; (800072c <MGPIO_VidSetPinDirection+0x1a0>)
 8000706:	430b      	orrs	r3, r1
 8000708:	6053      	str	r3, [r2, #4]
		break;
 800070a:	e005      	b.n	8000718 <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 800070c:	bf00      	nop
 800070e:	e004      	b.n	800071a <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000710:	bf00      	nop
 8000712:	e002      	b.n	800071a <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000714:	bf00      	nop
 8000716:	e000      	b.n	800071a <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000718:	bf00      	nop
	}

}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00
 800072c:	40011000 	.word	0x40011000

08000730 <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	460b      	mov	r3, r1
 800073c:	71bb      	strb	r3, [r7, #6]
 800073e:	4613      	mov	r3, r2
 8000740:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d040      	beq.n	80007ca <MGPIO_VidSetPinValue+0x9a>
 8000748:	2b02      	cmp	r3, #2
 800074a:	dc60      	bgt.n	800080e <MGPIO_VidSetPinValue+0xde>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <MGPIO_VidSetPinValue+0x26>
 8000750:	2b01      	cmp	r3, #1
 8000752:	d01d      	beq.n	8000790 <MGPIO_VidSetPinValue+0x60>

		break;

	}

}
 8000754:	e05b      	b.n	800080e <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 8000756:	797b      	ldrb	r3, [r7, #5]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10a      	bne.n	8000772 <MGPIO_VidSetPinValue+0x42>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MGPIO_VidSetPinValue+0xe8>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	4611      	mov	r1, r2
 800076a:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <MGPIO_VidSetPinValue+0xe8>)
 800076c:	430b      	orrs	r3, r1
 800076e:	60d3      	str	r3, [r2, #12]
		break;
 8000770:	e048      	b.n	8000804 <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 8000772:	797b      	ldrb	r3, [r7, #5]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d145      	bne.n	8000804 <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MGPIO_VidSetPinValue+0xe8>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	43d2      	mvns	r2, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MGPIO_VidSetPinValue+0xe8>)
 800078a:	400b      	ands	r3, r1
 800078c:	60d3      	str	r3, [r2, #12]
		break;
 800078e:	e039      	b.n	8000804 <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 8000790:	797b      	ldrb	r3, [r7, #5]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d10a      	bne.n	80007ac <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MGPIO_VidSetPinValue+0xec>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a1d      	ldr	r2, [pc, #116]	; (800081c <MGPIO_VidSetPinValue+0xec>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	60d3      	str	r3, [r2, #12]
		break;
 80007aa:	e02d      	b.n	8000808 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 80007ac:	797b      	ldrb	r3, [r7, #5]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d12a      	bne.n	8000808 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MGPIO_VidSetPinValue+0xec>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	79ba      	ldrb	r2, [r7, #6]
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	43d2      	mvns	r2, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <MGPIO_VidSetPinValue+0xec>)
 80007c4:	400b      	ands	r3, r1
 80007c6:	60d3      	str	r3, [r2, #12]
		break;
 80007c8:	e01e      	b.n	8000808 <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10a      	bne.n	80007e6 <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MGPIO_VidSetPinValue+0xf0>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <MGPIO_VidSetPinValue+0xf0>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	60d3      	str	r3, [r2, #12]
		break;
 80007e4:	e012      	b.n	800080c <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 80007e6:	797b      	ldrb	r3, [r7, #5]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10f      	bne.n	800080c <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MGPIO_VidSetPinValue+0xf0>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <MGPIO_VidSetPinValue+0xf0>)
 80007fe:	400b      	ands	r3, r1
 8000800:	60d3      	str	r3, [r2, #12]
		break;
 8000802:	e003      	b.n	800080c <MGPIO_VidSetPinValue+0xdc>
		break;
 8000804:	bf00      	nop
 8000806:	e002      	b.n	800080e <MGPIO_VidSetPinValue+0xde>
		break;
 8000808:	bf00      	nop
 800080a:	e000      	b.n	800080e <MGPIO_VidSetPinValue+0xde>
		break;
 800080c:	bf00      	nop
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00
 8000820:	40011000 	.word	0x40011000

08000824 <MGPIO_VidTogglePin>:

	return LOC_u8Result;

}

void MGPIO_VidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    switch(Copy_u8Port) {
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d01c      	beq.n	8000874 <MGPIO_VidTogglePin+0x50>
 800083a:	2b02      	cmp	r3, #2
 800083c:	dc25      	bgt.n	800088a <MGPIO_VidTogglePin+0x66>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <MGPIO_VidTogglePin+0x24>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00b      	beq.n	800085e <MGPIO_VidTogglePin+0x3a>
            break;
        case GPIOC:
            TOGGLE_BIT(MGPIOC->ODR, Copy_u8Pin);
            break;
    }
}
 8000846:	e020      	b.n	800088a <MGPIO_VidTogglePin+0x66>
            TOGGLE_BIT(MGPIOA->ODR, Copy_u8Pin);
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MGPIO_VidTogglePin+0x70>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	2101      	movs	r1, #1
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	4611      	mov	r1, r2
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MGPIO_VidTogglePin+0x70>)
 8000858:	404b      	eors	r3, r1
 800085a:	60d3      	str	r3, [r2, #12]
            break;
 800085c:	e015      	b.n	800088a <MGPIO_VidTogglePin+0x66>
            TOGGLE_BIT(MGPIOB->ODR, Copy_u8Pin);
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MGPIO_VidTogglePin+0x74>)
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	4611      	mov	r1, r2
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <MGPIO_VidTogglePin+0x74>)
 800086e:	404b      	eors	r3, r1
 8000870:	60d3      	str	r3, [r2, #12]
            break;
 8000872:	e00a      	b.n	800088a <MGPIO_VidTogglePin+0x66>
            TOGGLE_BIT(MGPIOC->ODR, Copy_u8Pin);
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MGPIO_VidTogglePin+0x78>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	4611      	mov	r1, r2
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <MGPIO_VidTogglePin+0x78>)
 8000884:	404b      	eors	r3, r1
 8000886:	60d3      	str	r3, [r2, #12]
            break;
 8000888:	bf00      	nop
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40010800 	.word	0x40010800
 8000898:	40010c00 	.word	0x40010c00
 800089c:	40011000 	.word	0x40011000

080008a0 <BackLed_ON>:
#include "TIMER3_interface.h"

#include "Function_Help_Tasks.h"


void BackLed_ON() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    MGPIO_VidSetPinValue(GPIOA, PIN5, HIGH); // Turn on back LED
 80008a4:	2201      	movs	r2, #1
 80008a6:	2105      	movs	r1, #5
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ff41 	bl	8000730 <MGPIO_VidSetPinValue>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <BackLed_OFF>:

void BackLed_OFF() {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
    MGPIO_VidSetPinValue(GPIOA, PIN5, LOW); // Turn off back LED
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff38 	bl	8000730 <MGPIO_VidSetPinValue>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <Alarm_ON>:

void Alarm_ON() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    MGPIO_VidSetPinValue(GPIOA, PIN6, HIGH); // Activate alarm buzzer
 80008c8:	2201      	movs	r2, #1
 80008ca:	2106      	movs	r1, #6
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff ff2f 	bl	8000730 <MGPIO_VidSetPinValue>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <Alarm_OFF>:

void Alarm_OFF() {
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
    MGPIO_VidSetPinValue(GPIOA, PIN6, LOW); // Deactivate alarm buzzer
 80008da:	2200      	movs	r2, #0
 80008dc:	2106      	movs	r1, #6
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff ff26 	bl	8000730 <MGPIO_VidSetPinValue>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <LEDS_SetMaxBrightness>:


/* LED Control Functions using TIMER3 and DIO */
void LEDS_SetMaxBrightness() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    MTIMER3_PWM(1, 100, 99); // Set max PWM duty cycle
 80008ec:	2263      	movs	r2, #99	; 0x63
 80008ee:	2164      	movs	r1, #100	; 0x64
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 f9b1 	bl	8000c58 <MTIMER3_PWM>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <LEDS_SetAdaptiveBrightness>:

void LEDS_SetAdaptiveBrightness(u8 level) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    u8 brightness = ((level - 80) * 99) / 13; // Scale brightness proportionally
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	015a      	lsls	r2, r3, #5
 8000914:	4413      	add	r3, r2
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LEDS_SetAdaptiveBrightness+0x40>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1092      	asrs	r2, r2, #2
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	73fb      	strb	r3, [r7, #15]
    MTIMER3_PWM(1, 100, brightness);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	b29b      	uxth	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	2164      	movs	r1, #100	; 0x64
 800092c:	2001      	movs	r0, #1
 800092e:	f000 f993 	bl	8000c58 <MTIMER3_PWM>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	4ec4ec4f 	.word	0x4ec4ec4f

08000940 <LEDS_SetLowBrightness>:

void LEDS_SetLowBrightness() {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    MTIMER3_PWM(1, 100, 30); // Set low brightness
 8000944:	221e      	movs	r2, #30
 8000946:	2164      	movs	r1, #100	; 0x64
 8000948:	2001      	movs	r0, #1
 800094a:	f000 f985 	bl	8000c58 <MTIMER3_PWM>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}

08000952 <LEDS_Off>:

void LEDS_Off() {
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
    MGPIO_VidSetPinValue(GPIOA, PIN5, LOW); // Turn off LEDs via GPIO
 8000956:	2200      	movs	r2, #0
 8000958:	2105      	movs	r1, #5
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fee8 	bl	8000730 <MGPIO_VidSetPinValue>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <MotorDriver_voidInit>:

#include "MOTOR_interface.h"
#include "MOTOR_config.h"

// 🔹 Initialize motor driver
void MotorDriver_voidInit(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    // Set pins as output
    MGPIO_VidSetPinDirection(MOTOR1_PIN, OUT_SPEED_2MHZ_PP);
 8000968:	2202      	movs	r2, #2
 800096a:	210c      	movs	r1, #12
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fe0d 	bl	800058c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(MOTOR2_PIN, OUT_SPEED_2MHZ_PP);
 8000972:	2202      	movs	r2, #2
 8000974:	210d      	movs	r1, #13
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fe08 	bl	800058c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(MOTOR3_PIN, OUT_SPEED_2MHZ_PP);
 800097c:	2202      	movs	r2, #2
 800097e:	210e      	movs	r1, #14
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fe03 	bl	800058c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(MOTOR4_PIN, OUT_SPEED_2MHZ_PP);
 8000986:	2202      	movs	r2, #2
 8000988:	210f      	movs	r1, #15
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fdfe 	bl	800058c <MGPIO_VidSetPinDirection>

    MTIMER3_init(PWM_channel_1_us);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f919 	bl	8000bc8 <MTIMER3_init>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MotorDriver_voidControlSpeed>:

// 🔹 Control motor speed
void MotorDriver_voidControlSpeed(u8 DutyCycle) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
    if (DutyCycle > 100) DutyCycle = 100; // Ensure values between 0 and 100
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b64      	cmp	r3, #100	; 0x64
 80009aa:	d901      	bls.n	80009b0 <MotorDriver_voidControlSpeed+0x14>
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	71fb      	strb	r3, [r7, #7]
    u16 pwm_value = (DutyCycle * 99) / 100;
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	015a      	lsls	r2, r3, #5
 80009ba:	4413      	add	r3, r2
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <MotorDriver_voidControlSpeed+0x68>)
 80009be:	fb82 1203 	smull	r1, r2, r2, r3
 80009c2:	1152      	asrs	r2, r2, #5
 80009c4:	17db      	asrs	r3, r3, #31
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	81fb      	strh	r3, [r7, #14]

    // Assign PWM values to Timer3 channels corresponding to motor pins
    MTIMER3_PWM(MTIMER3_CH1_PORTA_6, 100, pwm_value); // Motor 1
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2164      	movs	r1, #100	; 0x64
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f941 	bl	8000c58 <MTIMER3_PWM>
    MTIMER3_PWM(MTIMER3_CH2_PORTA_7, 100, pwm_value); // Motor 2
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	461a      	mov	r2, r3
 80009da:	2164      	movs	r1, #100	; 0x64
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 f93b 	bl	8000c58 <MTIMER3_PWM>
    MTIMER3_PWM(MTIMER3_CH3_PORTB_0, 100, pwm_value); // Motor 3
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	461a      	mov	r2, r3
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	2002      	movs	r0, #2
 80009ea:	f000 f935 	bl	8000c58 <MTIMER3_PWM>
    MTIMER3_PWM(MTIMER3_CH4_PORTB_1, 100, pwm_value); // Motor 4
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	461a      	mov	r2, r3
 80009f2:	2164      	movs	r1, #100	; 0x64
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f92f 	bl	8000c58 <MTIMER3_PWM>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	51eb851f 	.word	0x51eb851f

08000a08 <MotorDriver_voidStop>:

// 🔹 Stop motors
void MotorDriver_voidStop(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR1_PIN, GPIO_LOW);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	210c      	movs	r1, #12
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fe8d 	bl	8000730 <MGPIO_VidSetPinValue>
   MGPIO_VidSetPinValue(MOTOR2_PIN, GPIO_LOW);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210d      	movs	r1, #13
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fe88 	bl	8000730 <MGPIO_VidSetPinValue>
   MGPIO_VidSetPinValue(MOTOR3_PIN, GPIO_LOW);
 8000a20:	2200      	movs	r2, #0
 8000a22:	210e      	movs	r1, #14
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe83 	bl	8000730 <MGPIO_VidSetPinValue>
   MGPIO_VidSetPinValue(MOTOR4_PIN, GPIO_LOW);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe7e 	bl	8000730 <MGPIO_VidSetPinValue>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <MotorDriver_voidMoveForward>:

// 🔹 Move forward
void MotorDriver_voidMoveForward(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	MotorDriver_voidControlSpeed(100);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f7ff ffad 	bl	800099c <MotorDriver_voidControlSpeed>
	MGPIO_VidSetPinValue(MOTOR1_PIN, GPIO_HIGH);
 8000a42:	2201      	movs	r2, #1
 8000a44:	210c      	movs	r1, #12
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fe72 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR2_PIN, GPIO_LOW);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	210d      	movs	r1, #13
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fe6d 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR3_PIN, GPIO_HIGH);
 8000a56:	2201      	movs	r2, #1
 8000a58:	210e      	movs	r1, #14
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fe68 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR4_PIN, GPIO_LOW);
 8000a60:	2200      	movs	r2, #0
 8000a62:	210f      	movs	r1, #15
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fe63 	bl	8000730 <MGPIO_VidSetPinValue>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <MotorDriver_voidMoveRight>:
	MGPIO_VidSetPinValue(MOTOR3_PIN, GPIO_LOW);
	MGPIO_VidSetPinValue(MOTOR4_PIN, GPIO_HIGH);
}

// 🔹 Move right
void MotorDriver_voidMoveRight(void) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
    MotorDriver_voidControlSpeed(100);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f7ff ff92 	bl	800099c <MotorDriver_voidControlSpeed>
	MGPIO_VidSetPinValue(MOTOR1_PIN, GPIO_LOW);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	210c      	movs	r1, #12
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fe57 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR2_PIN, GPIO_HIGH);
 8000a82:	2201      	movs	r2, #1
 8000a84:	210d      	movs	r1, #13
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fe52 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR3_PIN, GPIO_HIGH);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	210e      	movs	r1, #14
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fe4d 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR4_PIN, GPIO_LOW);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fe48 	bl	8000730 <MGPIO_VidSetPinValue>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <MotorDriver_voidMoveLeft>:

// 🔹 Move left
void MotorDriver_voidMoveLeft(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    MotorDriver_voidControlSpeed(100);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f7ff ff77 	bl	800099c <MotorDriver_voidControlSpeed>
	MGPIO_VidSetPinValue(MOTOR1_PIN, GPIO_HIGH);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	210c      	movs	r1, #12
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fe3c 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR2_PIN, GPIO_LOW);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	210d      	movs	r1, #13
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fe37 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR3_PIN, GPIO_LOW);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210e      	movs	r1, #14
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fe32 	bl	8000730 <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR4_PIN, GPIO_HIGH);
 8000acc:	2201      	movs	r2, #1
 8000ace:	210f      	movs	r1, #15
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fe2d 	bl	8000730 <MGPIO_VidSetPinValue>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <MRCC_VidInit>:
#include "RCC_private.h"
#include "RCC_config.h"



void MRCC_VidInit ( void ) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

	#elif   RCC_CLOCK_TYPE == RCC_PLL
	
	/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* PLL Selected As A System Clock */
		CLR_BIT( RCC_CFGR , 0  );
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MRCC_VidInit+0x60>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MRCC_VidInit+0x60>)
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]
		SET_BIT( RCC_CFGR , 1  );
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MRCC_VidInit+0x60>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MRCC_VidInit+0x60>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6013      	str	r3, [r2, #0]
			
			
			#elif RCC_PLL_INPUT == RCC_PLL_HSE
			
		/* Bit 16 -> Enable The HSE Clock */
			SET_BIT( RCC_CR   , 16 );
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MRCC_VidInit+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <MRCC_VidInit+0x64>)
 8000afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b02:	6013      	str	r3, [r2, #0]

			/* BIT 16 -> Choose PLL Source -> If HSI/2 OR HSE */
			/* PLL Entery Clock Source Is HSE */
			SET_BIT( RCC_CFGR , 16 );
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MRCC_VidInit+0x60>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MRCC_VidInit+0x60>)
 8000b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0e:	6013      	str	r3, [r2, #0]

			/* BIT 17 -> IF PLL Source IS HSE Then Choose Between Divide HSE/2 Or Not  */
			/* HSE Is Not Divided */
			CLR_BIT( RCC_CFGR , 17 );
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MRCC_VidInit+0x60>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <MRCC_VidInit+0x60>)
 8000b16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b1a:	6013      	str	r3, [r2, #0]
				#error("you chosed wrong Pll input")
			#endif
			


				SET_BIT( RCC_CR , 24 );
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MRCC_VidInit+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <MRCC_VidInit+0x64>)
 8000b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b26:	6013      	str	r3, [r2, #0]
	
	
	/* For Clock Security System */
	#if CLOCK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM

			SET_BIT(RCC_CR , 19 ) ; 
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MRCC_VidInit+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <MRCC_VidInit+0x64>)
 8000b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b32:	6013      	str	r3, [r2, #0]
	#else

		#warning " Wrong Clock Security System Configuration Choice "

	#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021004 	.word	0x40021004
 8000b40:	40021000 	.word	0x40021000

08000b44 <MRCC_VidEnablePeripheralClock>:





void MRCC_VidEnablePeripheralClock (u8 Copy_u8BusID , u8 Copy_u8Peripheral){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
	
	if (Copy_u8Peripheral <=31 )
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b1f      	cmp	r3, #31
 8000b58:	d82a      	bhi.n	8000bb0 <MRCC_VidEnablePeripheralClock+0x6c>
	{
		
		switch (Copy_u8BusID)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d01c      	beq.n	8000b9a <MRCC_VidEnablePeripheralClock+0x56>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	dc25      	bgt.n	8000bb0 <MRCC_VidEnablePeripheralClock+0x6c>
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <MRCC_VidEnablePeripheralClock+0x2a>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d00b      	beq.n	8000b84 <MRCC_VidEnablePeripheralClock+0x40>
	{
		/* Return Error */ 
		
	}		
	
}
 8000b6c:	e020      	b.n	8000bb0 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_AHB   :	SET_BIT(RCC_AHBENR  , Copy_u8Peripheral ) ; break ;  
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MRCC_VidEnablePeripheralClock+0x78>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	79ba      	ldrb	r2, [r7, #6]
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MRCC_VidEnablePeripheralClock+0x78>)
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e015      	b.n	8000bb0 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_APB1  :	SET_BIT(RCC_APB1ENR , Copy_u8Peripheral ) ; break ;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MRCC_VidEnablePeripheralClock+0x7c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	79ba      	ldrb	r2, [r7, #6]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <MRCC_VidEnablePeripheralClock+0x7c>)
 8000b94:	430b      	orrs	r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e00a      	b.n	8000bb0 <MRCC_VidEnablePeripheralClock+0x6c>
			case RCC_APB2  :	SET_BIT(RCC_APB2ENR , Copy_u8Peripheral ) ; break ;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MRCC_VidEnablePeripheralClock+0x80>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	79ba      	ldrb	r2, [r7, #6]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <MRCC_VidEnablePeripheralClock+0x80>)
 8000baa:	430b      	orrs	r3, r1
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	bf00      	nop
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021014 	.word	0x40021014
 8000bc0:	4002101c 	.word	0x4002101c
 8000bc4:	40021018 	.word	0x40021018

08000bc8 <MTIMER3_init>:
#include "TIMER3_config.h"
#include "RCC_interface.h"
#include "RCC_private.h"


void MTIMER3_init(u8 mode) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    // Enable TIM3 clock in RCC
	MRCC_VidEnablePeripheralClock(RCC_APB1, TIM3_RCC) ;
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ffb5 	bl	8000b44 <MRCC_VidEnablePeripheralClock>

    switch(mode) {
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d828      	bhi.n	8000c34 <MTIMER3_init+0x6c>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <MTIMER3_init+0x20>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bf9 	.word	0x08000bf9
 8000bec:	08000c03 	.word	0x08000c03
 8000bf0:	08000c0b 	.word	0x08000c0b
 8000bf4:	08000c1f 	.word	0x08000c1f
        case delay_ms:
            MTIMER3->PSC = (u16)7999;   // Prescaler set for milliseconds delay
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MTIMER3_init+0x8c>)
 8000bfa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8000c00:	e018      	b.n	8000c34 <MTIMER3_init+0x6c>

        case delay_us:
            MTIMER3->PSC = (u16)7;      // Prescaler set for microseconds delay
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8000c08:	e014      	b.n	8000c34 <MTIMER3_init+0x6c>

        case PWM_channel_1_us:
            MTIMER3->PSC = (u16)7;      // Prescaler for PWM in microseconds
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3->CCMR1 = (u16)0x0068; // PWM mode settings for channel 1
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c12:	2268      	movs	r2, #104	; 0x68
 8000c14:	619a      	str	r2, [r3, #24]
            MTIMER3->CCER = (u16)0x0001;  // Enable output on channel 1
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	621a      	str	r2, [r3, #32]
            break;
 8000c1c:	e00a      	b.n	8000c34 <MTIMER3_init+0x6c>

        case PWM_channel_1_IN:
            MTIMER3->PSC = (u16)7;       // Prescaler for input capture
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3->CCMR1 = (u16)0x0201; // Input capture settings for channel 1
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c26:	f240 2201 	movw	r2, #513	; 0x201
 8000c2a:	619a      	str	r2, [r3, #24]
            MTIMER3->CCER = (u16)0x0031; // Capture on both edges, enable channel 1
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c2e:	2231      	movs	r2, #49	; 0x31
 8000c30:	621a      	str	r2, [r3, #32]
            break;
 8000c32:	bf00      	nop
    }

    MTIMER3->EGR |= (1 << EGR_UG); // Force update event to load prescaler
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6153      	str	r3, [r2, #20]
    MTIMER3->CR1 |= (1 << CR1_CEN); // Enable timer
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <MTIMER3_init+0x8c>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40000400 	.word	0x40000400

08000c58 <MTIMER3_PWM>:
    CLR_BIT(MTIMER3->SR, SR_UIF);
}


void MTIMER3_PWM(u8 channel, u16 CNT_value, u16 PWM_value)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	460b      	mov	r3, r1
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	807b      	strh	r3, [r7, #2]
    MTIMER3->CNT = 0; // Reset counter
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
    MTIMER3->ARR = CNT_value; // Set period
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    SET_BIT(MTIMER3->CR1, CR1_CEN); // Enable timer
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6013      	str	r3, [r2, #0]

    switch (channel)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d81b      	bhi.n	8000cc0 <MTIMER3_PWM+0x68>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <MTIMER3_PWM+0x38>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000ca9 	.word	0x08000ca9
 8000c98:	08000cb1 	.word	0x08000cb1
 8000c9c:	08000cb9 	.word	0x08000cb9
    {
        case MTIMER3_CH1_PORTA_6:
            MTIMER3->CCR1 = PWM_value;
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000ca2:	887b      	ldrh	r3, [r7, #2]
 8000ca4:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8000ca6:	e00b      	b.n	8000cc0 <MTIMER3_PWM+0x68>

        case MTIMER3_CH2_PORTA_7:
            MTIMER3->CCR2 = PWM_value;
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8000cae:	e007      	b.n	8000cc0 <MTIMER3_PWM+0x68>

        case MTIMER3_CH3_PORTB_0:
            MTIMER3->CCR3 = PWM_value;
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	63d3      	str	r3, [r2, #60]	; 0x3c
            break;
 8000cb6:	e003      	b.n	8000cc0 <MTIMER3_PWM+0x68>

        case MTIMER3_CH4_PORTB_1:
            MTIMER3->CCR4 = PWM_value;
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 8000cbe:	bf00      	nop
    }

    while (GET_BIT(MTIMER3->SR, SR_UIF) == 0);
 8000cc0:	bf00      	nop
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f9      	beq.n	8000cc2 <MTIMER3_PWM+0x6a>
    CLR_BIT(MTIMER3->SR, SR_UIF);
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <MTIMER3_PWM+0x8c>)
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	6113      	str	r3, [r2, #16]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40000400 	.word	0x40000400

08000ce8 <main>:
#include "main.h"

/* Main function */
int main(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af02      	add	r7, sp, #8
    SystemInit();
 8000cee:	f000 f86b 	bl	8000dc8 <SystemInit>

    // Create Queue and Semaphore
    canQueue = xQueueCreate(5, sizeof(SensorData_t));
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f000 faf0 	bl	80012dc <xQueueGenericCreate>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <main+0xa8>)
 8000d00:	6013      	str	r3, [r2, #0]
    canSemaphore = xSemaphoreCreateBinary();
 8000d02:	2203      	movs	r2, #3
 8000d04:	2100      	movs	r1, #0
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fae8 	bl	80012dc <xQueueGenericCreate>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <main+0xac>)
 8000d10:	6013      	str	r3, [r2, #0]

    // Create FreeRTOS task for CAN reception
    xTaskCreate(AEBTask, "AEB", 128, NULL, 4, NULL);
 8000d12:	2300      	movs	r3, #0
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	2304      	movs	r3, #4
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	491e      	ldr	r1, [pc, #120]	; (8000d98 <main+0xb0>)
 8000d20:	481e      	ldr	r0, [pc, #120]	; (8000d9c <main+0xb4>)
 8000d22:	f000 febd 	bl	8001aa0 <xTaskCreate>
    xTaskCreate(LKSTask, "LKS", 128, NULL, 3, NULL);
 8000d26:	2300      	movs	r3, #0
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	491b      	ldr	r1, [pc, #108]	; (8000da0 <main+0xb8>)
 8000d34:	481b      	ldr	r0, [pc, #108]	; (8000da4 <main+0xbc>)
 8000d36:	f000 feb3 	bl	8001aa0 <xTaskCreate>
    xTaskCreate(CANReceiveTask, "CANReceive", 128, NULL, 3, NULL);
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2303      	movs	r3, #3
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	4918      	ldr	r1, [pc, #96]	; (8000da8 <main+0xc0>)
 8000d48:	4818      	ldr	r0, [pc, #96]	; (8000dac <main+0xc4>)
 8000d4a:	f000 fea9 	bl	8001aa0 <xTaskCreate>
    xTaskCreate(ACCTask, "ACC", 128, NULL, 2, NULL);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	2302      	movs	r3, #2
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	4915      	ldr	r1, [pc, #84]	; (8000db0 <main+0xc8>)
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <main+0xcc>)
 8000d5e:	f000 fe9f 	bl	8001aa0 <xTaskCreate>
    xTaskCreate(ALCTask, "ALC", 128, NULL, 1, NULL);
 8000d62:	2300      	movs	r3, #0
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	2301      	movs	r3, #1
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	4912      	ldr	r1, [pc, #72]	; (8000db8 <main+0xd0>)
 8000d70:	4812      	ldr	r0, [pc, #72]	; (8000dbc <main+0xd4>)
 8000d72:	f000 fe95 	bl	8001aa0 <xTaskCreate>
    xTaskCreate(BluetoothTask, "Bluetooth", 128, NULL, 1, NULL);
 8000d76:	2300      	movs	r3, #0
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	490f      	ldr	r1, [pc, #60]	; (8000dc0 <main+0xd8>)
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <main+0xdc>)
 8000d86:	f000 fe8b 	bl	8001aa0 <xTaskCreate>

    /* Start scheduler */
    vTaskStartScheduler();
 8000d8a:	f001 f827 	bl	8001ddc <vTaskStartScheduler>

    while (1) {}
 8000d8e:	e7fe      	b.n	8000d8e <main+0xa6>
 8000d90:	20000024 	.word	0x20000024
 8000d94:	20000028 	.word	0x20000028
 8000d98:	08003780 	.word	0x08003780
 8000d9c:	08000eb5 	.word	0x08000eb5
 8000da0:	08003784 	.word	0x08003784
 8000da4:	08000f11 	.word	0x08000f11
 8000da8:	08003788 	.word	0x08003788
 8000dac:	08000e31 	.word	0x08000e31
 8000db0:	08003794 	.word	0x08003794
 8000db4:	08000f79 	.word	0x08000f79
 8000db8:	08003798 	.word	0x08003798
 8000dbc:	08000fdd 	.word	0x08000fdd
 8000dc0:	0800379c 	.word	0x0800379c
 8000dc4:	08001041 	.word	0x08001041

08000dc8 <SystemInit>:
}

/* System Initialization */
void SystemInit(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
    MRCC_VidInit();
 8000dce:	f7ff fe85 	bl	8000adc <MRCC_VidInit>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOA_RCC);
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f7ff feb5 	bl	8000b44 <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOB_RCC);
 8000dda:	2103      	movs	r1, #3
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff feb1 	bl	8000b44 <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, AFIO_RCC);
 8000de2:	2100      	movs	r1, #0
 8000de4:	2002      	movs	r0, #2
 8000de6:	f7ff fead 	bl	8000b44 <MRCC_VidEnablePeripheralClock>

    CAN_voidInit();
 8000dea:	f7ff f9c1 	bl	8000170 <CAN_voidInit>

    // Configure CAN filter to accept messages with ID = 0x123 only
    CAN_FilterTypeDef canFilter;
    canFilter.FilterBank = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
    canFilter.FilterIdHigh = 0x123 << 5;
 8000dfa:	f242 4360 	movw	r3, #9312	; 0x2460
 8000dfe:	607b      	str	r3, [r7, #4]
    canFilter.FilterIdLow = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
    canFilter.FilterMaskIdHigh = 0xFFF << 5;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <SystemInit+0x64>)
 8000e06:	60fb      	str	r3, [r7, #12]
    canFilter.FilterMaskIdLow = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    canFilter.FilterActivation = ENABLE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    CAN_voidConfigFilter(&canFilter);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fae8 	bl	80003ec <CAN_voidConfigFilter>

    CAN_voidStart();
 8000e1c:	f7ff fa0a 	bl	8000234 <CAN_voidStart>

    MotorDriver_voidInit() ;
 8000e20:	f7ff fda0 	bl	8000964 <MotorDriver_voidInit>
}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	0001ffe0 	.word	0x0001ffe0

08000e30 <CANReceiveTask>:

/* CAN Receive Task */
void CANReceiveTask(void *pvParameters) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t canData[5];

    while (1) {
        // Check if data is available in CAN FIFO
        if (CAN_voidRXPending(CAN_RX_FIFO0)) {
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fabb 	bl	80003b4 <CAN_voidRXPending>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d02f      	beq.n	8000ea4 <CANReceiveTask+0x74>
            // Retrieve the message from CAN FIFO
            CAN_voidGetRxMsg(CAN_RX_FIFO0, &rxHeader, canData);
 8000e44:	f107 020c 	add.w	r2, r7, #12
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fa06 	bl	8000260 <CAN_voidGetRxMsg>


            // Verify the received message ID
            if (rxHeader.StdId == 0x123) {
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f240 1223 	movw	r2, #291	; 0x123
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d122      	bne.n	8000ea4 <CANReceiveTask+0x74>
            	receivedData.LEFT_LDR = canData[0];
 8000e5e:	7b3b      	ldrb	r3, [r7, #12]
 8000e60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            	receivedData.RIGHT_LDR = canData[1];
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            	receivedData.LEFT_IR = canData[2];
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            	receivedData.RIGHT_IR = canData[3];
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            	receivedData.ultrasonic = canData[4];
 8000e76:	7c3b      	ldrb	r3, [r7, #16]
 8000e78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            	MGPIO_VidTogglePin(GPIOB , PIN0) ;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fcd0 	bl	8000824 <MGPIO_VidTogglePin>
                // Send the received data to the queue
                xQueueSend(canQueue, &receivedData, portMAX_DELAY);
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <CANReceiveTask+0x7c>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e92:	f000 fa95 	bl	80013c0 <xQueueGenericSend>
                // Signal that new data is available
                xSemaphoreGive(canSemaphore);
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <CANReceiveTask+0x80>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f000 fa8e 	bl	80013c0 <xQueueGenericSend>
            }
        }
        // Delay to prevent CPU overuse
        vTaskDelay(pdMS_TO_TICKS(50));
 8000ea4:	2032      	movs	r0, #50	; 0x32
 8000ea6:	f000 ff65 	bl	8001d74 <vTaskDelay>
        if (CAN_voidRXPending(CAN_RX_FIFO0)) {
 8000eaa:	e7c5      	b.n	8000e38 <CANReceiveTask+0x8>
 8000eac:	20000024 	.word	0x20000024
 8000eb0:	20000028 	.word	0x20000028

08000eb4 <AEBTask>:
    }
}

/* Automatic Emergency Braking Task */
void AEBTask(void *pvParameters) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    SensorData_t receivedData;

    while (1) {
        // Wait for new sensor data from CANReceiveTask
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <AEBTask+0x58>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f107 0108 	add.w	r1, r7, #8
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fb77 	bl	80015bc <xQueueReceive>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d116      	bne.n	8000f02 <AEBTask+0x4e>
            if (receivedData.ultrasonic < 10 || (receivedData.LEFT_IR == White && receivedData.RIGHT_IR == White))
 8000ed4:	7b3b      	ldrb	r3, [r7, #12]
 8000ed6:	2b09      	cmp	r3, #9
 8000ed8:	d905      	bls.n	8000ee6 <AEBTask+0x32>
 8000eda:	7abb      	ldrb	r3, [r7, #10]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d110      	bne.n	8000f02 <AEBTask+0x4e>
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d10d      	bne.n	8000f02 <AEBTask+0x4e>
            {
                MotorDriver_voidStop(); // Stop the car using motor driver
 8000ee6:	f7ff fd8f 	bl	8000a08 <MotorDriver_voidStop>
                BackLed_ON();
 8000eea:	f7ff fcd9 	bl	80008a0 <BackLed_ON>
                Alarm_ON();
 8000eee:	f7ff fce9 	bl	80008c4 <Alarm_ON>
                vTaskDelay(pdMS_TO_TICKS(3000)); // Wait 3 seconds
 8000ef2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ef6:	f000 ff3d 	bl	8001d74 <vTaskDelay>
                BackLed_OFF();
 8000efa:	f7ff fcda 	bl	80008b2 <BackLed_OFF>
                Alarm_OFF();
 8000efe:	f7ff fcea 	bl	80008d6 <Alarm_OFF>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8000f02:	2032      	movs	r0, #50	; 0x32
 8000f04:	f000 ff36 	bl	8001d74 <vTaskDelay>
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000f08:	e7d8      	b.n	8000ebc <AEBTask+0x8>
 8000f0a:	bf00      	nop
 8000f0c:	20000024 	.word	0x20000024

08000f10 <LKSTask>:
    }
}


/* Lane Keeping System Task */
void LKSTask(void *pvParameters) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    SensorData_t receivedData;
    while (1) {
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <LKSTask+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f107 0108 	add.w	r1, r7, #8
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fb49 	bl	80015bc <xQueueReceive>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d11c      	bne.n	8000f6a <LKSTask+0x5a>
            if (receivedData.LEFT_IR == Black && receivedData.RIGHT_IR == Black) {
 8000f30:	7abb      	ldrb	r3, [r7, #10]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d105      	bne.n	8000f42 <LKSTask+0x32>
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <LKSTask+0x32>
                MotorDriver_voidMoveForward(); // Move forward
 8000f3c:	f7ff fd7c 	bl	8000a38 <MotorDriver_voidMoveForward>
 8000f40:	e013      	b.n	8000f6a <LKSTask+0x5a>
            } else if (receivedData.LEFT_IR == Black && receivedData.RIGHT_IR == White) {
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <LKSTask+0x44>
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <LKSTask+0x44>
                MotorDriver_voidMoveRight(); // Move right
 8000f4e:	f7ff fd8e 	bl	8000a6e <MotorDriver_voidMoveRight>
 8000f52:	e00a      	b.n	8000f6a <LKSTask+0x5a>
            } else if (receivedData.LEFT_IR == White && receivedData.RIGHT_IR == Black) {
 8000f54:	7abb      	ldrb	r3, [r7, #10]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <LKSTask+0x56>
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <LKSTask+0x56>
                MotorDriver_voidMoveLeft(); // Move left
 8000f60:	f7ff fda0 	bl	8000aa4 <MotorDriver_voidMoveLeft>
 8000f64:	e001      	b.n	8000f6a <LKSTask+0x5a>
            }else {
                MotorDriver_voidStop(); // Stop if unclear condition
 8000f66:	f7ff fd4f 	bl	8000a08 <MotorDriver_voidStop>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8000f6a:	2032      	movs	r0, #50	; 0x32
 8000f6c:	f000 ff02 	bl	8001d74 <vTaskDelay>
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000f70:	e7d2      	b.n	8000f18 <LKSTask+0x8>
 8000f72:	bf00      	nop
 8000f74:	20000024 	.word	0x20000024

08000f78 <ACCTask>:
    }
}

/* Adaptive Cruise Control Task */
void ACCTask(void *pvParameters) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    SensorData_t receivedData;
    while (1) {
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <ACCTask+0x60>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f107 0108 	add.w	r1, r7, #8
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fb15 	bl	80015bc <xQueueReceive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d11a      	bne.n	8000fce <ACCTask+0x56>
            if (receivedData.ultrasonic > 50) {
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	2b32      	cmp	r3, #50	; 0x32
 8000f9c:	d903      	bls.n	8000fa6 <ACCTask+0x2e>
                MotorDriver_voidControlSpeed(100); // Max speed
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f7ff fcfc 	bl	800099c <MotorDriver_voidControlSpeed>
 8000fa4:	e013      	b.n	8000fce <ACCTask+0x56>
            } else if (receivedData.ultrasonic >= 10 && receivedData.ultrasonic <= 50) {
 8000fa6:	7b3b      	ldrb	r3, [r7, #12]
 8000fa8:	2b09      	cmp	r3, #9
 8000faa:	d910      	bls.n	8000fce <ACCTask+0x56>
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
 8000fae:	2b32      	cmp	r3, #50	; 0x32
 8000fb0:	d80d      	bhi.n	8000fce <ACCTask+0x56>
            	u8 adaptiveSpeed = (receivedData.ultrasonic - 10) * 2;
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	3b0a      	subs	r3, #10
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
            	adaptiveSpeed = (adaptiveSpeed > 100) ? 100 : adaptiveSpeed;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	bf28      	it	cs
 8000fc2:	2364      	movcs	r3, #100	; 0x64
 8000fc4:	73fb      	strb	r3, [r7, #15]
            	MotorDriver_voidControlSpeed(adaptiveSpeed);
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fce7 	bl	800099c <MotorDriver_voidControlSpeed>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	f000 fed0 	bl	8001d74 <vTaskDelay>
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000fd4:	e7d4      	b.n	8000f80 <ACCTask+0x8>
 8000fd6:	bf00      	nop
 8000fd8:	20000024 	.word	0x20000024

08000fdc <ALCTask>:
    }
}

/* Automatic Light Control Task */
void ALCTask(void *pvParameters) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    SensorData_t receivedData;
    while (1) {
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <ALCTask+0x60>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f107 0108 	add.w	r1, r7, #8
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fae3 	bl	80015bc <xQueueReceive>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d11b      	bne.n	8001034 <ALCTask+0x58>
            if (receivedData.LEFT_LDR >= 93) {
 8000ffc:	7a3b      	ldrb	r3, [r7, #8]
 8000ffe:	2b5c      	cmp	r3, #92	; 0x5c
 8001000:	d902      	bls.n	8001008 <ALCTask+0x2c>
                LEDS_SetMaxBrightness(); // Max lighting
 8001002:	f7ff fc71 	bl	80008e8 <LEDS_SetMaxBrightness>
 8001006:	e015      	b.n	8001034 <ALCTask+0x58>
            } else if (receivedData.LEFT_LDR >= 80 && receivedData.LEFT_LDR < 93) {
 8001008:	7a3b      	ldrb	r3, [r7, #8]
 800100a:	2b4f      	cmp	r3, #79	; 0x4f
 800100c:	d907      	bls.n	800101e <ALCTask+0x42>
 800100e:	7a3b      	ldrb	r3, [r7, #8]
 8001010:	2b5c      	cmp	r3, #92	; 0x5c
 8001012:	d804      	bhi.n	800101e <ALCTask+0x42>
                LEDS_SetAdaptiveBrightness(receivedData.LEFT_LDR); // Adaptive lighting
 8001014:	7a3b      	ldrb	r3, [r7, #8]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fc70 	bl	80008fc <LEDS_SetAdaptiveBrightness>
 800101c:	e00a      	b.n	8001034 <ALCTask+0x58>
            } else if (receivedData.LEFT_LDR >= 20 && receivedData.LEFT_LDR < 80) {
 800101e:	7a3b      	ldrb	r3, [r7, #8]
 8001020:	2b13      	cmp	r3, #19
 8001022:	d905      	bls.n	8001030 <ALCTask+0x54>
 8001024:	7a3b      	ldrb	r3, [r7, #8]
 8001026:	2b4f      	cmp	r3, #79	; 0x4f
 8001028:	d802      	bhi.n	8001030 <ALCTask+0x54>
                LEDS_SetLowBrightness(); // Low brightness
 800102a:	f7ff fc89 	bl	8000940 <LEDS_SetLowBrightness>
 800102e:	e001      	b.n	8001034 <ALCTask+0x58>
            } else {
                LEDS_Off(); // Turn off LEDs
 8001030:	f7ff fc8f 	bl	8000952 <LEDS_Off>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f000 fe9d 	bl	8001d74 <vTaskDelay>
        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
 800103a:	e7d3      	b.n	8000fe4 <ALCTask+0x8>
 800103c:	20000024 	.word	0x20000024

08001040 <BluetoothTask>:
    }
}

/* Bluetooth Remote Control Task */
void BluetoothTask(void *pvParameters) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelay(pdMS_TO_TICKS(50));
 8001048:	2032      	movs	r0, #50	; 0x32
 800104a:	f000 fe93 	bl	8001d74 <vTaskDelay>
 800104e:	e7fb      	b.n	8001048 <BluetoothTask+0x8>

08001050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001054:	f7ff feb8 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800107e:	f002 fb39 	bl	80036f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001082:	f7ff fe31 	bl	8000ce8 <main>

08001086 <LoopForever>:

LoopForever:
  b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001094:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8001098:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800109c:	200021d0 	.word	0x200021d0

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>

080010a2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f103 0208 	add.w	r2, r3, #8
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f103 0208 	add.w	r2, r3, #8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f103 0208 	add.w	r2, r3, #8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110e:	d103      	bne.n	8001118 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e00c      	b.n	8001132 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3308      	adds	r3, #8
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e002      	b.n	8001126 <vListInsert+0x2e>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	429a      	cmp	r2, r3
 8001130:	d2f6      	bcs.n	8001120 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6892      	ldr	r2, [r2, #8]
 800117e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6852      	ldr	r2, [r2, #4]
 8001188:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	d103      	bne.n	800119c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10a      	bne.n	80011ea <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80011d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d8:	f383 8811 	msr	BASEPRI, r3
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	f3bf 8f4f 	dsb	sy
 80011e4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80011e6:	bf00      	nop
 80011e8:	e7fe      	b.n	80011e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d05d      	beq.n	80012ac <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d059      	beq.n	80012ac <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001200:	2100      	movs	r1, #0
 8001202:	fba3 2302 	umull	r2, r3, r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d000      	beq.n	800120c <xQueueGenericReset+0x50>
 800120a:	2101      	movs	r1, #1
 800120c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14c      	bne.n	80012ac <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001212:	f001 ffed 	bl	80031f0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001222:	fb01 f303 	mul.w	r3, r1, r3
 8001226:	441a      	add	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001242:	3b01      	subs	r3, #1
 8001244:	6939      	ldr	r1, [r7, #16]
 8001246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	441a      	add	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	22ff      	movs	r2, #255	; 0xff
 8001256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	22ff      	movs	r2, #255	; 0xff
 800125e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d114      	bne.n	8001292 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01a      	beq.n	80012a6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	3310      	adds	r3, #16
 8001274:	4618      	mov	r0, r3
 8001276:	f001 f8f5 	bl	8002464 <xTaskRemoveFromEventList>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d012      	beq.n	80012a6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <xQueueGenericReset+0x11c>)
 8001282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f3bf 8f4f 	dsb	sy
 800128c:	f3bf 8f6f 	isb	sy
 8001290:	e009      	b.n	80012a6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	3310      	adds	r3, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff03 	bl	80010a2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	3324      	adds	r3, #36	; 0x24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fefe 	bl	80010a2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80012a6:	f001 ffd3 	bl	8003250 <vPortExitCritical>
 80012aa:	e001      	b.n	80012b0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <xQueueGenericReset+0x110>
        __asm volatile
 80012b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ba:	f383 8811 	msr	BASEPRI, r3
 80012be:	f3bf 8f6f 	isb	sy
 80012c2:	f3bf 8f4f 	dsb	sy
 80012c6:	60bb      	str	r3, [r7, #8]
    }
 80012c8:	bf00      	nop
 80012ca:	e7fe      	b.n	80012ca <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000ed04 	.word	0xe000ed04

080012dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	4613      	mov	r3, r2
 80012e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02e      	beq.n	8001352 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80012f4:	2100      	movs	r1, #0
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	fba3 2302 	umull	r2, r3, r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d000      	beq.n	8001304 <xQueueGenericCreate+0x28>
 8001302:	2101      	movs	r1, #1
 8001304:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d123      	bne.n	8001352 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001312:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001316:	d81c      	bhi.n	8001352 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	3350      	adds	r3, #80	; 0x50
 8001326:	4618      	mov	r0, r3
 8001328:	f002 f81a 	bl	8003360 <pvPortMalloc>
 800132c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01c      	beq.n	800136e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3350      	adds	r3, #80	; 0x50
 800133c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f814 	bl	8001378 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001350:	e00d      	b.n	800136e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10a      	bne.n	800136e <xQueueGenericCreate+0x92>
        __asm volatile
 8001358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	f3bf 8f6f 	isb	sy
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	613b      	str	r3, [r7, #16]
    }
 800136a:	bf00      	nop
 800136c:	e7fe      	b.n	800136c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800136e:	69fb      	ldr	r3, [r7, #28]
    }
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e002      	b.n	800139a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80013a6:	2101      	movs	r1, #1
 80013a8:	69b8      	ldr	r0, [r7, #24]
 80013aa:	f7ff ff07 	bl	80011bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	78fa      	ldrb	r2, [r7, #3]
 80013b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80013d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10a      	bne.n	80013f2 <xQueueGenericSend+0x32>
        __asm volatile
 80013dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e0:	f383 8811 	msr	BASEPRI, r3
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80013ee:	bf00      	nop
 80013f0:	e7fe      	b.n	80013f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <xQueueGenericSend+0x40>
 80013f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <xQueueGenericSend+0x44>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <xQueueGenericSend+0x46>
 8001404:	2300      	movs	r3, #0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10a      	bne.n	8001420 <xQueueGenericSend+0x60>
        __asm volatile
 800140a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140e:	f383 8811 	msr	BASEPRI, r3
 8001412:	f3bf 8f6f 	isb	sy
 8001416:	f3bf 8f4f 	dsb	sy
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800141c:	bf00      	nop
 800141e:	e7fe      	b.n	800141e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d103      	bne.n	800142e <xQueueGenericSend+0x6e>
 8001426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <xQueueGenericSend+0x72>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <xQueueGenericSend+0x74>
 8001432:	2300      	movs	r3, #0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10a      	bne.n	800144e <xQueueGenericSend+0x8e>
        __asm volatile
 8001438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143c:	f383 8811 	msr	BASEPRI, r3
 8001440:	f3bf 8f6f 	isb	sy
 8001444:	f3bf 8f4f 	dsb	sy
 8001448:	623b      	str	r3, [r7, #32]
    }
 800144a:	bf00      	nop
 800144c:	e7fe      	b.n	800144c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800144e:	f001 fa17 	bl	8002880 <xTaskGetSchedulerState>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <xQueueGenericSend+0x9e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <xQueueGenericSend+0xa2>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <xQueueGenericSend+0xa4>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10a      	bne.n	800147e <xQueueGenericSend+0xbe>
        __asm volatile
 8001468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146c:	f383 8811 	msr	BASEPRI, r3
 8001470:	f3bf 8f6f 	isb	sy
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	61fb      	str	r3, [r7, #28]
    }
 800147a:	bf00      	nop
 800147c:	e7fe      	b.n	800147c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800147e:	f001 feb7 	bl	80031f0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	429a      	cmp	r2, r3
 800148c:	d302      	bcc.n	8001494 <xQueueGenericSend+0xd4>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d129      	bne.n	80014e8 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800149a:	f000 f96f 	bl	800177c <prvCopyDataToQueue>
 800149e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014aa:	3324      	adds	r3, #36	; 0x24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 ffd9 	bl	8002464 <xTaskRemoveFromEventList>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <xQueueGenericSend+0x1f8>)
 80014ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f3bf 8f4f 	dsb	sy
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	e00a      	b.n	80014e0 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <xQueueGenericSend+0x1f8>)
 80014d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f3bf 8f4f 	dsb	sy
 80014dc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80014e0:	f001 feb6 	bl	8003250 <vPortExitCritical>
                return pdPASS;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e063      	b.n	80015b0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80014ee:	f001 feaf 	bl	8003250 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e05c      	b.n	80015b0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d106      	bne.n	800150a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4618      	mov	r0, r3
 8001502:	f001 f885 	bl	8002610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800150a:	f001 fea1 	bl	8003250 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800150e:	f000 fcb7 	bl	8001e80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001512:	f001 fe6d 	bl	80031f0 <vPortEnterCritical>
 8001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800151c:	b25b      	sxtb	r3, r3
 800151e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001522:	d103      	bne.n	800152c <xQueueGenericSend+0x16c>
 8001524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001532:	b25b      	sxtb	r3, r3
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d103      	bne.n	8001542 <xQueueGenericSend+0x182>
 800153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001542:	f001 fe85 	bl	8003250 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001546:	1d3a      	adds	r2, r7, #4
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f001 f874 	bl	800263c <xTaskCheckForTimeOut>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d124      	bne.n	80015a4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800155a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800155c:	f000 fa06 	bl	800196c <prvIsQueueFull>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d018      	beq.n	8001598 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001568:	3310      	adds	r3, #16
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f000 ff0e 	bl	8002390 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001576:	f000 f991 	bl	800189c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800157a:	f000 fc8f 	bl	8001e9c <xTaskResumeAll>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	f47f af7c 	bne.w	800147e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <xQueueGenericSend+0x1f8>)
 8001588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f3bf 8f4f 	dsb	sy
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	e772      	b.n	800147e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800159a:	f000 f97f 	bl	800189c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800159e:	f000 fc7d 	bl	8001e9c <xTaskResumeAll>
 80015a2:	e76c      	b.n	800147e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80015a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015a6:	f000 f979 	bl	800189c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015aa:	f000 fc77 	bl	8001e9c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80015ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3738      	adds	r7, #56	; 0x38
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	e000ed04 	.word	0xe000ed04

080015bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10a      	bne.n	80015ec <xQueueReceive+0x30>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	623b      	str	r3, [r7, #32]
    }
 80015e8:	bf00      	nop
 80015ea:	e7fe      	b.n	80015ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <xQueueReceive+0x3e>
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <xQueueReceive+0x42>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <xQueueReceive+0x44>
 80015fe:	2300      	movs	r3, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <xQueueReceive+0x5e>
        __asm volatile
 8001604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001608:	f383 8811 	msr	BASEPRI, r3
 800160c:	f3bf 8f6f 	isb	sy
 8001610:	f3bf 8f4f 	dsb	sy
 8001614:	61fb      	str	r3, [r7, #28]
    }
 8001616:	bf00      	nop
 8001618:	e7fe      	b.n	8001618 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800161a:	f001 f931 	bl	8002880 <xTaskGetSchedulerState>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <xQueueReceive+0x6e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <xQueueReceive+0x72>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <xQueueReceive+0x74>
 800162e:	2300      	movs	r3, #0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10a      	bne.n	800164a <xQueueReceive+0x8e>
        __asm volatile
 8001634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001638:	f383 8811 	msr	BASEPRI, r3
 800163c:	f3bf 8f6f 	isb	sy
 8001640:	f3bf 8f4f 	dsb	sy
 8001644:	61bb      	str	r3, [r7, #24]
    }
 8001646:	bf00      	nop
 8001648:	e7fe      	b.n	8001648 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800164a:	f001 fdd1 	bl	80031f0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01f      	beq.n	800169a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800165e:	f000 f8f7 	bl	8001850 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00f      	beq.n	8001692 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	3310      	adds	r3, #16
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fef4 	bl	8002464 <xTaskRemoveFromEventList>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <xQueueReceive+0x1bc>)
 8001684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001692:	f001 fddd 	bl	8003250 <vPortExitCritical>
                return pdPASS;
 8001696:	2301      	movs	r3, #1
 8001698:	e069      	b.n	800176e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80016a0:	f001 fdd6 	bl	8003250 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e062      	b.n	800176e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 ffac 	bl	8002610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80016bc:	f001 fdc8 	bl	8003250 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80016c0:	f000 fbde 	bl	8001e80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016c4:	f001 fd94 	bl	80031f0 <vPortEnterCritical>
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d103      	bne.n	80016de <xQueueReceive+0x122>
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	d103      	bne.n	80016f4 <xQueueReceive+0x138>
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016f4:	f001 fdac 	bl	8003250 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016f8:	1d3a      	adds	r2, r7, #4
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f000 ff9b 	bl	800263c <xTaskCheckForTimeOut>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d123      	bne.n	8001754 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800170c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800170e:	f000 f917 	bl	8001940 <prvIsQueueEmpty>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	3324      	adds	r3, #36	; 0x24
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fe35 	bl	8002390 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001728:	f000 f8b8 	bl	800189c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800172c:	f000 fbb6 	bl	8001e9c <xTaskResumeAll>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d189      	bne.n	800164a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <xQueueReceive+0x1bc>)
 8001738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	e780      	b.n	800164a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800174a:	f000 f8a7 	bl	800189c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800174e:	f000 fba5 	bl	8001e9c <xTaskResumeAll>
 8001752:	e77a      	b.n	800164a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001756:	f000 f8a1 	bl	800189c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800175a:	f000 fb9f 	bl	8001e9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800175e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001760:	f000 f8ee 	bl	8001940 <prvIsQueueEmpty>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f43f af6f 	beq.w	800164a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800176c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800176e:	4618      	mov	r0, r3
 8001770:	3730      	adds	r7, #48	; 0x30
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000ed04 	.word	0xe000ed04

0800177c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10d      	bne.n	80017b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d14d      	bne.n	800183e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f888 	bl	80028bc <xTaskPriorityDisinherit>
 80017ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	e043      	b.n	800183e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d119      	bne.n	80017f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6858      	ldr	r0, [r3, #4]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	461a      	mov	r2, r3
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	f001 ffb8 	bl	800373c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	441a      	add	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d32b      	bcc.n	800183e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	e026      	b.n	800183e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	68d8      	ldr	r0, [r3, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	461a      	mov	r2, r3
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	f001 ff9e 	bl	800373c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	425b      	negs	r3, r3
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	425b      	negs	r3, r3
 8001826:	441a      	add	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d105      	bne.n	800183e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	3b01      	subs	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001846:	697b      	ldr	r3, [r7, #20]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d018      	beq.n	8001894 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	441a      	add	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d303      	bcc.n	8001884 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	461a      	mov	r2, r3
 800188e:	6838      	ldr	r0, [r7, #0]
 8001890:	f001 ff54 	bl	800373c <memcpy>
    }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80018a4:	f001 fca4 	bl	80031f0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018b0:	e011      	b.n	80018d6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d012      	beq.n	80018e0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3324      	adds	r3, #36	; 0x24
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fdd0 	bl	8002464 <xTaskRemoveFromEventList>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80018ca:	f000 ff1d 	bl	8002708 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dce9      	bgt.n	80018b2 <prvUnlockQueue+0x16>
 80018de:	e000      	b.n	80018e2 <prvUnlockQueue+0x46>
                    break;
 80018e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	22ff      	movs	r2, #255	; 0xff
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80018ea:	f001 fcb1 	bl	8003250 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80018ee:	f001 fc7f 	bl	80031f0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018fa:	e011      	b.n	8001920 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d012      	beq.n	800192a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3310      	adds	r3, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fdab 	bl	8002464 <xTaskRemoveFromEventList>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001914:	f000 fef8 	bl	8002708 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	3b01      	subs	r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001924:	2b00      	cmp	r3, #0
 8001926:	dce9      	bgt.n	80018fc <prvUnlockQueue+0x60>
 8001928:	e000      	b.n	800192c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800192a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001934:	f001 fc8c 	bl	8003250 <vPortExitCritical>
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001948:	f001 fc52 	bl	80031f0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001954:	2301      	movs	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e001      	b.n	800195e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800195e:	f001 fc77 	bl	8003250 <vPortExitCritical>

    return xReturn;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001974:	f001 fc3c 	bl	80031f0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	429a      	cmp	r2, r3
 8001982:	d102      	bne.n	800198a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001984:	2301      	movs	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e001      	b.n	800198e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800198e:	f001 fc5f 	bl	8003250 <vPortExitCritical>

    return xReturn;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80019b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b4:	f383 8811 	msr	BASEPRI, r3
 80019b8:	f3bf 8f6f 	isb	sy
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	60fb      	str	r3, [r7, #12]
    }
 80019c2:	bf00      	nop
 80019c4:	e7fe      	b.n	80019c4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d024      	beq.n	8001a16 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e01e      	b.n	8001a10 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <vQueueAddToRegistry+0x98>)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d105      	bne.n	80019ee <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <vQueueAddToRegistry+0x98>)
 80019e8:	4413      	add	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
                    break;
 80019ec:	e013      	b.n	8001a16 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <vQueueAddToRegistry+0x6e>
 80019f4:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <vQueueAddToRegistry+0x98>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d104      	bne.n	8001a0a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <vQueueAddToRegistry+0x98>)
 8001a06:	4413      	add	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b07      	cmp	r3, #7
 8001a14:	d9dd      	bls.n	80019d2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	2000002c 	.word	0x2000002c

08001a38 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001a48:	f001 fbd2 	bl	80031f0 <vPortEnterCritical>
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d103      	bne.n	8001a62 <vQueueWaitForMessageRestricted+0x2a>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6e:	d103      	bne.n	8001a78 <vQueueWaitForMessageRestricted+0x40>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a78:	f001 fbea 	bl	8003250 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d106      	bne.n	8001a92 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3324      	adds	r3, #36	; 0x24
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fca3 	bl	80023d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff02 	bl	800189c <prvUnlockQueue>
    }
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fc53 	bl	8003360 <pvPortMalloc>
 8001aba:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d013      	beq.n	8001aea <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ac2:	2058      	movs	r0, #88	; 0x58
 8001ac4:	f001 fc4c 	bl	8003360 <pvPortMalloc>
 8001ac8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001ad0:	2258      	movs	r2, #88	; 0x58
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	69f8      	ldr	r0, [r7, #28]
 8001ad6:	f001 fe3f 	bl	8003758 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae0:	e005      	b.n	8001aee <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f001 fcf6 	bl	80034d4 <vPortFree>
 8001ae8:	e001      	b.n	8001aee <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9303      	str	r3, [sp, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f80e 	bl	8001b2c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001b10:	69f8      	ldr	r0, [r7, #28]
 8001b12:	f000 f899 	bl	8001c48 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e002      	b.n	8001b22 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001b22:	69bb      	ldr	r3, [r7, #24]
    }
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	21a5      	movs	r1, #165	; 0xa5
 8001b46:	f001 fe07 	bl	8003758 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b54:	3b01      	subs	r3, #1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	617b      	str	r3, [r7, #20]
    }
 8001b80:	bf00      	nop
 8001b82:	e7fe      	b.n	8001b82 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01e      	beq.n	8001bc8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e012      	b.n	8001bb6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4413      	add	r3, r2
 8001b96:	7819      	ldrb	r1, [r3, #0]
 8001b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3334      	adds	r3, #52	; 0x34
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d9e9      	bls.n	8001b90 <prvInitialiseNewTask+0x64>
 8001bbc:	e000      	b.n	8001bc0 <prvInitialiseNewTask+0x94>
            {
                break;
 8001bbe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d90a      	bls.n	8001be4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8001bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd2:	f383 8811 	msr	BASEPRI, r3
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	f3bf 8f4f 	dsb	sy
 8001bde:	613b      	str	r3, [r7, #16]
    }
 8001be0:	bf00      	nop
 8001be2:	e7fe      	b.n	8001be2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d901      	bls.n	8001bee <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001bea:	2304      	movs	r3, #4
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa6e 	bl	80010e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	3318      	adds	r3, #24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fa69 	bl	80010e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c12:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	f1c3 0205 	rsb	r2, r3, #5
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	68f9      	ldr	r1, [r7, #12]
 8001c28:	69b8      	ldr	r0, [r7, #24]
 8001c2a:	f001 f9ed 	bl	8003008 <pxPortInitialiseStack>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c32:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001c50:	f001 face 	bl	80031f0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001c54:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <prvAddNewTaskToReadyList+0x110>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a3f      	ldr	r2, [pc, #252]	; (8001d58 <prvAddNewTaskToReadyList+0x110>)
 8001c5c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <prvAddNewTaskToReadyList+0x114>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c66:	4a3d      	ldr	r2, [pc, #244]	; (8001d5c <prvAddNewTaskToReadyList+0x114>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <prvAddNewTaskToReadyList+0x110>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d110      	bne.n	8001c96 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c74:	f000 fd6c 	bl	8002750 <prvInitialiseTaskLists>
 8001c78:	e00d      	b.n	8001c96 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <prvAddNewTaskToReadyList+0x118>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <prvAddNewTaskToReadyList+0x114>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d802      	bhi.n	8001c96 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <prvAddNewTaskToReadyList+0x114>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <prvAddNewTaskToReadyList+0x11c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <prvAddNewTaskToReadyList+0x11c>)
 8001c9e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <prvAddNewTaskToReadyList+0x11c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	2201      	movs	r2, #1
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <prvAddNewTaskToReadyList+0x120>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <prvAddNewTaskToReadyList+0x120>)
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cbe:	492b      	ldr	r1, [pc, #172]	; (8001d6c <prvAddNewTaskToReadyList+0x124>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3204      	adds	r2, #4
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1d1a      	adds	r2, r3, #4
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <prvAddNewTaskToReadyList+0x124>)
 8001cfe:	441a      	add	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	615a      	str	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	4918      	ldr	r1, [pc, #96]	; (8001d6c <prvAddNewTaskToReadyList+0x124>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1c59      	adds	r1, r3, #1
 8001d18:	4814      	ldr	r0, [pc, #80]	; (8001d6c <prvAddNewTaskToReadyList+0x124>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001d26:	f001 fa93 	bl	8003250 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <prvAddNewTaskToReadyList+0x118>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <prvAddNewTaskToReadyList+0x114>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <prvAddNewTaskToReadyList+0x128>)
 8001d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000144 	.word	0x20000144
 8001d5c:	2000006c 	.word	0x2000006c
 8001d60:	20000150 	.word	0x20000150
 8001d64:	20000160 	.word	0x20000160
 8001d68:	2000014c 	.word	0x2000014c
 8001d6c:	20000070 	.word	0x20000070
 8001d70:	e000ed04 	.word	0xe000ed04

08001d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <vTaskDelay+0x60>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <vTaskDelay+0x30>
        __asm volatile
 8001d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	60bb      	str	r3, [r7, #8]
    }
 8001da0:	bf00      	nop
 8001da2:	e7fe      	b.n	8001da2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001da4:	f000 f86c 	bl	8001e80 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001da8:	2100      	movs	r1, #0
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fe2a 	bl	8002a04 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001db0:	f000 f874 	bl	8001e9c <xTaskResumeAll>
 8001db4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <vTaskDelay+0x64>)
 8001dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2000016c 	.word	0x2000016c
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <vTaskStartScheduler+0x88>)
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2282      	movs	r2, #130	; 0x82
 8001dee:	491e      	ldr	r1, [pc, #120]	; (8001e68 <vTaskStartScheduler+0x8c>)
 8001df0:	481e      	ldr	r0, [pc, #120]	; (8001e6c <vTaskStartScheduler+0x90>)
 8001df2:	f7ff fe55 	bl	8001aa0 <xTaskCreate>
 8001df6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001dfe:	f000 fe81 	bl	8002b04 <xTimerCreateTimerTask>
 8001e02:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d116      	bne.n	8001e38 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	60bb      	str	r3, [r7, #8]
    }
 8001e1c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <vTaskStartScheduler+0x94>)
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <vTaskStartScheduler+0x98>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <vTaskStartScheduler+0x9c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001e32:	f001 f96b 	bl	800310c <xPortStartScheduler>
 8001e36:	e00e      	b.n	8001e56 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d10a      	bne.n	8001e56 <vTaskStartScheduler+0x7a>
        __asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	607b      	str	r3, [r7, #4]
    }
 8001e52:	bf00      	nop
 8001e54:	e7fe      	b.n	8001e54 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <vTaskStartScheduler+0xa0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000168 	.word	0x20000168
 8001e68:	080037a8 	.word	0x080037a8
 8001e6c:	08002721 	.word	0x08002721
 8001e70:	20000164 	.word	0x20000164
 8001e74:	20000150 	.word	0x20000150
 8001e78:	20000148 	.word	0x20000148
 8001e7c:	20000000 	.word	0x20000000

08001e80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <vTaskSuspendAll+0x18>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <vTaskSuspendAll+0x18>)
 8001e8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000016c 	.word	0x2000016c

08001e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001eaa:	4b71      	ldr	r3, [pc, #452]	; (8002070 <xTaskResumeAll+0x1d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <xTaskResumeAll+0x2c>
        __asm volatile
 8001eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	607b      	str	r3, [r7, #4]
    }
 8001ec4:	bf00      	nop
 8001ec6:	e7fe      	b.n	8001ec6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001ec8:	f001 f992 	bl	80031f0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001ecc:	4b68      	ldr	r3, [pc, #416]	; (8002070 <xTaskResumeAll+0x1d4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	4a67      	ldr	r2, [pc, #412]	; (8002070 <xTaskResumeAll+0x1d4>)
 8001ed4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ed6:	4b66      	ldr	r3, [pc, #408]	; (8002070 <xTaskResumeAll+0x1d4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 80c0 	bne.w	8002060 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ee0:	4b64      	ldr	r3, [pc, #400]	; (8002074 <xTaskResumeAll+0x1d8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80bb 	beq.w	8002060 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001eea:	e08a      	b.n	8002002 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <xTaskResumeAll+0x1dc>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	6a12      	ldr	r2, [r2, #32]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	69d2      	ldr	r2, [r2, #28]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3318      	adds	r3, #24
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d103      	bne.n	8001f22 <xTaskResumeAll+0x86>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	68d2      	ldr	r2, [r2, #12]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	6892      	ldr	r2, [r2, #8]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3304      	adds	r3, #4
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d103      	bne.n	8001f60 <xTaskResumeAll+0xc4>
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2201      	movs	r2, #1
 8001f76:	409a      	lsls	r2, r3
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <xTaskResumeAll+0x1e0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	4a3f      	ldr	r2, [pc, #252]	; (800207c <xTaskResumeAll+0x1e0>)
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f86:	493e      	ldr	r1, [pc, #248]	; (8002080 <xTaskResumeAll+0x1e4>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3304      	adds	r3, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	3204      	adds	r2, #4
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <xTaskResumeAll+0x1e4>)
 8001fc6:	441a      	add	r2, r3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	492b      	ldr	r1, [pc, #172]	; (8002080 <xTaskResumeAll+0x1e4>)
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	4827      	ldr	r0, [pc, #156]	; (8002080 <xTaskResumeAll+0x1e4>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <xTaskResumeAll+0x1e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d302      	bcc.n	8002002 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <xTaskResumeAll+0x1ec>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <xTaskResumeAll+0x1dc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f47f af70 	bne.w	8001eec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002012:	f000 fc1b 	bl	800284c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <xTaskResumeAll+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002022:	f000 f845 	bl	80020b0 <xTaskIncrementTick>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <xTaskResumeAll+0x1ec>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3b01      	subs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f1      	bne.n	8002022 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <xTaskResumeAll+0x1f0>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <xTaskResumeAll+0x1ec>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <xTaskResumeAll+0x1f4>)
 8002052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002060:	f001 f8f6 	bl	8003250 <vPortExitCritical>

    return xAlreadyYielded;
 8002064:	69bb      	ldr	r3, [r7, #24]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000016c 	.word	0x2000016c
 8002074:	20000144 	.word	0x20000144
 8002078:	20000104 	.word	0x20000104
 800207c:	2000014c 	.word	0x2000014c
 8002080:	20000070 	.word	0x20000070
 8002084:	2000006c 	.word	0x2000006c
 8002088:	20000158 	.word	0x20000158
 800208c:	20000154 	.word	0x20000154
 8002090:	e000ed04 	.word	0xe000ed04

08002094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <xTaskGetTickCount+0x18>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000148 	.word	0x20000148

080020b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <xTaskIncrementTick+0x200>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80ec 	bne.w	800229c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020c4:	4b7b      	ldr	r3, [pc, #492]	; (80022b4 <xTaskIncrementTick+0x204>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80020cc:	4a79      	ldr	r2, [pc, #484]	; (80022b4 <xTaskIncrementTick+0x204>)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d120      	bne.n	800211a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80020d8:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <xTaskIncrementTick+0x208>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <xTaskIncrementTick+0x48>
        __asm volatile
 80020e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e6:	f383 8811 	msr	BASEPRI, r3
 80020ea:	f3bf 8f6f 	isb	sy
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	607b      	str	r3, [r7, #4]
    }
 80020f4:	bf00      	nop
 80020f6:	e7fe      	b.n	80020f6 <xTaskIncrementTick+0x46>
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <xTaskIncrementTick+0x208>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <xTaskIncrementTick+0x20c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6d      	ldr	r2, [pc, #436]	; (80022b8 <xTaskIncrementTick+0x208>)
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4a6d      	ldr	r2, [pc, #436]	; (80022bc <xTaskIncrementTick+0x20c>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b6c      	ldr	r3, [pc, #432]	; (80022c0 <xTaskIncrementTick+0x210>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3301      	adds	r3, #1
 8002112:	4a6b      	ldr	r2, [pc, #428]	; (80022c0 <xTaskIncrementTick+0x210>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	f000 fb99 	bl	800284c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <xTaskIncrementTick+0x214>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a3a      	ldr	r2, [r7, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	f0c0 80a6 	bcc.w	8002272 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002126:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <xTaskIncrementTick+0x208>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002130:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <xTaskIncrementTick+0x214>)
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	601a      	str	r2, [r3, #0]
                    break;
 8002138:	e09b      	b.n	8002272 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <xTaskIncrementTick+0x208>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800214a:	6a3a      	ldr	r2, [r7, #32]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	429a      	cmp	r2, r3
 8002150:	d203      	bcs.n	800215a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002152:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <xTaskIncrementTick+0x214>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002158:	e08b      	b.n	8002272 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	68d2      	ldr	r2, [r2, #12]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	6892      	ldr	r2, [r2, #8]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3304      	adds	r3, #4
 800217c:	429a      	cmp	r2, r3
 800217e:	d103      	bne.n	8002188 <xTaskIncrementTick+0xd8>
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1e5a      	subs	r2, r3, #1
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01e      	beq.n	80021de <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	6a12      	ldr	r2, [r2, #32]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	69d2      	ldr	r2, [r2, #28]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3318      	adds	r3, #24
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d103      	bne.n	80021ce <xTaskIncrementTick+0x11e>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <xTaskIncrementTick+0x218>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <xTaskIncrementTick+0x218>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4935      	ldr	r1, [pc, #212]	; (80022cc <xTaskIncrementTick+0x21c>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	3204      	adds	r2, #4
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1d1a      	adds	r2, r3, #4
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4a26      	ldr	r2, [pc, #152]	; (80022cc <xTaskIncrementTick+0x21c>)
 8002234:	441a      	add	r2, r3
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	615a      	str	r2, [r3, #20]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223e:	4923      	ldr	r1, [pc, #140]	; (80022cc <xTaskIncrementTick+0x21c>)
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c59      	adds	r1, r3, #1
 800224e:	481f      	ldr	r0, [pc, #124]	; (80022cc <xTaskIncrementTick+0x21c>)
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4403      	add	r3, r0
 800225a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <xTaskIncrementTick+0x220>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	429a      	cmp	r2, r3
 8002268:	f67f af5d 	bls.w	8002126 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800226c:	2301      	movs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002270:	e759      	b.n	8002126 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <xTaskIncrementTick+0x220>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	4914      	ldr	r1, [pc, #80]	; (80022cc <xTaskIncrementTick+0x21c>)
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d901      	bls.n	800228e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800228a:	2301      	movs	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <xTaskIncrementTick+0x224>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002296:	2301      	movs	r3, #1
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e004      	b.n	80022a6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <xTaskIncrementTick+0x228>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <xTaskIncrementTick+0x228>)
 80022a4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000016c 	.word	0x2000016c
 80022b4:	20000148 	.word	0x20000148
 80022b8:	200000fc 	.word	0x200000fc
 80022bc:	20000100 	.word	0x20000100
 80022c0:	2000015c 	.word	0x2000015c
 80022c4:	20000164 	.word	0x20000164
 80022c8:	2000014c 	.word	0x2000014c
 80022cc:	20000070 	.word	0x20000070
 80022d0:	2000006c 	.word	0x2000006c
 80022d4:	20000158 	.word	0x20000158
 80022d8:	20000154 	.word	0x20000154

080022dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <vTaskSwitchContext+0xa0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <vTaskSwitchContext+0xa4>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80022f0:	e03f      	b.n	8002372 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80022f2:	4b23      	ldr	r3, [pc, #140]	; (8002380 <vTaskSwitchContext+0xa4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <vTaskSwitchContext+0xa8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002306:	7afb      	ldrb	r3, [r7, #11]
 8002308:	f1c3 031f 	rsb	r3, r3, #31
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	491e      	ldr	r1, [pc, #120]	; (8002388 <vTaskSwitchContext+0xac>)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	607b      	str	r3, [r7, #4]
    }
 8002334:	bf00      	nop
 8002336:	e7fe      	b.n	8002336 <vTaskSwitchContext+0x5a>
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <vTaskSwitchContext+0xac>)
 8002344:	4413      	add	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3308      	adds	r3, #8
 800235a:	429a      	cmp	r2, r3
 800235c:	d104      	bne.n	8002368 <vTaskSwitchContext+0x8c>
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <vTaskSwitchContext+0xb0>)
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	2000016c 	.word	0x2000016c
 8002380:	20000158 	.word	0x20000158
 8002384:	2000014c 	.word	0x2000014c
 8002388:	20000070 	.word	0x20000070
 800238c:	2000006c 	.word	0x2000006c

08002390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	60fb      	str	r3, [r7, #12]
    }
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <vTaskPlaceOnEventList+0x44>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3318      	adds	r3, #24
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fe9a 	bl	80010f8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023c4:	2101      	movs	r1, #1
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f000 fb1c 	bl	8002a04 <prvAddCurrentTaskToDelayedList>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2000006c 	.word	0x2000006c

080023d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	613b      	str	r3, [r7, #16]
    }
 80023fc:	bf00      	nop
 80023fe:	e7fe      	b.n	80023fe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <vTaskPlaceOnEventListRestricted+0x88>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	61da      	str	r2, [r3, #28]
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <vTaskPlaceOnEventListRestricted+0x88>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	621a      	str	r2, [r3, #32]
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <vTaskPlaceOnEventListRestricted+0x88>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	3218      	adds	r2, #24
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <vTaskPlaceOnEventListRestricted+0x88>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f103 0218 	add.w	r2, r3, #24
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <vTaskPlaceOnEventListRestricted+0x88>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	68b8      	ldr	r0, [r7, #8]
 8002452:	f000 fad7 	bl	8002a04 <prvAddCurrentTaskToDelayedList>
    }
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000006c 	.word	0x2000006c

08002464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002464:	b480      	push	{r7}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	60fb      	str	r3, [r7, #12]
    }
 800248c:	bf00      	nop
 800248e:	e7fe      	b.n	800248e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	6a3a      	ldr	r2, [r7, #32]
 800249c:	6a12      	ldr	r2, [r2, #32]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	69d2      	ldr	r2, [r2, #28]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	3318      	adds	r3, #24
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d103      	bne.n	80024be <xTaskRemoveFromEventList+0x5a>
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ce:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <xTaskRemoveFromEventList+0x194>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d15e      	bne.n	8002594 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	68d2      	ldr	r2, [r2, #12]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	6a3a      	ldr	r2, [r7, #32]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	3304      	adds	r3, #4
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d103      	bne.n	8002504 <xTaskRemoveFromEventList+0xa0>
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	4b37      	ldr	r3, [pc, #220]	; (80025fc <xTaskRemoveFromEventList+0x198>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	4a36      	ldr	r2, [pc, #216]	; (80025fc <xTaskRemoveFromEventList+0x198>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	4935      	ldr	r1, [pc, #212]	; (8002600 <xTaskRemoveFromEventList+0x19c>)
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3304      	adds	r3, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	3204      	adds	r2, #4
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	1d1a      	adds	r2, r3, #4
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <xTaskRemoveFromEventList+0x19c>)
 800256a:	441a      	add	r2, r3
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	4922      	ldr	r1, [pc, #136]	; (8002600 <xTaskRemoveFromEventList+0x19c>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	481e      	ldr	r0, [pc, #120]	; (8002600 <xTaskRemoveFromEventList+0x19c>)
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4403      	add	r3, r0
 8002590:	6019      	str	r1, [r3, #0]
 8002592:	e01b      	b.n	80025cc <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <xTaskRemoveFromEventList+0x1a0>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	61da      	str	r2, [r3, #28]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	621a      	str	r2, [r3, #32]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	3218      	adds	r2, #24
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f103 0218 	add.w	r2, r3, #24
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	4a11      	ldr	r2, [pc, #68]	; (8002604 <xTaskRemoveFromEventList+0x1a0>)
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <xTaskRemoveFromEventList+0x1a0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <xTaskRemoveFromEventList+0x1a0>)
 80025ca:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <xTaskRemoveFromEventList+0x1a4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d905      	bls.n	80025e6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80025da:	2301      	movs	r3, #1
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <xTaskRemoveFromEventList+0x1a8>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e001      	b.n	80025ea <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	372c      	adds	r7, #44	; 0x2c
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000016c 	.word	0x2000016c
 80025fc:	2000014c 	.word	0x2000014c
 8002600:	20000070 	.word	0x20000070
 8002604:	20000104 	.word	0x20000104
 8002608:	2000006c 	.word	0x2000006c
 800260c:	20000158 	.word	0x20000158

08002610 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <vTaskInternalSetTimeOutState+0x24>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <vTaskInternalSetTimeOutState+0x28>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	605a      	str	r2, [r3, #4]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000015c 	.word	0x2000015c
 8002638:	20000148 	.word	0x20000148

0800263c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	613b      	str	r3, [r7, #16]
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	60fb      	str	r3, [r7, #12]
    }
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800267e:	f000 fdb7 	bl	80031f0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <xTaskCheckForTimeOut+0xc4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d102      	bne.n	80026a2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e026      	b.n	80026f0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <xTaskCheckForTimeOut+0xc8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d00a      	beq.n	80026c4 <xTaskCheckForTimeOut+0x88>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d305      	bcc.n	80026c4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e015      	b.n	80026f0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d20b      	bcs.n	80026e6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1ad2      	subs	r2, r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff98 	bl	8002610 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	e004      	b.n	80026f0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80026f0:	f000 fdae 	bl	8003250 <vPortExitCritical>

    return xReturn;
 80026f4:	69fb      	ldr	r3, [r7, #28]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000148 	.word	0x20000148
 8002704:	2000015c 	.word	0x2000015c

08002708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <vTaskMissedYield+0x14>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000158 	.word	0x20000158

08002720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002728:	f000 f852 	bl	80027d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <prvIdleTask+0x28>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d9f9      	bls.n	8002728 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <prvIdleTask+0x2c>)
 8002736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002744:	e7f0      	b.n	8002728 <prvIdleTask+0x8>
 8002746:	bf00      	nop
 8002748:	20000070 	.word	0x20000070
 800274c:	e000ed04 	.word	0xe000ed04

08002750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	e00c      	b.n	8002776 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <prvInitialiseTaskLists+0x60>)
 8002768:	4413      	add	r3, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fc99 	bl	80010a2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3301      	adds	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d9ef      	bls.n	800275c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800277c:	480d      	ldr	r0, [pc, #52]	; (80027b4 <prvInitialiseTaskLists+0x64>)
 800277e:	f7fe fc90 	bl	80010a2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002782:	480d      	ldr	r0, [pc, #52]	; (80027b8 <prvInitialiseTaskLists+0x68>)
 8002784:	f7fe fc8d 	bl	80010a2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002788:	480c      	ldr	r0, [pc, #48]	; (80027bc <prvInitialiseTaskLists+0x6c>)
 800278a:	f7fe fc8a 	bl	80010a2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <prvInitialiseTaskLists+0x70>)
 8002790:	f7fe fc87 	bl	80010a2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002794:	480b      	ldr	r0, [pc, #44]	; (80027c4 <prvInitialiseTaskLists+0x74>)
 8002796:	f7fe fc84 	bl	80010a2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <prvInitialiseTaskLists+0x78>)
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <prvInitialiseTaskLists+0x64>)
 800279e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <prvInitialiseTaskLists+0x7c>)
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <prvInitialiseTaskLists+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000070 	.word	0x20000070
 80027b4:	200000d4 	.word	0x200000d4
 80027b8:	200000e8 	.word	0x200000e8
 80027bc:	20000104 	.word	0x20000104
 80027c0:	20000118 	.word	0x20000118
 80027c4:	20000130 	.word	0x20000130
 80027c8:	200000fc 	.word	0x200000fc
 80027cc:	20000100 	.word	0x20000100

080027d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027d6:	e019      	b.n	800280c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80027d8:	f000 fd0a 	bl	80031f0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <prvCheckTasksWaitingTermination+0x50>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fcbd 	bl	8001168 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <prvCheckTasksWaitingTermination+0x54>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <prvCheckTasksWaitingTermination+0x54>)
 80027f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <prvCheckTasksWaitingTermination+0x58>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <prvCheckTasksWaitingTermination+0x58>)
 8002800:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002802:	f000 fd25 	bl	8003250 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f810 	bl	800282c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <prvCheckTasksWaitingTermination+0x58>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e1      	bne.n	80027d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000118 	.word	0x20000118
 8002824:	20000144 	.word	0x20000144
 8002828:	2000012c 	.word	0x2000012c

0800282c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fe4b 	bl	80034d4 <vPortFree>
            vPortFree( pxTCB );
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fe48 	bl	80034d4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <prvResetNextTaskUnblockTime+0x2c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d104      	bne.n	8002864 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <prvResetNextTaskUnblockTime+0x30>)
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002862:	e005      	b.n	8002870 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <prvResetNextTaskUnblockTime+0x2c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <prvResetNextTaskUnblockTime+0x30>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	200000fc 	.word	0x200000fc
 800287c:	20000164 	.word	0x20000164

08002880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <xTaskGetSchedulerState+0x34>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800288e:	2301      	movs	r3, #1
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	e008      	b.n	80028a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <xTaskGetSchedulerState+0x38>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800289c:	2302      	movs	r3, #2
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	e001      	b.n	80028a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80028a6:	687b      	ldr	r3, [r7, #4]
    }
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000150 	.word	0x20000150
 80028b8:	2000016c 	.word	0x2000016c

080028bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 808c 	beq.w	80029ec <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80028d4:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <xTaskPriorityDisinherit+0x13c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d00a      	beq.n	80028f4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	613b      	str	r3, [r7, #16]
    }
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	60fb      	str	r3, [r7, #12]
    }
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002924:	429a      	cmp	r2, r3
 8002926:	d061      	beq.n	80029ec <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d15d      	bne.n	80029ec <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3304      	adds	r3, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fc17 	bl	8001168 <uxListRemove>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2201      	movs	r2, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <xTaskPriorityDisinherit+0x140>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4013      	ands	r3, r2
 8002952:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <xTaskPriorityDisinherit+0x140>)
 8002954:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f1c3 0205 	rsb	r2, r3, #5
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	2201      	movs	r2, #1
 8002970:	409a      	lsls	r2, r3
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <xTaskPriorityDisinherit+0x140>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	4a20      	ldr	r2, [pc, #128]	; (80029fc <xTaskPriorityDisinherit+0x140>)
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	491f      	ldr	r1, [pc, #124]	; (8002a00 <xTaskPriorityDisinherit+0x144>)
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	3204      	adds	r2, #4
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1d1a      	adds	r2, r3, #4
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <xTaskPriorityDisinherit+0x144>)
 80029c0:	441a      	add	r2, r3
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <xTaskPriorityDisinherit+0x144>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <xTaskPriorityDisinherit+0x144>)
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4403      	add	r3, r0
 80029e6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80029ec:	69fb      	ldr	r3, [r7, #28]
    }
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000006c 	.word	0x2000006c
 80029fc:	2000014c 	.word	0x2000014c
 8002a00:	20000070 	.word	0x20000070

08002a04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002a0e:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a14:	4b35      	ldr	r3, [pc, #212]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fba4 	bl	8001168 <uxListRemove>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	4b2e      	ldr	r3, [pc, #184]	; (8002af0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002a3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d124      	bne.n	8002a90 <prvAddCurrentTaskToDelayedList+0x8c>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d021      	beq.n	8002a90 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	3204      	adds	r2, #4
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1d1a      	adds	r2, r3, #4
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a80:	615a      	str	r2, [r3, #20]
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a8e:	e026      	b.n	8002ade <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d209      	bcs.n	8002abc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7fe fb1f 	bl	80010f8 <vListInsert>
}
 8002aba:	e010      	b.n	8002ade <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f7fe fb15 	bl	80010f8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d202      	bcs.n	8002ade <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6013      	str	r3, [r2, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000148 	.word	0x20000148
 8002aec:	2000006c 	.word	0x2000006c
 8002af0:	2000014c 	.word	0x2000014c
 8002af4:	20000130 	.word	0x20000130
 8002af8:	20000100 	.word	0x20000100
 8002afc:	200000fc 	.word	0x200000fc
 8002b00:	20000164 	.word	0x20000164

08002b04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002b0e:	f000 fa45 	bl	8002f9c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <xTimerCreateTimerTask+0x54>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <xTimerCreateTimerTask+0x58>)
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2302      	movs	r3, #2
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2300      	movs	r3, #0
 8002b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b28:	490d      	ldr	r1, [pc, #52]	; (8002b60 <xTimerCreateTimerTask+0x5c>)
 8002b2a:	480e      	ldr	r0, [pc, #56]	; (8002b64 <xTimerCreateTimerTask+0x60>)
 8002b2c:	f7fe ffb8 	bl	8001aa0 <xTaskCreate>
 8002b30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	603b      	str	r3, [r7, #0]
    }
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002b4e:	687b      	ldr	r3, [r7, #4]
    }
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200001a0 	.word	0x200001a0
 8002b5c:	200001a4 	.word	0x200001a4
 8002b60:	080037b0 	.word	0x080037b0
 8002b64:	08002c0d 	.word	0x08002c0d

08002b68 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002b74:	e008      	b.n	8002b88 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	18d1      	adds	r1, r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f8db 	bl	8002d50 <prvInsertTimerInActiveList>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ea      	bne.n	8002b76 <prvReloadTimer+0xe>
        }
    }
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <prvProcessExpiredTimer+0x5c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe facf 	bl	8001168 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff ffc3 	bl	8002b68 <prvReloadTimer>
 8002be2:	e008      	b.n	8002bf6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	4798      	blx	r3
    }
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000198 	.word	0x20000198

08002c0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c14:	f107 0308 	add.w	r3, r7, #8
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f857 	bl	8002ccc <prvGetNextExpireTime>
 8002c1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f803 	bl	8002c30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002c2a:	f000 f8d3 	bl	8002dd4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c2e:	e7f1      	b.n	8002c14 <prvTimerTask+0x8>

08002c30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002c3a:	f7ff f921 	bl	8001e80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f864 	bl	8002d10 <prvSampleTimeNow>
 8002c48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d130      	bne.n	8002cb2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <prvProcessTimerOrBlockTask+0x3c>
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d806      	bhi.n	8002c6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002c5e:	f7ff f91d 	bl	8001e9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c62:	68f9      	ldr	r1, [r7, #12]
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffa1 	bl	8002bac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002c6a:	e024      	b.n	8002cb6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <prvProcessTimerOrBlockTask+0x90>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <prvProcessTimerOrBlockTask+0x50>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <prvProcessTimerOrBlockTask+0x52>
 8002c80:	2300      	movs	r3, #0
 8002c82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <prvProcessTimerOrBlockTask+0x94>)
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fe fed1 	bl	8001a38 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002c96:	f7ff f901 	bl	8001e9c <xTaskResumeAll>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <prvProcessTimerOrBlockTask+0x98>)
 8002ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	f3bf 8f6f 	isb	sy
    }
 8002cb0:	e001      	b.n	8002cb6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002cb2:	f7ff f8f3 	bl	8001e9c <xTaskResumeAll>
    }
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000019c 	.word	0x2000019c
 8002cc4:	200001a0 	.word	0x200001a0
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <prvGetNextExpireTime+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <prvGetNextExpireTime+0x16>
 8002cde:	2201      	movs	r2, #1
 8002ce0:	e000      	b.n	8002ce4 <prvGetNextExpireTime+0x18>
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <prvGetNextExpireTime+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e001      	b.n	8002d00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002d00:	68fb      	ldr	r3, [r7, #12]
    }
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000198 	.word	0x20000198

08002d10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002d18:	f7ff f9bc 	bl	8002094 <xTaskGetTickCount>
 8002d1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <prvSampleTimeNow+0x3c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d205      	bcs.n	8002d34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002d28:	f000 f912 	bl	8002f50 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e002      	b.n	8002d3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <prvSampleTimeNow+0x3c>)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002d40:	68fb      	ldr	r3, [r7, #12]
    }
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200001a8 	.word	0x200001a8

08002d50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d812      	bhi.n	8002d9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e01b      	b.n	8002dc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <prvInsertTimerInActiveList+0x7c>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3304      	adds	r3, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7fe f9af 	bl	80010f8 <vListInsert>
 8002d9a:	e012      	b.n	8002dc2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d206      	bcs.n	8002db2 <prvInsertTimerInActiveList+0x62>
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e007      	b.n	8002dc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <prvInsertTimerInActiveList+0x80>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe f99b 	bl	80010f8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002dc2:	697b      	ldr	r3, [r7, #20]
    }
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	2000019c 	.word	0x2000019c
 8002dd0:	20000198 	.word	0x20000198

08002dd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002dda:	e0a6      	b.n	8002f2a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f2c0 80a2 	blt.w	8002f28 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe f9b7 	bl	8001168 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff87 	bl	8002d10 <prvSampleTimeNow>
 8002e02:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f200 808e 	bhi.w	8002f2a <prvProcessReceivedCommands+0x156>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <prvProcessReceivedCommands+0x40>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e39 	.word	0x08002e39
 8002e1c:	08002ea1 	.word	0x08002ea1
 8002e20:	08002eb5 	.word	0x08002eb5
 8002e24:	08002eff 	.word	0x08002eff
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e39 	.word	0x08002e39
 8002e30:	08002ea1 	.word	0x08002ea1
 8002e34:	08002eb5 	.word	0x08002eb5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	18d1      	adds	r1, r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	69f8      	ldr	r0, [r7, #28]
 8002e58:	f7ff ff7a 	bl	8002d50 <prvInsertTimerInActiveList>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d063      	beq.n	8002f2a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	69f8      	ldr	r0, [r7, #28]
 8002e7e:	f7ff fe73 	bl	8002b68 <prvReloadTimer>
 8002e82:	e008      	b.n	8002e96 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	69f8      	ldr	r0, [r7, #28]
 8002e9c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002e9e:	e044      	b.n	8002f2a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002eb2:	e03a      	b.n	8002f2a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	617b      	str	r3, [r7, #20]
    }
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	18d1      	adds	r1, r2, r3
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	69f8      	ldr	r0, [r7, #28]
 8002ef8:	f7ff ff2a 	bl	8002d50 <prvInsertTimerInActiveList>
                        break;
 8002efc:	e015      	b.n	8002f2a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002f0c:	69f8      	ldr	r0, [r7, #28]
 8002f0e:	f000 fae1 	bl	80034d4 <vPortFree>
 8002f12:	e00a      	b.n	8002f2a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002f26:	e000      	b.n	8002f2a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002f28:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <prvProcessReceivedCommands+0x178>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f107 0108 	add.w	r1, r7, #8
 8002f32:	2200      	movs	r2, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fb41 	bl	80015bc <xQueueReceive>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f47f af4d 	bne.w	8002ddc <prvProcessReceivedCommands+0x8>
        }
    }
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200001a0 	.word	0x200001a0

08002f50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f56:	e009      	b.n	8002f6c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <prvSwitchTimerLists+0x44>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002f62:	f04f 31ff 	mov.w	r1, #4294967295
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	f7ff fe20 	bl	8002bac <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <prvSwitchTimerLists+0x44>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <prvSwitchTimerLists+0x44>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <prvSwitchTimerLists+0x48>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <prvSwitchTimerLists+0x44>)
 8002f82:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <prvSwitchTimerLists+0x48>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
    }
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000198 	.word	0x20000198
 8002f98:	2000019c 	.word	0x2000019c

08002f9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002fa0:	f000 f926 	bl	80031f0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <prvCheckForValidListAndQueue+0x54>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11d      	bne.n	8002fe8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002fac:	4811      	ldr	r0, [pc, #68]	; (8002ff4 <prvCheckForValidListAndQueue+0x58>)
 8002fae:	f7fe f878 	bl	80010a2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002fb2:	4811      	ldr	r0, [pc, #68]	; (8002ff8 <prvCheckForValidListAndQueue+0x5c>)
 8002fb4:	f7fe f875 	bl	80010a2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <prvCheckForValidListAndQueue+0x60>)
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <prvCheckForValidListAndQueue+0x58>)
 8002fbc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <prvCheckForValidListAndQueue+0x64>)
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <prvCheckForValidListAndQueue+0x5c>)
 8002fc2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	210c      	movs	r1, #12
 8002fc8:	200a      	movs	r0, #10
 8002fca:	f7fe f987 	bl	80012dc <xQueueGenericCreate>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <prvCheckForValidListAndQueue+0x54>)
 8002fd2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <prvCheckForValidListAndQueue+0x54>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <prvCheckForValidListAndQueue+0x54>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4908      	ldr	r1, [pc, #32]	; (8003004 <prvCheckForValidListAndQueue+0x68>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fcda 	bl	800199c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002fe8:	f000 f932 	bl	8003250 <vPortExitCritical>
    }
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200001a0 	.word	0x200001a0
 8002ff4:	20000170 	.word	0x20000170
 8002ff8:	20000184 	.word	0x20000184
 8002ffc:	20000198 	.word	0x20000198
 8003000:	2000019c 	.word	0x2000019c
 8003004:	080037b8 	.word	0x080037b8

08003008 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3b04      	subs	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003020:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3b04      	subs	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b04      	subs	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003038:	4a08      	ldr	r2, [pc, #32]	; (800305c <pxPortInitialiseStack+0x54>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3b14      	subs	r3, #20
 8003042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3b20      	subs	r3, #32
 800304e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003050:	68fb      	ldr	r3, [r7, #12]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	08003061 	.word	0x08003061

08003060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <prvTaskExitError+0x54>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d00a      	beq.n	800308a <prvTaskExitError+0x2a>
        __asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60fb      	str	r3, [r7, #12]
    }
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <prvTaskExitError+0x28>
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	60bb      	str	r3, [r7, #8]
    }
 800309c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800309e:	bf00      	nop
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0fc      	beq.n	80030a0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000004 	.word	0x20000004
	...

080030c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pxCurrentTCBConst2>)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030ca:	f380 8809 	msr	PSP, r0
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8811 	msr	BASEPRI, r0
 80030da:	f04e 0e0d 	orr.w	lr, lr, #13
 80030de:	4770      	bx	lr

080030e0 <pxCurrentTCBConst2>:
 80030e0:	2000006c 	.word	0x2000006c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop

080030e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80030e8:	4806      	ldr	r0, [pc, #24]	; (8003104 <prvPortStartFirstTask+0x1c>)
 80030ea:	6800      	ldr	r0, [r0, #0]
 80030ec:	6800      	ldr	r0, [r0, #0]
 80030ee:	f380 8808 	msr	MSP, r0
 80030f2:	b662      	cpsie	i
 80030f4:	b661      	cpsie	f
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	df00      	svc	0
 8003100:	bf00      	nop
 8003102:	0000      	.short	0x0000
 8003104:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop

0800310c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003112:	4b32      	ldr	r3, [pc, #200]	; (80031dc <xPortStartScheduler+0xd0>)
 8003114:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <xPortStartScheduler+0xd4>)
 8003138:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <xPortStartScheduler+0xd8>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003140:	e009      	b.n	8003156 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <xPortStartScheduler+0xd8>)
 800314a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d0ef      	beq.n	8003142 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00a      	beq.n	8003184 <xPortStartScheduler+0x78>
        __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	60bb      	str	r3, [r7, #8]
    }
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <xPortStartScheduler+0xd8>)
 800318c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003198:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031ac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031b4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80031b8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80031ba:	f000 f8b7 	bl	800332c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <xPortStartScheduler+0xe0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80031c4:	f7ff ff90 	bl	80030e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80031c8:	f7ff f888 	bl	80022dc <vTaskSwitchContext>
    prvTaskExitError();
 80031cc:	f7ff ff48 	bl	8003060 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e400 	.word	0xe000e400
 80031e0:	200001ac 	.word	0x200001ac
 80031e4:	200001b0 	.word	0x200001b0
 80031e8:	e000ed20 	.word	0xe000ed20
 80031ec:	20000004 	.word	0x20000004

080031f0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	607b      	str	r3, [r7, #4]
    }
 8003208:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <vPortEnterCritical+0x58>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <vPortEnterCritical+0x58>)
 8003212:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <vPortEnterCritical+0x58>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10f      	bne.n	800323c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <vPortEnterCritical+0x5c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <vPortEnterCritical+0x4c>
        __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	603b      	str	r3, [r7, #0]
    }
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <vPortEnterCritical+0x4a>
    }
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000004 	.word	0x20000004
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <vPortExitCritical+0x4c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <vPortExitCritical+0x24>
        __asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	607b      	str	r3, [r7, #4]
    }
 8003270:	bf00      	nop
 8003272:	e7fe      	b.n	8003272 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <vPortExitCritical+0x4c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <vPortExitCritical+0x4c>)
 800327c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <vPortExitCritical+0x4c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <vPortExitCritical+0x42>
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003290:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000004 	.word	0x20000004

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032b0:	6010      	str	r0, [r2, #0]
 80032b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80032b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032ba:	f380 8811 	msr	BASEPRI, r0
 80032be:	f7ff f80d 	bl	80022dc <vTaskSwitchContext>
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	6808      	ldr	r0, [r1, #0]
 80032d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032d6:	f380 8809 	msr	PSP, r0
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	4770      	bx	lr

080032e0 <pxCurrentTCBConst>:
 80032e0:	2000006c 	.word	0x2000006c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
    }
 8003300:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003302:	f7fe fed5 	bl	80020b0 <xTaskIncrementTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SysTick_Handler+0x40>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f383 8811 	msr	BASEPRI, r3
    }
 800331e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <vPortSetupTimerInterrupt+0x24>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <vPortSetupTimerInterrupt+0x28>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <vPortSetupTimerInterrupt+0x2c>)
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <vPortSetupTimerInterrupt+0x30>)
 8003340:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003342:	4b03      	ldr	r3, [pc, #12]	; (8003350 <vPortSetupTimerInterrupt+0x24>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	e000e010 	.word	0xe000e010
 8003354:	e000e018 	.word	0xe000e018
 8003358:	e000e014 	.word	0xe000e014
 800335c:	0001193f 	.word	0x0001193f

08003360 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800336c:	f7fe fd88 	bl	8001e80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <pvPortMalloc+0x160>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003378:	f000 f908 	bl	800358c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003382:	2208      	movs	r2, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	3308      	adds	r3, #8
 800338e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	43db      	mvns	r3, r3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d804      	bhi.n	80033a4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	e001      	b.n	80033a8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db70      	blt.n	8003490 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d06d      	beq.n	8003490 <pvPortMalloc+0x130>
 80033b4:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <pvPortMalloc+0x164>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d868      	bhi.n	8003490 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033be:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <pvPortMalloc+0x168>)
 80033c0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <pvPortMalloc+0x168>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033c8:	e004      	b.n	80033d4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d903      	bls.n	80033e6 <pvPortMalloc+0x86>
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f1      	bne.n	80033ca <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <pvPortMalloc+0x160>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d04f      	beq.n	8003490 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2208      	movs	r2, #8
 80033f6:	4413      	add	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad2      	subs	r2, r2, r3
 800340a:	2308      	movs	r3, #8
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	429a      	cmp	r2, r3
 8003410:	d91f      	bls.n	8003452 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <pvPortMalloc+0xda>
        __asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	613b      	str	r3, [r7, #16]
    }
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1ad2      	subs	r2, r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f000 f8f9 	bl	8003644 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <pvPortMalloc+0x164>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <pvPortMalloc+0x164>)
 800345e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003460:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <pvPortMalloc+0x164>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <pvPortMalloc+0x16c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d203      	bcs.n	8003474 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <pvPortMalloc+0x164>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a16      	ldr	r2, [pc, #88]	; (80034cc <pvPortMalloc+0x16c>)
 8003472:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <pvPortMalloc+0x170>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <pvPortMalloc+0x170>)
 800348e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003490:	f7fe fd04 	bl	8001e9c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <pvPortMalloc+0x154>
        __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60fb      	str	r3, [r7, #12]
    }
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <pvPortMalloc+0x152>
    return pvReturn;
 80034b4:	69fb      	ldr	r3, [r7, #28]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3728      	adds	r7, #40	; 0x28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200021bc 	.word	0x200021bc
 80034c4:	200021c0 	.word	0x200021c0
 80034c8:	200021b4 	.word	0x200021b4
 80034cc:	200021c4 	.word	0x200021c4
 80034d0:	200021c8 	.word	0x200021c8

080034d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d049      	beq.n	800357a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80034e6:	2308      	movs	r3, #8
 80034e8:	425b      	negs	r3, r3
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4413      	add	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db0a      	blt.n	8003512 <vPortFree+0x3e>
        __asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60fb      	str	r3, [r7, #12]
    }
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <vPortFree+0x5c>
        __asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60bb      	str	r3, [r7, #8]
    }
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0fdb      	lsrs	r3, r3, #31
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d118      	bne.n	800357a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003554:	f7fe fc94 	bl	8001e80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <vPortFree+0xb0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4413      	add	r3, r2
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <vPortFree+0xb0>)
 8003564:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003566:	6938      	ldr	r0, [r7, #16]
 8003568:	f000 f86c 	bl	8003644 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <vPortFree+0xb4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <vPortFree+0xb4>)
 8003574:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003576:	f7fe fc91 	bl	8001e9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200021c0 	.word	0x200021c0
 8003588:	200021cc 	.word	0x200021cc

0800358c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003596:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <prvHeapInit+0xa4>)
 800359a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3307      	adds	r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <prvHeapInit+0xa4>)
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <prvHeapInit+0xa8>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <prvHeapInit+0xa8>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80035d8:	2208      	movs	r2, #8
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0307 	bic.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <prvHeapInit+0xac>)
 80035ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <prvHeapInit+0xac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <prvHeapInit+0xac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <prvHeapInit+0xac>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a08      	ldr	r2, [pc, #32]	; (800363c <prvHeapInit+0xb0>)
 800361a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <prvHeapInit+0xb4>)
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	200001b4 	.word	0x200001b4
 8003634:	200021b4 	.word	0x200021b4
 8003638:	200021bc 	.word	0x200021bc
 800363c:	200021c4 	.word	0x200021c4
 8003640:	200021c0 	.word	0x200021c0

08003644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <prvInsertBlockIntoFreeList+0xa8>)
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e002      	b.n	8003658 <prvInsertBlockIntoFreeList+0x14>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d8f7      	bhi.n	8003652 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4413      	add	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d108      	bne.n	8003686 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	441a      	add	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d118      	bne.n	80036cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <prvInsertBlockIntoFreeList+0xac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d00d      	beq.n	80036c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e008      	b.n	80036d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <prvInsertBlockIntoFreeList+0xac>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e003      	b.n	80036d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d002      	beq.n	80036e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	200021b4 	.word	0x200021b4
 80036f0:	200021bc 	.word	0x200021bc

080036f4 <__libc_init_array>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	2600      	movs	r6, #0
 80036f8:	4d0c      	ldr	r5, [pc, #48]	; (800372c <__libc_init_array+0x38>)
 80036fa:	4c0d      	ldr	r4, [pc, #52]	; (8003730 <__libc_init_array+0x3c>)
 80036fc:	1b64      	subs	r4, r4, r5
 80036fe:	10a4      	asrs	r4, r4, #2
 8003700:	42a6      	cmp	r6, r4
 8003702:	d109      	bne.n	8003718 <__libc_init_array+0x24>
 8003704:	f000 f830 	bl	8003768 <_init>
 8003708:	2600      	movs	r6, #0
 800370a:	4d0a      	ldr	r5, [pc, #40]	; (8003734 <__libc_init_array+0x40>)
 800370c:	4c0a      	ldr	r4, [pc, #40]	; (8003738 <__libc_init_array+0x44>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	42a6      	cmp	r6, r4
 8003714:	d105      	bne.n	8003722 <__libc_init_array+0x2e>
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	f855 3b04 	ldr.w	r3, [r5], #4
 800371c:	4798      	blx	r3
 800371e:	3601      	adds	r6, #1
 8003720:	e7ee      	b.n	8003700 <__libc_init_array+0xc>
 8003722:	f855 3b04 	ldr.w	r3, [r5], #4
 8003726:	4798      	blx	r3
 8003728:	3601      	adds	r6, #1
 800372a:	e7f2      	b.n	8003712 <__libc_init_array+0x1e>
 800372c:	080037c0 	.word	0x080037c0
 8003730:	080037c0 	.word	0x080037c0
 8003734:	080037c0 	.word	0x080037c0
 8003738:	080037c4 	.word	0x080037c4

0800373c <memcpy>:
 800373c:	440a      	add	r2, r1
 800373e:	4291      	cmp	r1, r2
 8003740:	f100 33ff 	add.w	r3, r0, #4294967295
 8003744:	d100      	bne.n	8003748 <memcpy+0xc>
 8003746:	4770      	bx	lr
 8003748:	b510      	push	{r4, lr}
 800374a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800374e:	4291      	cmp	r1, r2
 8003750:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003754:	d1f9      	bne.n	800374a <memcpy+0xe>
 8003756:	bd10      	pop	{r4, pc}

08003758 <memset>:
 8003758:	4603      	mov	r3, r0
 800375a:	4402      	add	r2, r0
 800375c:	4293      	cmp	r3, r2
 800375e:	d100      	bne.n	8003762 <memset+0xa>
 8003760:	4770      	bx	lr
 8003762:	f803 1b01 	strb.w	r1, [r3], #1
 8003766:	e7f9      	b.n	800375c <memset+0x4>

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
